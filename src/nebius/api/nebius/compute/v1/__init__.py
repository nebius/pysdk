# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_classes as pb_classes
import nebius.api.nebius.compute.v1.disk_pb2 as disk_pb2
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_1
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import nebius.base.protos.pb_enum as pb_enum
import builtins as builtins
import collections.abc as abc
import nebius.api.nebius.compute.v1.operation_service_pb2 as operation_service_pb2
import nebius.api.nebius.compute.v1.disk_service_pb2 as disk_service_pb2
import nebius.aio.client as client
import typing as typing
import grpc as grpc
import nebius.aio.request as request_1
import nebius.aio.operation as operation
import nebius.api.nebius.common.v1.operation_pb2 as operation_pb2
import nebius.api.nebius.common.v1.operation_service_pb2 as operation_service_pb2_1
import nebius.api.nebius.compute.v1.filesystem_pb2 as filesystem_pb2
import nebius.api.nebius.compute.v1.filesystem_service_pb2 as filesystem_service_pb2
import nebius.api.nebius.compute.v1.gpu_cluster_pb2 as gpu_cluster_pb2
import nebius.api.nebius.compute.v1.gpu_cluster_service_pb2 as gpu_cluster_service_pb2
import nebius.api.nebius.compute.v1.image_pb2 as image_pb2
import nebius.api.nebius.compute.v1.image_service_pb2 as image_service_pb2
import nebius.api.nebius.compute.v1.network_interface_pb2 as network_interface_pb2
import nebius.api.nebius.compute.v1.instance_pb2 as instance_pb2
import nebius.api.nebius.compute.v1.instance_service_pb2 as instance_service_pb2
#@ local imports here @#

# file: nebius/compute/v1/disk.proto
class Disk(pb_classes.Message):
    __PB2_CLASS__ = disk_pb2.Disk
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.Disk",disk_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "DiskSpec|disk_pb2.DiskSpec|None" = None,
        status: "DiskStatus|disk_pb2.DiskStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "DiskSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=DiskSpec,
        )
    @spec.setter
    def spec(self, value: "DiskSpec|disk_pb2.DiskSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "DiskStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=DiskStatus,
        )
    @status.setter
    def status(self, value: "DiskStatus|disk_pb2.DiskStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class DiskSpec(pb_classes.Message):
    __PB2_CLASS__ = disk_pb2.DiskSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.DiskSpec",disk_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class DiskType(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.DiskSpec.DiskType",disk_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        NETWORK_SSD = 1
        NETWORK_HDD = 2
        NETWORK_SSD_NON_REPLICATED = 3
        NETWORK_SSD_IO_M3 = 4
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        size_bytes: "builtins.int|None" = None,
        size_kibibytes: "builtins.int|None" = None,
        size_mebibytes: "builtins.int|None" = None,
        size_gibibytes: "builtins.int|None" = None,
        block_size_bytes: "builtins.int|None" = None,
        type: "DiskSpec.DiskType|disk_pb2.DiskSpec.DiskType|None" = None,
        placement_policy: "DiskPlacementPolicy|disk_pb2.DiskPlacementPolicy|None" = None,
        source_image_id: "builtins.str|None" = None,
        source_image_family: "SourceImageFamily|disk_pb2.SourceImageFamily|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if size_kibibytes is not None:
            self.size_kibibytes = size_kibibytes
        if size_mebibytes is not None:
            self.size_mebibytes = size_mebibytes
        if size_gibibytes is not None:
            self.size_gibibytes = size_gibibytes
        if block_size_bytes is not None:
            self.block_size_bytes = block_size_bytes
        if type is not None:
            self.type = type
        if placement_policy is not None:
            self.placement_policy = placement_policy
        if source_image_id is not None:
            self.source_image_id = source_image_id
        if source_image_family is not None:
            self.source_image_family = source_image_family
    
    @property
    def size_bytes(self) -> "builtins.int|None":
        return super()._get_field("size_bytes", explicit_presence=True,
        )
    @size_bytes.setter
    def size_bytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_bytes",value,explicit_presence=True,
        )
    
    @property
    def size_kibibytes(self) -> "builtins.int|None":
        return super()._get_field("size_kibibytes", explicit_presence=True,
        )
    @size_kibibytes.setter
    def size_kibibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_kibibytes",value,explicit_presence=True,
        )
    
    @property
    def size_mebibytes(self) -> "builtins.int|None":
        return super()._get_field("size_mebibytes", explicit_presence=True,
        )
    @size_mebibytes.setter
    def size_mebibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_mebibytes",value,explicit_presence=True,
        )
    
    @property
    def size_gibibytes(self) -> "builtins.int|None":
        return super()._get_field("size_gibibytes", explicit_presence=True,
        )
    @size_gibibytes.setter
    def size_gibibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_gibibytes",value,explicit_presence=True,
        )
    
    @property
    def block_size_bytes(self) -> "builtins.int":
        return super()._get_field("block_size_bytes", explicit_presence=False,
        )
    @block_size_bytes.setter
    def block_size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("block_size_bytes",value,explicit_presence=False,
        )
    
    @property
    def type(self) -> "DiskSpec.DiskType":
        return super()._get_field("type", explicit_presence=False,
        wrap=DiskSpec.DiskType,
        )
    @type.setter
    def type(self, value: "DiskSpec.DiskType|disk_pb2.DiskSpec.DiskType") -> None:
        return super()._set_field("type",value,explicit_presence=False,
        )
    
    @property
    def placement_policy(self) -> "DiskPlacementPolicy":
        return super()._get_field("placement_policy", explicit_presence=False,
        wrap=DiskPlacementPolicy,
        )
    @placement_policy.setter
    def placement_policy(self, value: "DiskPlacementPolicy|disk_pb2.DiskPlacementPolicy") -> None:
        return super()._set_field("placement_policy",value,explicit_presence=False,
        )
    
    @property
    def source_image_id(self) -> "builtins.str|None":
        return super()._get_field("source_image_id", explicit_presence=True,
        )
    @source_image_id.setter
    def source_image_id(self, value: "builtins.str|None") -> None:
        return super()._set_field("source_image_id",value,explicit_presence=True,
        )
    
    @property
    def source_image_family(self) -> "SourceImageFamily":
        return super()._get_field("source_image_family", explicit_presence=False,
        wrap=SourceImageFamily,
        )
    @source_image_family.setter
    def source_image_family(self, value: "SourceImageFamily|disk_pb2.SourceImageFamily") -> None:
        return super()._set_field("source_image_family",value,explicit_presence=False,
        )
    
class SourceImageFamily(pb_classes.Message):
    __PB2_CLASS__ = disk_pb2.SourceImageFamily
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.SourceImageFamily",disk_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        image_family: "builtins.str|None" = None,
        parent_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if image_family is not None:
            self.image_family = image_family
        if parent_id is not None:
            self.parent_id = parent_id
    
    @property
    def image_family(self) -> "builtins.str":
        return super()._get_field("image_family", explicit_presence=False,
        )
    @image_family.setter
    def image_family(self, value: "builtins.str") -> None:
        return super()._set_field("image_family",value,explicit_presence=False,
        )
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
class DiskPlacementPolicy(pb_classes.Message):
    __PB2_CLASS__ = disk_pb2.DiskPlacementPolicy
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.DiskPlacementPolicy",disk_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        placement_group_id: "builtins.str|None" = None,
        placement_group_partition: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if placement_group_id is not None:
            self.placement_group_id = placement_group_id
        if placement_group_partition is not None:
            self.placement_group_partition = placement_group_partition
    
    @property
    def placement_group_id(self) -> "builtins.str":
        return super()._get_field("placement_group_id", explicit_presence=False,
        )
    @placement_group_id.setter
    def placement_group_id(self, value: "builtins.str") -> None:
        return super()._set_field("placement_group_id",value,explicit_presence=False,
        )
    
    @property
    def placement_group_partition(self) -> "builtins.int":
        return super()._get_field("placement_group_partition", explicit_presence=False,
        )
    @placement_group_partition.setter
    def placement_group_partition(self, value: "builtins.int") -> None:
        return super()._set_field("placement_group_partition",value,explicit_presence=False,
        )
    
class DiskStatus(pb_classes.Message):
    __PB2_CLASS__ = disk_pb2.DiskStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.DiskStatus",disk_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class State(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.DiskStatus.State",disk_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        CREATING = 1
        READY = 2
        UPDATING = 3
        DELETING = 4
        ERROR = 5
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        state: "DiskStatus.State|disk_pb2.DiskStatus.State|None" = None,
        state_description: "builtins.str|None" = None,
        read_write_attachment: "builtins.str|None" = None,
        read_only_attachments: "abc.Iterable[builtins.str]|None" = None,
        source_image_id: "builtins.str|None" = None,
        size_bytes: "builtins.int|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if state is not None:
            self.state = state
        if state_description is not None:
            self.state_description = state_description
        if read_write_attachment is not None:
            self.read_write_attachment = read_write_attachment
        if read_only_attachments is not None:
            self.read_only_attachments = read_only_attachments
        if source_image_id is not None:
            self.source_image_id = source_image_id
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def state(self) -> "DiskStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=DiskStatus.State,
        )
    @state.setter
    def state(self, value: "DiskStatus.State|disk_pb2.DiskStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def state_description(self) -> "builtins.str":
        return super()._get_field("state_description", explicit_presence=False,
        )
    @state_description.setter
    def state_description(self, value: "builtins.str") -> None:
        return super()._set_field("state_description",value,explicit_presence=False,
        )
    
    @property
    def read_write_attachment(self) -> "builtins.str":
        return super()._get_field("read_write_attachment", explicit_presence=False,
        )
    @read_write_attachment.setter
    def read_write_attachment(self, value: "builtins.str") -> None:
        return super()._set_field("read_write_attachment",value,explicit_presence=False,
        )
    
    @property
    def read_only_attachments(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("read_only_attachments", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @read_only_attachments.setter
    def read_only_attachments(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("read_only_attachments",value,explicit_presence=False,
        )
    
    @property
    def source_image_id(self) -> "builtins.str":
        return super()._get_field("source_image_id", explicit_presence=False,
        )
    @source_image_id.setter
    def source_image_id(self, value: "builtins.str") -> None:
        return super()._set_field("source_image_id",value,explicit_presence=False,
        )
    
    @property
    def size_bytes(self) -> "builtins.int":
        return super()._get_field("size_bytes", explicit_presence=False,
        )
    @size_bytes.setter
    def size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("size_bytes",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
# file: nebius/compute/v1/operation_service.proto
class ListOperationsByParentRequest(pb_classes.Message):
    __PB2_CLASS__ = operation_service_pb2.ListOperationsByParentRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListOperationsByParentRequest",operation_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
# file: nebius/compute/v1/disk_service.proto
class GetDiskRequest(pb_classes.Message):
    __PB2_CLASS__ = disk_service_pb2.GetDiskRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GetDiskRequest",disk_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListDisksRequest(pb_classes.Message):
    __PB2_CLASS__ = disk_service_pb2.ListDisksRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListDisksRequest",disk_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value,explicit_presence=False,
        )
    
class CreateDiskRequest(pb_classes.Message):
    __PB2_CLASS__ = disk_service_pb2.CreateDiskRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.CreateDiskRequest",disk_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "DiskSpec|disk_pb2.DiskSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "DiskSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=DiskSpec,
        )
    @spec.setter
    def spec(self, value: "DiskSpec|disk_pb2.DiskSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class UpdateDiskRequest(pb_classes.Message):
    __PB2_CLASS__ = disk_service_pb2.UpdateDiskRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.UpdateDiskRequest",disk_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "DiskSpec|disk_pb2.DiskSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "DiskSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=DiskSpec,
        )
    @spec.setter
    def spec(self, value: "DiskSpec|disk_pb2.DiskSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteDiskRequest(pb_classes.Message):
    __PB2_CLASS__ = disk_service_pb2.DeleteDiskRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.DeleteDiskRequest",disk_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListDisksResponse(pb_classes.Message):
    __PB2_CLASS__ = disk_service_pb2.ListDisksResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListDisksResponse",disk_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[Disk]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Disk]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Disk,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[Disk]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    

class DiskServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.compute.v1.DiskService",disk_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.compute.v1.DiskService"
    __operation_type__ = v1_1.Operation
    
    def get(self,
        request: "GetDiskRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetDiskRequest","Disk"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=disk_pb2.Disk,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","Disk"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=disk_pb2.Disk,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListDisksRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListDisksRequest","ListDisksResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=disk_service_pb2.ListDisksResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateDiskRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateDiskRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateDiskRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateDiskRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteDiskRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteDiskRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def list_operations_by_parent(self,
        request: "ListOperationsByParentRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListOperationsByParentRequest","v1_1.ListOperationsResponse"]:
        return super().request(
            method="ListOperationsByParent",
            request=request,
            result_pb2_class=operation_service_pb2_1.ListOperationsResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    

# file: nebius/compute/v1/filesystem.proto
class Filesystem(pb_classes.Message):
    __PB2_CLASS__ = filesystem_pb2.Filesystem
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.Filesystem",filesystem_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "FilesystemSpec|filesystem_pb2.FilesystemSpec|None" = None,
        status: "FilesystemStatus|filesystem_pb2.FilesystemStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "FilesystemSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=FilesystemSpec,
        )
    @spec.setter
    def spec(self, value: "FilesystemSpec|filesystem_pb2.FilesystemSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "FilesystemStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=FilesystemStatus,
        )
    @status.setter
    def status(self, value: "FilesystemStatus|filesystem_pb2.FilesystemStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class FilesystemSpec(pb_classes.Message):
    __PB2_CLASS__ = filesystem_pb2.FilesystemSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.FilesystemSpec",filesystem_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class FilesystemType(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.FilesystemSpec.FilesystemType",filesystem_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        NETWORK_SSD = 1
        NETWORK_HDD = 2
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        size_bytes: "builtins.int|None" = None,
        size_kibibytes: "builtins.int|None" = None,
        size_mebibytes: "builtins.int|None" = None,
        size_gibibytes: "builtins.int|None" = None,
        block_size_bytes: "builtins.int|None" = None,
        type: "FilesystemSpec.FilesystemType|filesystem_pb2.FilesystemSpec.FilesystemType|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if size_kibibytes is not None:
            self.size_kibibytes = size_kibibytes
        if size_mebibytes is not None:
            self.size_mebibytes = size_mebibytes
        if size_gibibytes is not None:
            self.size_gibibytes = size_gibibytes
        if block_size_bytes is not None:
            self.block_size_bytes = block_size_bytes
        if type is not None:
            self.type = type
    
    @property
    def size_bytes(self) -> "builtins.int|None":
        return super()._get_field("size_bytes", explicit_presence=True,
        )
    @size_bytes.setter
    def size_bytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_bytes",value,explicit_presence=True,
        )
    
    @property
    def size_kibibytes(self) -> "builtins.int|None":
        return super()._get_field("size_kibibytes", explicit_presence=True,
        )
    @size_kibibytes.setter
    def size_kibibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_kibibytes",value,explicit_presence=True,
        )
    
    @property
    def size_mebibytes(self) -> "builtins.int|None":
        return super()._get_field("size_mebibytes", explicit_presence=True,
        )
    @size_mebibytes.setter
    def size_mebibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_mebibytes",value,explicit_presence=True,
        )
    
    @property
    def size_gibibytes(self) -> "builtins.int|None":
        return super()._get_field("size_gibibytes", explicit_presence=True,
        )
    @size_gibibytes.setter
    def size_gibibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_gibibytes",value,explicit_presence=True,
        )
    
    @property
    def block_size_bytes(self) -> "builtins.int":
        return super()._get_field("block_size_bytes", explicit_presence=False,
        )
    @block_size_bytes.setter
    def block_size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("block_size_bytes",value,explicit_presence=False,
        )
    
    @property
    def type(self) -> "FilesystemSpec.FilesystemType":
        return super()._get_field("type", explicit_presence=False,
        wrap=FilesystemSpec.FilesystemType,
        )
    @type.setter
    def type(self, value: "FilesystemSpec.FilesystemType|filesystem_pb2.FilesystemSpec.FilesystemType") -> None:
        return super()._set_field("type",value,explicit_presence=False,
        )
    
class FilesystemStatus(pb_classes.Message):
    __PB2_CLASS__ = filesystem_pb2.FilesystemStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.FilesystemStatus",filesystem_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class State(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.FilesystemStatus.State",filesystem_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        CREATING = 1
        READY = 2
        UPDATING = 3
        DELETING = 4
        ERROR = 5
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        state: "FilesystemStatus.State|filesystem_pb2.FilesystemStatus.State|None" = None,
        state_description: "builtins.str|None" = None,
        read_write_attachments: "abc.Iterable[builtins.str]|None" = None,
        read_only_attachments: "abc.Iterable[builtins.str]|None" = None,
        size_bytes: "builtins.int|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if state is not None:
            self.state = state
        if state_description is not None:
            self.state_description = state_description
        if read_write_attachments is not None:
            self.read_write_attachments = read_write_attachments
        if read_only_attachments is not None:
            self.read_only_attachments = read_only_attachments
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def state(self) -> "FilesystemStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=FilesystemStatus.State,
        )
    @state.setter
    def state(self, value: "FilesystemStatus.State|filesystem_pb2.FilesystemStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def state_description(self) -> "builtins.str":
        return super()._get_field("state_description", explicit_presence=False,
        )
    @state_description.setter
    def state_description(self, value: "builtins.str") -> None:
        return super()._set_field("state_description",value,explicit_presence=False,
        )
    
    @property
    def read_write_attachments(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("read_write_attachments", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @read_write_attachments.setter
    def read_write_attachments(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("read_write_attachments",value,explicit_presence=False,
        )
    
    @property
    def read_only_attachments(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("read_only_attachments", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @read_only_attachments.setter
    def read_only_attachments(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("read_only_attachments",value,explicit_presence=False,
        )
    
    @property
    def size_bytes(self) -> "builtins.int":
        return super()._get_field("size_bytes", explicit_presence=False,
        )
    @size_bytes.setter
    def size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("size_bytes",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
# file: nebius/compute/v1/filesystem_service.proto
class GetFilesystemRequest(pb_classes.Message):
    __PB2_CLASS__ = filesystem_service_pb2.GetFilesystemRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GetFilesystemRequest",filesystem_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListFilesystemsRequest(pb_classes.Message):
    __PB2_CLASS__ = filesystem_service_pb2.ListFilesystemsRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListFilesystemsRequest",filesystem_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value,explicit_presence=False,
        )
    
class CreateFilesystemRequest(pb_classes.Message):
    __PB2_CLASS__ = filesystem_service_pb2.CreateFilesystemRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.CreateFilesystemRequest",filesystem_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "FilesystemSpec|filesystem_pb2.FilesystemSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "FilesystemSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=FilesystemSpec,
        )
    @spec.setter
    def spec(self, value: "FilesystemSpec|filesystem_pb2.FilesystemSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class UpdateFilesystemRequest(pb_classes.Message):
    __PB2_CLASS__ = filesystem_service_pb2.UpdateFilesystemRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.UpdateFilesystemRequest",filesystem_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "FilesystemSpec|filesystem_pb2.FilesystemSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "FilesystemSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=FilesystemSpec,
        )
    @spec.setter
    def spec(self, value: "FilesystemSpec|filesystem_pb2.FilesystemSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteFilesystemRequest(pb_classes.Message):
    __PB2_CLASS__ = filesystem_service_pb2.DeleteFilesystemRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.DeleteFilesystemRequest",filesystem_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListFilesystemsResponse(pb_classes.Message):
    __PB2_CLASS__ = filesystem_service_pb2.ListFilesystemsResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListFilesystemsResponse",filesystem_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[Filesystem]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Filesystem]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Filesystem,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[Filesystem]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    

class FilesystemServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.compute.v1.FilesystemService",filesystem_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.compute.v1.FilesystemService"
    __operation_type__ = v1_1.Operation
    
    def get(self,
        request: "GetFilesystemRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetFilesystemRequest","Filesystem"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=filesystem_pb2.Filesystem,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","Filesystem"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=filesystem_pb2.Filesystem,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListFilesystemsRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListFilesystemsRequest","ListFilesystemsResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=filesystem_service_pb2.ListFilesystemsResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateFilesystemRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateFilesystemRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateFilesystemRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateFilesystemRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteFilesystemRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteFilesystemRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def list_operations_by_parent(self,
        request: "ListOperationsByParentRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListOperationsByParentRequest","v1_1.ListOperationsResponse"]:
        return super().request(
            method="ListOperationsByParent",
            request=request,
            result_pb2_class=operation_service_pb2_1.ListOperationsResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    

# file: nebius/compute/v1/gpu_cluster.proto
class GpuCluster(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_pb2.GpuCluster
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GpuCluster",gpu_cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "GpuClusterSpec|gpu_cluster_pb2.GpuClusterSpec|None" = None,
        status: "GpuClusterStatus|gpu_cluster_pb2.GpuClusterStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "GpuClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=GpuClusterSpec,
        )
    @spec.setter
    def spec(self, value: "GpuClusterSpec|gpu_cluster_pb2.GpuClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "GpuClusterStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=GpuClusterStatus,
        )
    @status.setter
    def status(self, value: "GpuClusterStatus|gpu_cluster_pb2.GpuClusterStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class GpuClusterSpec(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_pb2.GpuClusterSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GpuClusterSpec",gpu_cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        infiniband_fabric: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if infiniband_fabric is not None:
            self.infiniband_fabric = infiniband_fabric
    
    @property
    def infiniband_fabric(self) -> "builtins.str":
        return super()._get_field("infiniband_fabric", explicit_presence=False,
        )
    @infiniband_fabric.setter
    def infiniband_fabric(self, value: "builtins.str") -> None:
        return super()._set_field("infiniband_fabric",value,explicit_presence=False,
        )
    
class GpuClusterStatus(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_pb2.GpuClusterStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GpuClusterStatus",gpu_cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        instances: "abc.Iterable[builtins.str]|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if instances is not None:
            self.instances = instances
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def instances(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("instances", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @instances.setter
    def instances(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("instances",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
# file: nebius/compute/v1/gpu_cluster_service.proto
class GetGpuClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_service_pb2.GetGpuClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GetGpuClusterRequest",gpu_cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListGpuClustersRequest(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_service_pb2.ListGpuClustersRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListGpuClustersRequest",gpu_cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value,explicit_presence=False,
        )
    
class CreateGpuClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_service_pb2.CreateGpuClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.CreateGpuClusterRequest",gpu_cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "GpuClusterSpec|gpu_cluster_pb2.GpuClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "GpuClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=GpuClusterSpec,
        )
    @spec.setter
    def spec(self, value: "GpuClusterSpec|gpu_cluster_pb2.GpuClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class UpdateGpuClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_service_pb2.UpdateGpuClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.UpdateGpuClusterRequest",gpu_cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "GpuClusterSpec|gpu_cluster_pb2.GpuClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "GpuClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=GpuClusterSpec,
        )
    @spec.setter
    def spec(self, value: "GpuClusterSpec|gpu_cluster_pb2.GpuClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteGpuClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_service_pb2.DeleteGpuClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.DeleteGpuClusterRequest",gpu_cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListGpuClustersResponse(pb_classes.Message):
    __PB2_CLASS__ = gpu_cluster_service_pb2.ListGpuClustersResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListGpuClustersResponse",gpu_cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[GpuCluster]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[GpuCluster]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(GpuCluster,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[GpuCluster]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    

class GpuClusterServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.compute.v1.GpuClusterService",gpu_cluster_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.compute.v1.GpuClusterService"
    __operation_type__ = v1_1.Operation
    
    def get(self,
        request: "GetGpuClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetGpuClusterRequest","GpuCluster"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=gpu_cluster_pb2.GpuCluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","GpuCluster"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=gpu_cluster_pb2.GpuCluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListGpuClustersRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListGpuClustersRequest","ListGpuClustersResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=gpu_cluster_service_pb2.ListGpuClustersResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateGpuClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateGpuClusterRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateGpuClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateGpuClusterRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteGpuClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteGpuClusterRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def list_operations_by_parent(self,
        request: "ListOperationsByParentRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListOperationsByParentRequest","v1_1.ListOperationsResponse"]:
        return super().request(
            method="ListOperationsByParent",
            request=request,
            result_pb2_class=operation_service_pb2_1.ListOperationsResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    

# file: nebius/compute/v1/image.proto
class Image(pb_classes.Message):
    __PB2_CLASS__ = image_pb2.Image
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.Image",image_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ImageSpec|image_pb2.ImageSpec|None" = None,
        status: "ImageStatus|image_pb2.ImageStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "ImageSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ImageSpec,
        )
    @spec.setter
    def spec(self, value: "ImageSpec|image_pb2.ImageSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "ImageStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=ImageStatus,
        )
    @status.setter
    def status(self, value: "ImageStatus|image_pb2.ImageStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class ImageSpec(pb_classes.Message):
    __PB2_CLASS__ = image_pb2.ImageSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ImageSpec",image_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        description: "builtins.str|None" = None,
        image_family: "builtins.str|None" = None,
        version: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if description is not None:
            self.description = description
        if image_family is not None:
            self.image_family = image_family
        if version is not None:
            self.version = version
    
    @property
    def description(self) -> "builtins.str|None":
        return super()._get_field("description", explicit_presence=True,
        )
    @description.setter
    def description(self, value: "builtins.str|None") -> None:
        return super()._set_field("description",value,explicit_presence=True,
        )
    
    @property
    def image_family(self) -> "builtins.str":
        return super()._get_field("image_family", explicit_presence=False,
        )
    @image_family.setter
    def image_family(self, value: "builtins.str") -> None:
        return super()._set_field("image_family",value,explicit_presence=False,
        )
    
    @property
    def version(self) -> "builtins.str":
        return super()._get_field("version", explicit_presence=False,
        )
    @version.setter
    def version(self, value: "builtins.str") -> None:
        return super()._set_field("version",value,explicit_presence=False,
        )
    
class ImageStatus(pb_classes.Message):
    __PB2_CLASS__ = image_pb2.ImageStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ImageStatus",image_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class State(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.ImageStatus.State",image_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        CREATING = 1
        READY = 2
        UPDATING = 3
        DELETING = 4
        ERROR = 5
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        state: "ImageStatus.State|image_pb2.ImageStatus.State|None" = None,
        state_description: "builtins.str|None" = None,
        storage_size_bytes: "builtins.int|None" = None,
        min_disk_size_bytes: "builtins.int|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if state is not None:
            self.state = state
        if state_description is not None:
            self.state_description = state_description
        if storage_size_bytes is not None:
            self.storage_size_bytes = storage_size_bytes
        if min_disk_size_bytes is not None:
            self.min_disk_size_bytes = min_disk_size_bytes
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def state(self) -> "ImageStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=ImageStatus.State,
        )
    @state.setter
    def state(self, value: "ImageStatus.State|image_pb2.ImageStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def state_description(self) -> "builtins.str":
        return super()._get_field("state_description", explicit_presence=False,
        )
    @state_description.setter
    def state_description(self, value: "builtins.str") -> None:
        return super()._set_field("state_description",value,explicit_presence=False,
        )
    
    @property
    def storage_size_bytes(self) -> "builtins.int":
        return super()._get_field("storage_size_bytes", explicit_presence=False,
        )
    @storage_size_bytes.setter
    def storage_size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("storage_size_bytes",value,explicit_presence=False,
        )
    
    @property
    def min_disk_size_bytes(self) -> "builtins.int":
        return super()._get_field("min_disk_size_bytes", explicit_presence=False,
        )
    @min_disk_size_bytes.setter
    def min_disk_size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("min_disk_size_bytes",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
# file: nebius/compute/v1/image_service.proto
class GetImageRequest(pb_classes.Message):
    __PB2_CLASS__ = image_service_pb2.GetImageRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GetImageRequest",image_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class GetImageLatestByFamilyRequest(pb_classes.Message):
    __PB2_CLASS__ = image_service_pb2.GetImageLatestByFamilyRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GetImageLatestByFamilyRequest",image_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        image_family: "builtins.str|None" = None,
        parent_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if image_family is not None:
            self.image_family = image_family
        if parent_id is not None:
            self.parent_id = parent_id
    
    @property
    def image_family(self) -> "builtins.str":
        return super()._get_field("image_family", explicit_presence=False,
        )
    @image_family.setter
    def image_family(self, value: "builtins.str") -> None:
        return super()._set_field("image_family",value,explicit_presence=False,
        )
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
class ListImagesRequest(pb_classes.Message):
    __PB2_CLASS__ = image_service_pb2.ListImagesRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListImagesRequest",image_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value,explicit_presence=False,
        )
    
class ListImagesResponse(pb_classes.Message):
    __PB2_CLASS__ = image_service_pb2.ListImagesResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListImagesResponse",image_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[Image]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Image]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Image,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[Image]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    

class ImageServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.compute.v1.ImageService",image_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.compute.v1.ImageService"
    
    def get(self,
        request: "GetImageRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetImageRequest","Image"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=image_pb2.Image,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","Image"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=image_pb2.Image,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_latest_by_family(self,
        request: "GetImageLatestByFamilyRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetImageLatestByFamilyRequest","Image"]:
        return super().request(
            method="GetLatestByFamily",
            request=request,
            result_pb2_class=image_pb2.Image,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListImagesRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListImagesRequest","ListImagesResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=image_service_pb2.ListImagesResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list_operations_by_parent(self,
        request: "ListOperationsByParentRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListOperationsByParentRequest","v1_1.ListOperationsResponse"]:
        return super().request(
            method="ListOperationsByParent",
            request=request,
            result_pb2_class=operation_service_pb2_1.ListOperationsResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    

# file: nebius/compute/v1/network_interface.proto
class NetworkInterfaceSpec(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.NetworkInterfaceSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.NetworkInterfaceSpec",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        subnet_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
        ip_address: "IPAddress|network_interface_pb2.IPAddress|None" = None,
        public_ip_address: "PublicIPAddress|network_interface_pb2.PublicIPAddress|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if name is not None:
            self.name = name
        if ip_address is not None:
            self.ip_address = ip_address
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
    
    @property
    def subnet_id(self) -> "builtins.str":
        return super()._get_field("subnet_id", explicit_presence=False,
        )
    @subnet_id.setter
    def subnet_id(self, value: "builtins.str") -> None:
        return super()._set_field("subnet_id",value,explicit_presence=False,
        )
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False,
        )
    
    @property
    def ip_address(self) -> "IPAddress|None":
        return super()._get_field("ip_address", explicit_presence=True,
        wrap=IPAddress,
        )
    @ip_address.setter
    def ip_address(self, value: "IPAddress|network_interface_pb2.IPAddress|None") -> None:
        return super()._set_field("ip_address",value,explicit_presence=True,
        )
    
    @property
    def public_ip_address(self) -> "PublicIPAddress|None":
        return super()._get_field("public_ip_address", explicit_presence=True,
        wrap=PublicIPAddress,
        )
    @public_ip_address.setter
    def public_ip_address(self, value: "PublicIPAddress|network_interface_pb2.PublicIPAddress|None") -> None:
        return super()._set_field("public_ip_address",value,explicit_presence=True,
        )
    
class IPAddress(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.IPAddress
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.IPAddress",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        allocation_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if allocation_id is not None:
            self.allocation_id = allocation_id
    
    @property
    def allocation_id(self) -> "builtins.str":
        return super()._get_field("allocation_id", explicit_presence=False,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=False,
        )
    
class PublicIPAddress(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.PublicIPAddress
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.PublicIPAddress",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        allocation_id: "builtins.str|None" = None,
        static: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if allocation_id is not None:
            self.allocation_id = allocation_id
        if static is not None:
            self.static = static
    
    @property
    def allocation_id(self) -> "builtins.str|None":
        return super()._get_field("allocation_id", explicit_presence=True,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str|None") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=True,
        )
    
    @property
    def static(self) -> "builtins.bool":
        return super()._get_field("static", explicit_presence=False,
        )
    @static.setter
    def static(self, value: "builtins.bool") -> None:
        return super()._set_field("static",value,explicit_presence=False,
        )
    
class NetworkInterfaceStatus(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.NetworkInterfaceStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.NetworkInterfaceStatus",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        index: "builtins.int|None" = None,
        name: "builtins.str|None" = None,
        ip_address: "IPAddressStatus|network_interface_pb2.IPAddressStatus|None" = None,
        public_ip_address: "PublicIPAddressStatus|network_interface_pb2.PublicIPAddressStatus|None" = None,
        mac_address: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if ip_address is not None:
            self.ip_address = ip_address
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
        if mac_address is not None:
            self.mac_address = mac_address
    
    @property
    def index(self) -> "builtins.int":
        return super()._get_field("index", explicit_presence=False,
        )
    @index.setter
    def index(self, value: "builtins.int") -> None:
        return super()._set_field("index",value,explicit_presence=False,
        )
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False,
        )
    
    @property
    def ip_address(self) -> "IPAddressStatus":
        return super()._get_field("ip_address", explicit_presence=False,
        wrap=IPAddressStatus,
        )
    @ip_address.setter
    def ip_address(self, value: "IPAddressStatus|network_interface_pb2.IPAddressStatus") -> None:
        return super()._set_field("ip_address",value,explicit_presence=False,
        )
    
    @property
    def public_ip_address(self) -> "PublicIPAddressStatus":
        return super()._get_field("public_ip_address", explicit_presence=False,
        wrap=PublicIPAddressStatus,
        )
    @public_ip_address.setter
    def public_ip_address(self, value: "PublicIPAddressStatus|network_interface_pb2.PublicIPAddressStatus") -> None:
        return super()._set_field("public_ip_address",value,explicit_presence=False,
        )
    
    @property
    def mac_address(self) -> "builtins.str":
        return super()._get_field("mac_address", explicit_presence=False,
        )
    @mac_address.setter
    def mac_address(self, value: "builtins.str") -> None:
        return super()._set_field("mac_address",value,explicit_presence=False,
        )
    
class IPAddressStatus(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.IPAddressStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.IPAddressStatus",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        address: "builtins.str|None" = None,
        allocation_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if address is not None:
            self.address = address
        if allocation_id is not None:
            self.allocation_id = allocation_id
    
    @property
    def address(self) -> "builtins.str":
        return super()._get_field("address", explicit_presence=False,
        )
    @address.setter
    def address(self, value: "builtins.str") -> None:
        return super()._set_field("address",value,explicit_presence=False,
        )
    
    @property
    def allocation_id(self) -> "builtins.str":
        return super()._get_field("allocation_id", explicit_presence=False,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=False,
        )
    
class PublicIPAddressStatus(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.PublicIPAddressStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.PublicIPAddressStatus",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        address: "builtins.str|None" = None,
        allocation_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if address is not None:
            self.address = address
        if allocation_id is not None:
            self.allocation_id = allocation_id
    
    @property
    def address(self) -> "builtins.str":
        return super()._get_field("address", explicit_presence=False,
        )
    @address.setter
    def address(self, value: "builtins.str") -> None:
        return super()._set_field("address",value,explicit_presence=False,
        )
    
    @property
    def allocation_id(self) -> "builtins.str":
        return super()._get_field("allocation_id", explicit_presence=False,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=False,
        )
    
# file: nebius/compute/v1/instance.proto
class InstanceRecoveryPolicy(pb_enum.Enum):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.InstanceRecoveryPolicy",instance_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    RECOVER = 0
    FAIL = 1

class Instance(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.Instance
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.Instance",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "InstanceSpec|instance_pb2.InstanceSpec|None" = None,
        status: "InstanceStatus|instance_pb2.InstanceStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "InstanceSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=InstanceSpec,
        )
    @spec.setter
    def spec(self, value: "InstanceSpec|instance_pb2.InstanceSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "InstanceStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=InstanceStatus,
        )
    @status.setter
    def status(self, value: "InstanceStatus|instance_pb2.InstanceStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class InstanceSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.InstanceSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.InstanceSpec",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        service_account_id: "builtins.str|None" = None,
        resources: "ResourcesSpec|instance_pb2.ResourcesSpec|None" = None,
        gpu_cluster: "InstanceGpuClusterSpec|instance_pb2.InstanceGpuClusterSpec|None" = None,
        network_interfaces: "abc.Iterable[NetworkInterfaceSpec]|None" = None,
        boot_disk: "AttachedDiskSpec|instance_pb2.AttachedDiskSpec|None" = None,
        secondary_disks: "abc.Iterable[AttachedDiskSpec]|None" = None,
        filesystems: "abc.Iterable[AttachedFilesystemSpec]|None" = None,
        cloud_init_user_data: "builtins.str|None" = None,
        stopped: "builtins.bool|None" = None,
        recovery_policy: "InstanceRecoveryPolicy|instance_pb2.InstanceRecoveryPolicy|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if service_account_id is not None:
            self.service_account_id = service_account_id
        if resources is not None:
            self.resources = resources
        if gpu_cluster is not None:
            self.gpu_cluster = gpu_cluster
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if boot_disk is not None:
            self.boot_disk = boot_disk
        if secondary_disks is not None:
            self.secondary_disks = secondary_disks
        if filesystems is not None:
            self.filesystems = filesystems
        if cloud_init_user_data is not None:
            self.cloud_init_user_data = cloud_init_user_data
        if stopped is not None:
            self.stopped = stopped
        if recovery_policy is not None:
            self.recovery_policy = recovery_policy
    
    @property
    def service_account_id(self) -> "builtins.str":
        return super()._get_field("service_account_id", explicit_presence=False,
        )
    @service_account_id.setter
    def service_account_id(self, value: "builtins.str") -> None:
        return super()._set_field("service_account_id",value,explicit_presence=False,
        )
    
    @property
    def resources(self) -> "ResourcesSpec":
        return super()._get_field("resources", explicit_presence=False,
        wrap=ResourcesSpec,
        )
    @resources.setter
    def resources(self, value: "ResourcesSpec|instance_pb2.ResourcesSpec") -> None:
        return super()._set_field("resources",value,explicit_presence=False,
        )
    
    @property
    def gpu_cluster(self) -> "InstanceGpuClusterSpec":
        return super()._get_field("gpu_cluster", explicit_presence=False,
        wrap=InstanceGpuClusterSpec,
        )
    @gpu_cluster.setter
    def gpu_cluster(self, value: "InstanceGpuClusterSpec|instance_pb2.InstanceGpuClusterSpec") -> None:
        return super()._set_field("gpu_cluster",value,explicit_presence=False,
        )
    
    @property
    def network_interfaces(self) -> "abc.MutableSequence[NetworkInterfaceSpec]":
        return super()._get_field("network_interfaces", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(NetworkInterfaceSpec,None),
        )
    @network_interfaces.setter
    def network_interfaces(self, value: "abc.Iterable[NetworkInterfaceSpec]") -> None:
        return super()._set_field("network_interfaces",value,explicit_presence=False,
        )
    
    @property
    def boot_disk(self) -> "AttachedDiskSpec":
        return super()._get_field("boot_disk", explicit_presence=False,
        wrap=AttachedDiskSpec,
        )
    @boot_disk.setter
    def boot_disk(self, value: "AttachedDiskSpec|instance_pb2.AttachedDiskSpec") -> None:
        return super()._set_field("boot_disk",value,explicit_presence=False,
        )
    
    @property
    def secondary_disks(self) -> "abc.MutableSequence[AttachedDiskSpec]":
        return super()._get_field("secondary_disks", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(AttachedDiskSpec,None),
        )
    @secondary_disks.setter
    def secondary_disks(self, value: "abc.Iterable[AttachedDiskSpec]") -> None:
        return super()._set_field("secondary_disks",value,explicit_presence=False,
        )
    
    @property
    def filesystems(self) -> "abc.MutableSequence[AttachedFilesystemSpec]":
        return super()._get_field("filesystems", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(AttachedFilesystemSpec,None),
        )
    @filesystems.setter
    def filesystems(self, value: "abc.Iterable[AttachedFilesystemSpec]") -> None:
        return super()._set_field("filesystems",value,explicit_presence=False,
        )
    
    @property
    def cloud_init_user_data(self) -> "builtins.str":
        return super()._get_field("cloud_init_user_data", explicit_presence=False,
        )
    @cloud_init_user_data.setter
    def cloud_init_user_data(self, value: "builtins.str") -> None:
        return super()._set_field("cloud_init_user_data",value,explicit_presence=False,
        )
    
    @property
    def stopped(self) -> "builtins.bool":
        return super()._get_field("stopped", explicit_presence=False,
        )
    @stopped.setter
    def stopped(self, value: "builtins.bool") -> None:
        return super()._set_field("stopped",value,explicit_presence=False,
        )
    
    @property
    def recovery_policy(self) -> "InstanceRecoveryPolicy":
        return super()._get_field("recovery_policy", explicit_presence=False,
        wrap=InstanceRecoveryPolicy,
        )
    @recovery_policy.setter
    def recovery_policy(self, value: "InstanceRecoveryPolicy|instance_pb2.InstanceRecoveryPolicy") -> None:
        return super()._set_field("recovery_policy",value,explicit_presence=False,
        )
    
class ResourcesSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.ResourcesSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ResourcesSpec",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        platform: "builtins.str|None" = None,
        preset: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if platform is not None:
            self.platform = platform
        if preset is not None:
            self.preset = preset
    
    @property
    def platform(self) -> "builtins.str":
        return super()._get_field("platform", explicit_presence=False,
        )
    @platform.setter
    def platform(self, value: "builtins.str") -> None:
        return super()._set_field("platform",value,explicit_presence=False,
        )
    
    @property
    def preset(self) -> "builtins.str|None":
        return super()._get_field("preset", explicit_presence=True,
        )
    @preset.setter
    def preset(self, value: "builtins.str|None") -> None:
        return super()._set_field("preset",value,explicit_presence=True,
        )
    
class InstanceGpuClusterSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.InstanceGpuClusterSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.InstanceGpuClusterSpec",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class AttachedDiskSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.AttachedDiskSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.AttachedDiskSpec",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class AttachMode(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.AttachedDiskSpec.AttachMode",instance_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        READ_ONLY = 1
        READ_WRITE = 2
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        attach_mode: "AttachedDiskSpec.AttachMode|instance_pb2.AttachedDiskSpec.AttachMode|None" = None,
        existing_disk: "ExistingDisk|instance_pb2.ExistingDisk|None" = None,
        device_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if attach_mode is not None:
            self.attach_mode = attach_mode
        if existing_disk is not None:
            self.existing_disk = existing_disk
        if device_id is not None:
            self.device_id = device_id
    
    @property
    def attach_mode(self) -> "AttachedDiskSpec.AttachMode":
        return super()._get_field("attach_mode", explicit_presence=False,
        wrap=AttachedDiskSpec.AttachMode,
        )
    @attach_mode.setter
    def attach_mode(self, value: "AttachedDiskSpec.AttachMode|instance_pb2.AttachedDiskSpec.AttachMode") -> None:
        return super()._set_field("attach_mode",value,explicit_presence=False,
        )
    
    @property
    def existing_disk(self) -> "ExistingDisk":
        return super()._get_field("existing_disk", explicit_presence=False,
        wrap=ExistingDisk,
        )
    @existing_disk.setter
    def existing_disk(self, value: "ExistingDisk|instance_pb2.ExistingDisk") -> None:
        return super()._set_field("existing_disk",value,explicit_presence=False,
        )
    
    @property
    def device_id(self) -> "builtins.str":
        return super()._get_field("device_id", explicit_presence=False,
        )
    @device_id.setter
    def device_id(self, value: "builtins.str") -> None:
        return super()._set_field("device_id",value,explicit_presence=False,
        )
    
class ExistingDisk(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.ExistingDisk
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ExistingDisk",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ExistingFilesystem(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.ExistingFilesystem
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ExistingFilesystem",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class AttachedFilesystemSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.AttachedFilesystemSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.AttachedFilesystemSpec",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class AttachMode(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.AttachedFilesystemSpec.AttachMode",instance_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        READ_ONLY = 1
        READ_WRITE = 2
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        attach_mode: "AttachedFilesystemSpec.AttachMode|instance_pb2.AttachedFilesystemSpec.AttachMode|None" = None,
        mount_tag: "builtins.str|None" = None,
        existing_filesystem: "ExistingFilesystem|instance_pb2.ExistingFilesystem|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if attach_mode is not None:
            self.attach_mode = attach_mode
        if mount_tag is not None:
            self.mount_tag = mount_tag
        if existing_filesystem is not None:
            self.existing_filesystem = existing_filesystem
    
    @property
    def attach_mode(self) -> "AttachedFilesystemSpec.AttachMode":
        return super()._get_field("attach_mode", explicit_presence=False,
        wrap=AttachedFilesystemSpec.AttachMode,
        )
    @attach_mode.setter
    def attach_mode(self, value: "AttachedFilesystemSpec.AttachMode|instance_pb2.AttachedFilesystemSpec.AttachMode") -> None:
        return super()._set_field("attach_mode",value,explicit_presence=False,
        )
    
    @property
    def mount_tag(self) -> "builtins.str":
        return super()._get_field("mount_tag", explicit_presence=False,
        )
    @mount_tag.setter
    def mount_tag(self, value: "builtins.str") -> None:
        return super()._set_field("mount_tag",value,explicit_presence=False,
        )
    
    @property
    def existing_filesystem(self) -> "ExistingFilesystem":
        return super()._get_field("existing_filesystem", explicit_presence=False,
        wrap=ExistingFilesystem,
        )
    @existing_filesystem.setter
    def existing_filesystem(self, value: "ExistingFilesystem|instance_pb2.ExistingFilesystem") -> None:
        return super()._set_field("existing_filesystem",value,explicit_presence=False,
        )
    
class InstanceStatus(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.InstanceStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.InstanceStatus",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class InstanceState(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.compute.v1.InstanceStatus.InstanceState",instance_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        CREATING = 1
        UPDATING = 2
        STARTING = 3
        RUNNING = 4
        STOPPING = 5
        STOPPED = 6
        DELETING = 7
        ERROR = 8
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        state: "InstanceStatus.InstanceState|instance_pb2.InstanceStatus.InstanceState|None" = None,
        network_interfaces: "abc.Iterable[NetworkInterfaceStatus]|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if state is not None:
            self.state = state
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def state(self) -> "InstanceStatus.InstanceState":
        return super()._get_field("state", explicit_presence=False,
        wrap=InstanceStatus.InstanceState,
        )
    @state.setter
    def state(self, value: "InstanceStatus.InstanceState|instance_pb2.InstanceStatus.InstanceState") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def network_interfaces(self) -> "abc.MutableSequence[NetworkInterfaceStatus]":
        return super()._get_field("network_interfaces", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(NetworkInterfaceStatus,None),
        )
    @network_interfaces.setter
    def network_interfaces(self, value: "abc.Iterable[NetworkInterfaceStatus]") -> None:
        return super()._set_field("network_interfaces",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
# file: nebius/compute/v1/instance_service.proto
class GetInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.GetInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.GetInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListInstancesRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.ListInstancesRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListInstancesRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
class CreateInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.CreateInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.CreateInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "InstanceSpec|instance_pb2.InstanceSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "InstanceSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=InstanceSpec,
        )
    @spec.setter
    def spec(self, value: "InstanceSpec|instance_pb2.InstanceSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class UpdateInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.UpdateInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.UpdateInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "InstanceSpec|instance_pb2.InstanceSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "InstanceSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=InstanceSpec,
        )
    @spec.setter
    def spec(self, value: "InstanceSpec|instance_pb2.InstanceSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.DeleteInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.DeleteInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListInstancesResponse(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.ListInstancesResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.ListInstancesResponse",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[Instance]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Instance]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Instance,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[Instance]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    
class StartInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.StartInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.StartInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class StopInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.StopInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.compute.v1.StopInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    

class InstanceServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.compute.v1.InstanceService",instance_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.compute.v1.InstanceService"
    __operation_type__ = v1_1.Operation
    
    def get(self,
        request: "GetInstanceRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetInstanceRequest","Instance"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=instance_pb2.Instance,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","Instance"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=instance_pb2.Instance,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListInstancesRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListInstancesRequest","ListInstancesResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=instance_service_pb2.ListInstancesResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateInstanceRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateInstanceRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteInstanceRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def start(self,
        request: "StartInstanceRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["StartInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Start",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def stop(self,
        request: "StopInstanceRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["StopInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Stop",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def list_operations_by_parent(self,
        request: "ListOperationsByParentRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListOperationsByParentRequest","v1_1.ListOperationsResponse"]:
        return super().request(
            method="ListOperationsByParent",
            request=request,
            result_pb2_class=operation_service_pb2_1.ListOperationsResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    

__all__ = [
    #@ local import names here @#
    "Disk",
    "DiskSpec",
    "SourceImageFamily",
    "DiskPlacementPolicy",
    "DiskStatus",
    "ListOperationsByParentRequest",
    "GetDiskRequest",
    "ListDisksRequest",
    "CreateDiskRequest",
    "UpdateDiskRequest",
    "DeleteDiskRequest",
    "ListDisksResponse",
    "DiskServiceClient",
    "Filesystem",
    "FilesystemSpec",
    "FilesystemStatus",
    "GetFilesystemRequest",
    "ListFilesystemsRequest",
    "CreateFilesystemRequest",
    "UpdateFilesystemRequest",
    "DeleteFilesystemRequest",
    "ListFilesystemsResponse",
    "FilesystemServiceClient",
    "GpuCluster",
    "GpuClusterSpec",
    "GpuClusterStatus",
    "GetGpuClusterRequest",
    "ListGpuClustersRequest",
    "CreateGpuClusterRequest",
    "UpdateGpuClusterRequest",
    "DeleteGpuClusterRequest",
    "ListGpuClustersResponse",
    "GpuClusterServiceClient",
    "Image",
    "ImageSpec",
    "ImageStatus",
    "GetImageRequest",
    "GetImageLatestByFamilyRequest",
    "ListImagesRequest",
    "ListImagesResponse",
    "ImageServiceClient",
    "NetworkInterfaceSpec",
    "IPAddress",
    "PublicIPAddress",
    "NetworkInterfaceStatus",
    "IPAddressStatus",
    "PublicIPAddressStatus",
    "InstanceRecoveryPolicy",
    "Instance",
    "InstanceSpec",
    "ResourcesSpec",
    "InstanceGpuClusterSpec",
    "AttachedDiskSpec",
    "ExistingDisk",
    "ExistingFilesystem",
    "AttachedFilesystemSpec",
    "InstanceStatus",
    "GetInstanceRequest",
    "ListInstancesRequest",
    "CreateInstanceRequest",
    "UpdateInstanceRequest",
    "DeleteInstanceRequest",
    "ListInstancesResponse",
    "StartInstanceRequest",
    "StopInstanceRequest",
    "InstanceServiceClient",
]
