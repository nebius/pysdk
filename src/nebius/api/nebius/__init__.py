# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message
import nebius.api.nebius.annotations_pb2 as annotations_pb2
import google.protobuf.message as message_1
import collections.abc as abc
import builtins as builtins

# file: nebius/annotations.proto
class RegionRouting(message.Message):
    _PB2_CLASS_ = annotations_pb2.RegionRouting
    _pb2_base_: annotations_pb2.RegionRouting
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        nid: "abc.MutableSequence[builtins.str]|None" = None,
        disabled: "builtins.bool|None" = None,
        strict: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if nid is not None:
            self.nid = nid
        if disabled is not None:
            self.disabled = disabled
        if strict is not None:
            self.strict = strict
    
    @property
    def nid(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("nid", base=self._pb2_base_, explicit_presence=False,
        )
    @nid.setter
    def nid(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("nid",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def disabled(self) -> "builtins.bool":
        return super()._get_field("disabled", base=self._pb2_base_, explicit_presence=False,
        )
    @disabled.setter
    def disabled(self, value: "builtins.bool") -> None:
        return super()._set_field("disabled",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def strict(self) -> "builtins.bool":
        return super()._get_field("strict", base=self._pb2_base_, explicit_presence=False,
        )
    @strict.setter
    def strict(self, value: "builtins.bool") -> None:
        return super()._set_field("strict",value, base=self._pb2_base_,explicit_presence=False)
    
