# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_classes as pb_classes
import nebius.api.nebius.mk8s.v1.cluster_pb2 as cluster_pb2
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_1
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import builtins as builtins
import collections.abc as abc
import nebius.base.protos.pb_enum as pb_enum
import nebius.api.nebius.mk8s.v1.cluster_service_pb2 as cluster_service_pb2
import nebius.aio.client as client
import typing as typing
import grpc as grpc
import nebius.aio.request as request_1
import nebius.aio.operation as operation
import nebius.api.nebius.common.v1.operation_pb2 as operation_pb2
import nebius.api.nebius.mk8s.v1.instance_template_pb2 as instance_template_pb2
import nebius.api.nebius.mk8s.v1.node_group_pb2 as node_group_pb2
import google.protobuf.duration_pb2 as duration_pb2
import datetime as datetime
import nebius.base.protos.well_known as well_known
import nebius.api.nebius.mk8s.v1.node_group_service_pb2 as node_group_service_pb2
import google.protobuf.empty_pb2 as empty_pb2
#@ local imports here @#

# file: nebius/mk8s/v1/cluster.proto
class Cluster(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.Cluster
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.Cluster",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
        status: "ClusterStatus|cluster_pb2.ClusterStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "ClusterStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=ClusterStatus,
        )
    @status.setter
    def status(self, value: "ClusterStatus|cluster_pb2.ClusterStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class ClusterSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ClusterSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ClusterSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        control_plane: "ControlPlaneSpec|cluster_pb2.ControlPlaneSpec|None" = None,
        kube_network: "KubeNetworkSpec|cluster_pb2.KubeNetworkSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if control_plane is not None:
            self.control_plane = control_plane
        if kube_network is not None:
            self.kube_network = kube_network
    
    @property
    def control_plane(self) -> "ControlPlaneSpec":
        return super()._get_field("control_plane", explicit_presence=False,
        wrap=ControlPlaneSpec,
        )
    @control_plane.setter
    def control_plane(self, value: "ControlPlaneSpec|cluster_pb2.ControlPlaneSpec") -> None:
        return super()._set_field("control_plane",value,explicit_presence=False,
        )
    
    @property
    def kube_network(self) -> "KubeNetworkSpec":
        return super()._get_field("kube_network", explicit_presence=False,
        wrap=KubeNetworkSpec,
        )
    @kube_network.setter
    def kube_network(self, value: "KubeNetworkSpec|cluster_pb2.KubeNetworkSpec") -> None:
        return super()._set_field("kube_network",value,explicit_presence=False,
        )
    
class ControlPlaneSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ControlPlaneSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ControlPlaneSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        version: "builtins.str|None" = None,
        subnet_id: "builtins.str|None" = None,
        endpoints: "ControlPlaneEndpointsSpec|cluster_pb2.ControlPlaneEndpointsSpec|None" = None,
        etcd_cluster_size: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if version is not None:
            self.version = version
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if endpoints is not None:
            self.endpoints = endpoints
        if etcd_cluster_size is not None:
            self.etcd_cluster_size = etcd_cluster_size
    
    @property
    def version(self) -> "builtins.str":
        return super()._get_field("version", explicit_presence=False,
        )
    @version.setter
    def version(self, value: "builtins.str") -> None:
        return super()._set_field("version",value,explicit_presence=False,
        )
    
    @property
    def subnet_id(self) -> "builtins.str":
        return super()._get_field("subnet_id", explicit_presence=False,
        )
    @subnet_id.setter
    def subnet_id(self, value: "builtins.str") -> None:
        return super()._set_field("subnet_id",value,explicit_presence=False,
        )
    
    @property
    def endpoints(self) -> "ControlPlaneEndpointsSpec":
        return super()._get_field("endpoints", explicit_presence=False,
        wrap=ControlPlaneEndpointsSpec,
        )
    @endpoints.setter
    def endpoints(self, value: "ControlPlaneEndpointsSpec|cluster_pb2.ControlPlaneEndpointsSpec") -> None:
        return super()._set_field("endpoints",value,explicit_presence=False,
        )
    
    @property
    def etcd_cluster_size(self) -> "builtins.int":
        return super()._get_field("etcd_cluster_size", explicit_presence=False,
        )
    @etcd_cluster_size.setter
    def etcd_cluster_size(self, value: "builtins.int") -> None:
        return super()._set_field("etcd_cluster_size",value,explicit_presence=False,
        )
    
class ControlPlaneEndpointsSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ControlPlaneEndpointsSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ControlPlaneEndpointsSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        public_endpoint: "PublicEndpointSpec|cluster_pb2.PublicEndpointSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if public_endpoint is not None:
            self.public_endpoint = public_endpoint
    
    @property
    def public_endpoint(self) -> "PublicEndpointSpec|None":
        return super()._get_field("public_endpoint", explicit_presence=True,
        wrap=PublicEndpointSpec,
        )
    @public_endpoint.setter
    def public_endpoint(self, value: "PublicEndpointSpec|cluster_pb2.PublicEndpointSpec|None") -> None:
        return super()._set_field("public_endpoint",value,explicit_presence=True,
        )
    
class PublicEndpointSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.PublicEndpointSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.PublicEndpointSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
    ) -> None:
        super().__init__(initial_message)
    
class KubeNetworkSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.KubeNetworkSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.KubeNetworkSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        service_cidrs: "abc.Iterable[builtins.str]|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if service_cidrs is not None:
            self.service_cidrs = service_cidrs
    
    @property
    def service_cidrs(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("service_cidrs", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @service_cidrs.setter
    def service_cidrs(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("service_cidrs",value,explicit_presence=False,
        )
    
class ClusterStatus(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ClusterStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ClusterStatus",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class State(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.mk8s.v1.ClusterStatus.State",cluster_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATE_UNSPECIFIED = 0
        PROVISIONING = 1
        RUNNING = 2
        DELETING = 3
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        state: "ClusterStatus.State|cluster_pb2.ClusterStatus.State|None" = None,
        control_plane: "ControlPlaneStatus|cluster_pb2.ControlPlaneStatus|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if state is not None:
            self.state = state
        if control_plane is not None:
            self.control_plane = control_plane
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def state(self) -> "ClusterStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=ClusterStatus.State,
        )
    @state.setter
    def state(self, value: "ClusterStatus.State|cluster_pb2.ClusterStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def control_plane(self) -> "ControlPlaneStatus":
        return super()._get_field("control_plane", explicit_presence=False,
        wrap=ControlPlaneStatus,
        )
    @control_plane.setter
    def control_plane(self, value: "ControlPlaneStatus|cluster_pb2.ControlPlaneStatus") -> None:
        return super()._set_field("control_plane",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
class ControlPlaneStatus(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ControlPlaneStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ControlPlaneStatus",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        version: "builtins.str|None" = None,
        endpoints: "ControlPlaneStatusEndpoints|cluster_pb2.ControlPlaneStatusEndpoints|None" = None,
        auth: "ControlPlaneStatusAuth|cluster_pb2.ControlPlaneStatusAuth|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if version is not None:
            self.version = version
        if endpoints is not None:
            self.endpoints = endpoints
        if auth is not None:
            self.auth = auth
    
    @property
    def version(self) -> "builtins.str":
        return super()._get_field("version", explicit_presence=False,
        )
    @version.setter
    def version(self, value: "builtins.str") -> None:
        return super()._set_field("version",value,explicit_presence=False,
        )
    
    @property
    def endpoints(self) -> "ControlPlaneStatusEndpoints":
        return super()._get_field("endpoints", explicit_presence=False,
        wrap=ControlPlaneStatusEndpoints,
        )
    @endpoints.setter
    def endpoints(self, value: "ControlPlaneStatusEndpoints|cluster_pb2.ControlPlaneStatusEndpoints") -> None:
        return super()._set_field("endpoints",value,explicit_presence=False,
        )
    
    @property
    def auth(self) -> "ControlPlaneStatusAuth":
        return super()._get_field("auth", explicit_presence=False,
        wrap=ControlPlaneStatusAuth,
        )
    @auth.setter
    def auth(self, value: "ControlPlaneStatusAuth|cluster_pb2.ControlPlaneStatusAuth") -> None:
        return super()._set_field("auth",value,explicit_presence=False,
        )
    
class ControlPlaneStatusEndpoints(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ControlPlaneStatusEndpoints
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ControlPlaneStatusEndpoints",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        public_endpoint: "builtins.str|None" = None,
        private_endpoint: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if public_endpoint is not None:
            self.public_endpoint = public_endpoint
        if private_endpoint is not None:
            self.private_endpoint = private_endpoint
    
    @property
    def public_endpoint(self) -> "builtins.str":
        return super()._get_field("public_endpoint", explicit_presence=False,
        )
    @public_endpoint.setter
    def public_endpoint(self, value: "builtins.str") -> None:
        return super()._set_field("public_endpoint",value,explicit_presence=False,
        )
    
    @property
    def private_endpoint(self) -> "builtins.str":
        return super()._get_field("private_endpoint", explicit_presence=False,
        )
    @private_endpoint.setter
    def private_endpoint(self, value: "builtins.str") -> None:
        return super()._set_field("private_endpoint",value,explicit_presence=False,
        )
    
class ControlPlaneStatusAuth(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ControlPlaneStatusAuth
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ControlPlaneStatusAuth",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        cluster_ca_certificate: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if cluster_ca_certificate is not None:
            self.cluster_ca_certificate = cluster_ca_certificate
    
    @property
    def cluster_ca_certificate(self) -> "builtins.str":
        return super()._get_field("cluster_ca_certificate", explicit_presence=False,
        )
    @cluster_ca_certificate.setter
    def cluster_ca_certificate(self, value: "builtins.str") -> None:
        return super()._set_field("cluster_ca_certificate",value,explicit_presence=False,
        )
    
# file: nebius/mk8s/v1/cluster_service.proto
class CreateClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.CreateClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.CreateClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class GetClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.GetClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.GetClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        resource_version: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
        if resource_version is not None:
            self.resource_version = resource_version
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
    @property
    def resource_version(self) -> "builtins.str":
        return super()._get_field("resource_version", explicit_presence=False,
        )
    @resource_version.setter
    def resource_version(self, value: "builtins.str") -> None:
        return super()._set_field("resource_version",value,explicit_presence=False,
        )
    
class ListClustersRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.ListClustersRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ListClustersRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
class ListClustersResponse(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.ListClustersResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ListClustersResponse",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[Cluster]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Cluster]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Cluster,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[Cluster]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    
class UpdateClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.UpdateClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.UpdateClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.DeleteClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.DeleteClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    

class ClusterServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.mk8s.v1.ClusterService",cluster_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.mk8s.v1.ClusterService"
    __operation_type__ = v1_1.Operation
    
    def get(self,
        request: "GetClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetClusterRequest","Cluster"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=cluster_pb2.Cluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","Cluster"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=cluster_pb2.Cluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListClustersRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListClustersRequest","ListClustersResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=cluster_service_pb2.ListClustersResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateClusterRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateClusterRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteClusterRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    

# file: nebius/mk8s/v1/instance_template.proto
class DiskSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_template_pb2.DiskSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.DiskSpec",instance_template_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class DiskType(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.mk8s.v1.DiskSpec.DiskType",instance_template_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        NETWORK_SSD = 1
        NETWORK_HDD = 2
        NETWORK_SSD_IO_M3 = 3
        NETWORK_SSD_NON_REPLICATED = 4
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        size_bytes: "builtins.int|None" = None,
        size_kibibytes: "builtins.int|None" = None,
        size_mebibytes: "builtins.int|None" = None,
        size_gibibytes: "builtins.int|None" = None,
        block_size_bytes: "builtins.int|None" = None,
        type: "DiskSpec.DiskType|instance_template_pb2.DiskSpec.DiskType|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if size_kibibytes is not None:
            self.size_kibibytes = size_kibibytes
        if size_mebibytes is not None:
            self.size_mebibytes = size_mebibytes
        if size_gibibytes is not None:
            self.size_gibibytes = size_gibibytes
        if block_size_bytes is not None:
            self.block_size_bytes = block_size_bytes
        if type is not None:
            self.type = type
    
    @property
    def size_bytes(self) -> "builtins.int|None":
        return super()._get_field("size_bytes", explicit_presence=True,
        )
    @size_bytes.setter
    def size_bytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_bytes",value,explicit_presence=True,
        )
    
    @property
    def size_kibibytes(self) -> "builtins.int|None":
        return super()._get_field("size_kibibytes", explicit_presence=True,
        )
    @size_kibibytes.setter
    def size_kibibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_kibibytes",value,explicit_presence=True,
        )
    
    @property
    def size_mebibytes(self) -> "builtins.int|None":
        return super()._get_field("size_mebibytes", explicit_presence=True,
        )
    @size_mebibytes.setter
    def size_mebibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_mebibytes",value,explicit_presence=True,
        )
    
    @property
    def size_gibibytes(self) -> "builtins.int|None":
        return super()._get_field("size_gibibytes", explicit_presence=True,
        )
    @size_gibibytes.setter
    def size_gibibytes(self, value: "builtins.int|None") -> None:
        return super()._set_field("size_gibibytes",value,explicit_presence=True,
        )
    
    @property
    def block_size_bytes(self) -> "builtins.int":
        return super()._get_field("block_size_bytes", explicit_presence=False,
        )
    @block_size_bytes.setter
    def block_size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("block_size_bytes",value,explicit_presence=False,
        )
    
    @property
    def type(self) -> "DiskSpec.DiskType":
        return super()._get_field("type", explicit_presence=False,
        wrap=DiskSpec.DiskType,
        )
    @type.setter
    def type(self, value: "DiskSpec.DiskType|instance_template_pb2.DiskSpec.DiskType") -> None:
        return super()._set_field("type",value,explicit_presence=False,
        )
    
class ResourcesSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_template_pb2.ResourcesSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ResourcesSpec",instance_template_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        platform: "builtins.str|None" = None,
        preset: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if platform is not None:
            self.platform = platform
        if preset is not None:
            self.preset = preset
    
    @property
    def platform(self) -> "builtins.str":
        return super()._get_field("platform", explicit_presence=False,
        )
    @platform.setter
    def platform(self, value: "builtins.str") -> None:
        return super()._set_field("platform",value,explicit_presence=False,
        )
    
    @property
    def preset(self) -> "builtins.str|None":
        return super()._get_field("preset", explicit_presence=True,
        )
    @preset.setter
    def preset(self, value: "builtins.str|None") -> None:
        return super()._set_field("preset",value,explicit_presence=True,
        )
    
# file: nebius/mk8s/v1/node_group.proto
class NodeGroup(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeGroup
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeGroup",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "NodeGroupSpec|node_group_pb2.NodeGroupSpec|None" = None,
        status: "NodeGroupStatus|node_group_pb2.NodeGroupStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "NodeGroupSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=NodeGroupSpec,
        )
    @spec.setter
    def spec(self, value: "NodeGroupSpec|node_group_pb2.NodeGroupSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "NodeGroupStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=NodeGroupStatus,
        )
    @status.setter
    def status(self, value: "NodeGroupStatus|node_group_pb2.NodeGroupStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class NodeGroupSpec(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeGroupSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeGroupSpec",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        version: "builtins.str|None" = None,
        fixed_node_count: "builtins.int|None" = None,
        autoscaling: "NodeGroupAutoscalingSpec|node_group_pb2.NodeGroupAutoscalingSpec|None" = None,
        template: "NodeTemplate|node_group_pb2.NodeTemplate|None" = None,
        strategy: "NodeGroupDeploymentStrategy|node_group_pb2.NodeGroupDeploymentStrategy|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if version is not None:
            self.version = version
        if fixed_node_count is not None:
            self.fixed_node_count = fixed_node_count
        if autoscaling is not None:
            self.autoscaling = autoscaling
        if template is not None:
            self.template = template
        if strategy is not None:
            self.strategy = strategy
    
    @property
    def version(self) -> "builtins.str":
        return super()._get_field("version", explicit_presence=False,
        )
    @version.setter
    def version(self, value: "builtins.str") -> None:
        return super()._set_field("version",value,explicit_presence=False,
        )
    
    @property
    def fixed_node_count(self) -> "builtins.int|None":
        return super()._get_field("fixed_node_count", explicit_presence=True,
        )
    @fixed_node_count.setter
    def fixed_node_count(self, value: "builtins.int|None") -> None:
        return super()._set_field("fixed_node_count",value,explicit_presence=True,
        )
    
    @property
    def autoscaling(self) -> "NodeGroupAutoscalingSpec":
        return super()._get_field("autoscaling", explicit_presence=False,
        wrap=NodeGroupAutoscalingSpec,
        )
    @autoscaling.setter
    def autoscaling(self, value: "NodeGroupAutoscalingSpec|node_group_pb2.NodeGroupAutoscalingSpec") -> None:
        return super()._set_field("autoscaling",value,explicit_presence=False,
        )
    
    @property
    def template(self) -> "NodeTemplate":
        return super()._get_field("template", explicit_presence=False,
        wrap=NodeTemplate,
        )
    @template.setter
    def template(self, value: "NodeTemplate|node_group_pb2.NodeTemplate") -> None:
        return super()._set_field("template",value,explicit_presence=False,
        )
    
    @property
    def strategy(self) -> "NodeGroupDeploymentStrategy":
        return super()._get_field("strategy", explicit_presence=False,
        wrap=NodeGroupDeploymentStrategy,
        )
    @strategy.setter
    def strategy(self, value: "NodeGroupDeploymentStrategy|node_group_pb2.NodeGroupDeploymentStrategy") -> None:
        return super()._set_field("strategy",value,explicit_presence=False,
        )
    
class NodeTemplate(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeTemplate
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeTemplate",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "NodeMetadataTemplate|node_group_pb2.NodeMetadataTemplate|None" = None,
        taints: "abc.Iterable[NodeTaint]|None" = None,
        resources: "ResourcesSpec|instance_template_pb2.ResourcesSpec|None" = None,
        boot_disk: "DiskSpec|instance_template_pb2.DiskSpec|None" = None,
        gpu_cluster: "GpuClusterSpec|node_group_pb2.GpuClusterSpec|None" = None,
        network_interfaces: "abc.Iterable[NetworkInterfaceTemplate]|None" = None,
        filesystems: "abc.Iterable[AttachedFilesystemSpec]|None" = None,
        cloud_init_user_data: "builtins.str|None" = None,
        service_account_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if taints is not None:
            self.taints = taints
        if resources is not None:
            self.resources = resources
        if boot_disk is not None:
            self.boot_disk = boot_disk
        if gpu_cluster is not None:
            self.gpu_cluster = gpu_cluster
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if filesystems is not None:
            self.filesystems = filesystems
        if cloud_init_user_data is not None:
            self.cloud_init_user_data = cloud_init_user_data
        if service_account_id is not None:
            self.service_account_id = service_account_id
    
    @property
    def metadata(self) -> "NodeMetadataTemplate":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=NodeMetadataTemplate,
        )
    @metadata.setter
    def metadata(self, value: "NodeMetadataTemplate|node_group_pb2.NodeMetadataTemplate") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def taints(self) -> "abc.MutableSequence[NodeTaint]":
        return super()._get_field("taints", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(NodeTaint,None),
        )
    @taints.setter
    def taints(self, value: "abc.Iterable[NodeTaint]") -> None:
        return super()._set_field("taints",value,explicit_presence=False,
        )
    
    @property
    def resources(self) -> "ResourcesSpec":
        return super()._get_field("resources", explicit_presence=False,
        wrap=ResourcesSpec,
        )
    @resources.setter
    def resources(self, value: "ResourcesSpec|instance_template_pb2.ResourcesSpec") -> None:
        return super()._set_field("resources",value,explicit_presence=False,
        )
    
    @property
    def boot_disk(self) -> "DiskSpec":
        return super()._get_field("boot_disk", explicit_presence=False,
        wrap=DiskSpec,
        )
    @boot_disk.setter
    def boot_disk(self, value: "DiskSpec|instance_template_pb2.DiskSpec") -> None:
        return super()._set_field("boot_disk",value,explicit_presence=False,
        )
    
    @property
    def gpu_cluster(self) -> "GpuClusterSpec":
        return super()._get_field("gpu_cluster", explicit_presence=False,
        wrap=GpuClusterSpec,
        )
    @gpu_cluster.setter
    def gpu_cluster(self, value: "GpuClusterSpec|node_group_pb2.GpuClusterSpec") -> None:
        return super()._set_field("gpu_cluster",value,explicit_presence=False,
        )
    
    @property
    def network_interfaces(self) -> "abc.MutableSequence[NetworkInterfaceTemplate]":
        return super()._get_field("network_interfaces", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(NetworkInterfaceTemplate,None),
        )
    @network_interfaces.setter
    def network_interfaces(self, value: "abc.Iterable[NetworkInterfaceTemplate]") -> None:
        return super()._set_field("network_interfaces",value,explicit_presence=False,
        )
    
    @property
    def filesystems(self) -> "abc.MutableSequence[AttachedFilesystemSpec]":
        return super()._get_field("filesystems", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(AttachedFilesystemSpec,None),
        )
    @filesystems.setter
    def filesystems(self, value: "abc.Iterable[AttachedFilesystemSpec]") -> None:
        return super()._set_field("filesystems",value,explicit_presence=False,
        )
    
    @property
    def cloud_init_user_data(self) -> "builtins.str":
        return super()._get_field("cloud_init_user_data", explicit_presence=False,
        )
    @cloud_init_user_data.setter
    def cloud_init_user_data(self, value: "builtins.str") -> None:
        return super()._set_field("cloud_init_user_data",value,explicit_presence=False,
        )
    
    @property
    def service_account_id(self) -> "builtins.str":
        return super()._get_field("service_account_id", explicit_presence=False,
        )
    @service_account_id.setter
    def service_account_id(self, value: "builtins.str") -> None:
        return super()._set_field("service_account_id",value,explicit_presence=False,
        )
    
class NodeMetadataTemplate(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeMetadataTemplate
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeMetadataTemplate",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class LabelsEntry(pb_classes.Message):
        __PB2_CLASS__ = node_group_pb2.NodeMetadataTemplate.LabelsEntry
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeMetadataTemplate.LabelsEntry",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
        
        def __init__(
            self,
            initial_message: message_1.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value,explicit_presence=False,
            )
        
        @property
        def value(self) -> "builtins.str":
            return super()._get_field("value", explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.str") -> None:
            return super()._set_field("value",value,explicit_presence=False,
            )
        
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        labels: "abc.Mapping[builtins.str,builtins.str]|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if labels is not None:
            self.labels = labels
    
    @property
    def labels(self) -> "abc.MutableMapping[builtins.str,builtins.str]":
        return super()._get_field("labels", explicit_presence=False,
        wrap=pb_classes.Map,
        )
    @labels.setter
    def labels(self, value: "abc.Mapping[builtins.str,builtins.str]") -> None:
        return super()._set_field("labels",value,explicit_presence=False,
        )
    
class GpuClusterSpec(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.GpuClusterSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.GpuClusterSpec",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class NetworkInterfaceTemplate(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NetworkInterfaceTemplate
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NetworkInterfaceTemplate",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        public_ip_address: "PublicIPAddress|node_group_pb2.PublicIPAddress|None" = None,
        subnet_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
        if subnet_id is not None:
            self.subnet_id = subnet_id
    
    @property
    def public_ip_address(self) -> "PublicIPAddress|None":
        return super()._get_field("public_ip_address", explicit_presence=True,
        wrap=PublicIPAddress,
        )
    @public_ip_address.setter
    def public_ip_address(self, value: "PublicIPAddress|node_group_pb2.PublicIPAddress|None") -> None:
        return super()._set_field("public_ip_address",value,explicit_presence=True,
        )
    
    @property
    def subnet_id(self) -> "builtins.str":
        return super()._get_field("subnet_id", explicit_presence=False,
        )
    @subnet_id.setter
    def subnet_id(self, value: "builtins.str") -> None:
        return super()._set_field("subnet_id",value,explicit_presence=False,
        )
    
class PublicIPAddress(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.PublicIPAddress
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.PublicIPAddress",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
    ) -> None:
        super().__init__(initial_message)
    
class AttachedFilesystemSpec(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.AttachedFilesystemSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.AttachedFilesystemSpec",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class AttachMode(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.mk8s.v1.AttachedFilesystemSpec.AttachMode",node_group_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        UNSPECIFIED = 0
        READ_ONLY = 1
        READ_WRITE = 2
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        attach_mode: "AttachedFilesystemSpec.AttachMode|node_group_pb2.AttachedFilesystemSpec.AttachMode|None" = None,
        mount_tag: "builtins.str|None" = None,
        existing_filesystem: "ExistingFilesystem|node_group_pb2.ExistingFilesystem|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if attach_mode is not None:
            self.attach_mode = attach_mode
        if mount_tag is not None:
            self.mount_tag = mount_tag
        if existing_filesystem is not None:
            self.existing_filesystem = existing_filesystem
    
    @property
    def attach_mode(self) -> "AttachedFilesystemSpec.AttachMode":
        return super()._get_field("attach_mode", explicit_presence=False,
        wrap=AttachedFilesystemSpec.AttachMode,
        )
    @attach_mode.setter
    def attach_mode(self, value: "AttachedFilesystemSpec.AttachMode|node_group_pb2.AttachedFilesystemSpec.AttachMode") -> None:
        return super()._set_field("attach_mode",value,explicit_presence=False,
        )
    
    @property
    def mount_tag(self) -> "builtins.str":
        return super()._get_field("mount_tag", explicit_presence=False,
        )
    @mount_tag.setter
    def mount_tag(self, value: "builtins.str") -> None:
        return super()._set_field("mount_tag",value,explicit_presence=False,
        )
    
    @property
    def existing_filesystem(self) -> "ExistingFilesystem":
        return super()._get_field("existing_filesystem", explicit_presence=False,
        wrap=ExistingFilesystem,
        )
    @existing_filesystem.setter
    def existing_filesystem(self, value: "ExistingFilesystem|node_group_pb2.ExistingFilesystem") -> None:
        return super()._set_field("existing_filesystem",value,explicit_presence=False,
        )
    
class ExistingFilesystem(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.ExistingFilesystem
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ExistingFilesystem",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class NodeGroupAutoscalingSpec(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeGroupAutoscalingSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeGroupAutoscalingSpec",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        min_node_count: "builtins.int|None" = None,
        max_node_count: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if min_node_count is not None:
            self.min_node_count = min_node_count
        if max_node_count is not None:
            self.max_node_count = max_node_count
    
    @property
    def min_node_count(self) -> "builtins.int":
        return super()._get_field("min_node_count", explicit_presence=False,
        )
    @min_node_count.setter
    def min_node_count(self, value: "builtins.int") -> None:
        return super()._set_field("min_node_count",value,explicit_presence=False,
        )
    
    @property
    def max_node_count(self) -> "builtins.int":
        return super()._get_field("max_node_count", explicit_presence=False,
        )
    @max_node_count.setter
    def max_node_count(self, value: "builtins.int") -> None:
        return super()._set_field("max_node_count",value,explicit_presence=False,
        )
    
class NodeTaint(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeTaint
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeTaint",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class Effect(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.mk8s.v1.NodeTaint.Effect",node_group_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        EFFECT_UNSPECIFIED = 0
        NO_EXECUTE = 1
        NO_SCHEDULE = 2
        PREFER_NO_SCHEDULE = 3
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        key: "builtins.str|None" = None,
        value: "builtins.str|None" = None,
        effect: "NodeTaint.Effect|node_group_pb2.NodeTaint.Effect|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if key is not None:
            self.key = key
        if value is not None:
            self.value = value
        if effect is not None:
            self.effect = effect
    
    @property
    def key(self) -> "builtins.str":
        return super()._get_field("key", explicit_presence=False,
        )
    @key.setter
    def key(self, value: "builtins.str") -> None:
        return super()._set_field("key",value,explicit_presence=False,
        )
    
    @property
    def value(self) -> "builtins.str":
        return super()._get_field("value", explicit_presence=False,
        )
    @value.setter
    def value(self, value: "builtins.str") -> None:
        return super()._set_field("value",value,explicit_presence=False,
        )
    
    @property
    def effect(self) -> "NodeTaint.Effect":
        return super()._get_field("effect", explicit_presence=False,
        wrap=NodeTaint.Effect,
        )
    @effect.setter
    def effect(self, value: "NodeTaint.Effect|node_group_pb2.NodeTaint.Effect") -> None:
        return super()._set_field("effect",value,explicit_presence=False,
        )
    
class NodeGroupDeploymentStrategy(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeGroupDeploymentStrategy
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeGroupDeploymentStrategy",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        max_unavailable: "PercentOrCount|node_group_pb2.PercentOrCount|None" = None,
        max_surge: "PercentOrCount|node_group_pb2.PercentOrCount|None" = None,
        drain_timeout: "duration_pb2.Duration|datetime.timedelta|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if max_unavailable is not None:
            self.max_unavailable = max_unavailable
        if max_surge is not None:
            self.max_surge = max_surge
        if drain_timeout is not None:
            self.drain_timeout = drain_timeout
    
    @property
    def max_unavailable(self) -> "PercentOrCount":
        return super()._get_field("max_unavailable", explicit_presence=False,
        wrap=PercentOrCount,
        )
    @max_unavailable.setter
    def max_unavailable(self, value: "PercentOrCount|node_group_pb2.PercentOrCount") -> None:
        return super()._set_field("max_unavailable",value,explicit_presence=False,
        )
    
    @property
    def max_surge(self) -> "PercentOrCount":
        return super()._get_field("max_surge", explicit_presence=False,
        wrap=PercentOrCount,
        )
    @max_surge.setter
    def max_surge(self, value: "PercentOrCount|node_group_pb2.PercentOrCount") -> None:
        return super()._set_field("max_surge",value,explicit_presence=False,
        )
    
    @property
    def drain_timeout(self) -> "datetime.timedelta":
        return super()._get_field("drain_timeout", explicit_presence=False,
        wrap=well_known.from_duration
        )
    @drain_timeout.setter
    def drain_timeout(self, value: "duration_pb2.Duration|datetime.timedelta") -> None:
        return super()._set_field("drain_timeout",value,explicit_presence=False,
        unwrap=well_known.to_duration
        )
    
class PercentOrCount(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.PercentOrCount
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.PercentOrCount",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        percent: "builtins.int|None" = None,
        count: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if percent is not None:
            self.percent = percent
        if count is not None:
            self.count = count
    
    @property
    def percent(self) -> "builtins.int|None":
        return super()._get_field("percent", explicit_presence=True,
        )
    @percent.setter
    def percent(self, value: "builtins.int|None") -> None:
        return super()._set_field("percent",value,explicit_presence=True,
        )
    
    @property
    def count(self) -> "builtins.int|None":
        return super()._get_field("count", explicit_presence=True,
        )
    @count.setter
    def count(self, value: "builtins.int|None") -> None:
        return super()._set_field("count",value,explicit_presence=True,
        )
    
class NodeGroupStatus(pb_classes.Message):
    __PB2_CLASS__ = node_group_pb2.NodeGroupStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.NodeGroupStatus",node_group_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class State(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.mk8s.v1.NodeGroupStatus.State",node_group_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATE_UNSPECIFIED = 0
        PROVISIONING = 1
        RUNNING = 2
        DELETING = 3
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        state: "NodeGroupStatus.State|node_group_pb2.NodeGroupStatus.State|None" = None,
        version: "builtins.str|None" = None,
        target_node_count: "builtins.int|None" = None,
        node_count: "builtins.int|None" = None,
        outdated_node_count: "builtins.int|None" = None,
        ready_node_count: "builtins.int|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if state is not None:
            self.state = state
        if version is not None:
            self.version = version
        if target_node_count is not None:
            self.target_node_count = target_node_count
        if node_count is not None:
            self.node_count = node_count
        if outdated_node_count is not None:
            self.outdated_node_count = outdated_node_count
        if ready_node_count is not None:
            self.ready_node_count = ready_node_count
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def state(self) -> "NodeGroupStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=NodeGroupStatus.State,
        )
    @state.setter
    def state(self, value: "NodeGroupStatus.State|node_group_pb2.NodeGroupStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def version(self) -> "builtins.str":
        return super()._get_field("version", explicit_presence=False,
        )
    @version.setter
    def version(self, value: "builtins.str") -> None:
        return super()._set_field("version",value,explicit_presence=False,
        )
    
    @property
    def target_node_count(self) -> "builtins.int":
        return super()._get_field("target_node_count", explicit_presence=False,
        )
    @target_node_count.setter
    def target_node_count(self, value: "builtins.int") -> None:
        return super()._set_field("target_node_count",value,explicit_presence=False,
        )
    
    @property
    def node_count(self) -> "builtins.int":
        return super()._get_field("node_count", explicit_presence=False,
        )
    @node_count.setter
    def node_count(self, value: "builtins.int") -> None:
        return super()._set_field("node_count",value,explicit_presence=False,
        )
    
    @property
    def outdated_node_count(self) -> "builtins.int":
        return super()._get_field("outdated_node_count", explicit_presence=False,
        )
    @outdated_node_count.setter
    def outdated_node_count(self, value: "builtins.int") -> None:
        return super()._set_field("outdated_node_count",value,explicit_presence=False,
        )
    
    @property
    def ready_node_count(self) -> "builtins.int":
        return super()._get_field("ready_node_count", explicit_presence=False,
        )
    @ready_node_count.setter
    def ready_node_count(self, value: "builtins.int") -> None:
        return super()._set_field("ready_node_count",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
# file: nebius/mk8s/v1/node_group_service.proto
class CreateNodeGroupRequest(pb_classes.Message):
    __PB2_CLASS__ = node_group_service_pb2.CreateNodeGroupRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.CreateNodeGroupRequest",node_group_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "NodeGroupSpec|node_group_pb2.NodeGroupSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "NodeGroupSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=NodeGroupSpec,
        )
    @spec.setter
    def spec(self, value: "NodeGroupSpec|node_group_pb2.NodeGroupSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class GetNodeGroupRequest(pb_classes.Message):
    __PB2_CLASS__ = node_group_service_pb2.GetNodeGroupRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.GetNodeGroupRequest",node_group_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        resource_version: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
        if resource_version is not None:
            self.resource_version = resource_version
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
    @property
    def resource_version(self) -> "builtins.str":
        return super()._get_field("resource_version", explicit_presence=False,
        )
    @resource_version.setter
    def resource_version(self, value: "builtins.str") -> None:
        return super()._set_field("resource_version",value,explicit_presence=False,
        )
    
class ListNodeGroupsRequest(pb_classes.Message):
    __PB2_CLASS__ = node_group_service_pb2.ListNodeGroupsRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ListNodeGroupsRequest",node_group_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
class ListNodeGroupsResponse(pb_classes.Message):
    __PB2_CLASS__ = node_group_service_pb2.ListNodeGroupsResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.ListNodeGroupsResponse",node_group_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[NodeGroup]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[NodeGroup]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(NodeGroup,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[NodeGroup]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    
class UpdateNodeGroupRequest(pb_classes.Message):
    __PB2_CLASS__ = node_group_service_pb2.UpdateNodeGroupRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.UpdateNodeGroupRequest",node_group_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "NodeGroupSpec|node_group_pb2.NodeGroupSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "NodeGroupSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=NodeGroupSpec,
        )
    @spec.setter
    def spec(self, value: "NodeGroupSpec|node_group_pb2.NodeGroupSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteNodeGroupRequest(pb_classes.Message):
    __PB2_CLASS__ = node_group_service_pb2.DeleteNodeGroupRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.DeleteNodeGroupRequest",node_group_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class UpgradeNodeGroupRequest(pb_classes.Message):
    __PB2_CLASS__ = node_group_service_pb2.UpgradeNodeGroupRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.mk8s.v1.UpgradeNodeGroupRequest",node_group_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        latest_infra_version: "empty_pb2.Empty|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
        if latest_infra_version is not None:
            self.latest_infra_version = latest_infra_version
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
    @property
    def latest_infra_version(self) -> "empty_pb2.Empty|None":
        return super()._get_field("latest_infra_version", explicit_presence=True,
        )
    @latest_infra_version.setter
    def latest_infra_version(self, value: "empty_pb2.Empty|None") -> None:
        return super()._set_field("latest_infra_version",value,explicit_presence=True,
        )
    

class NodeGroupServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.mk8s.v1.NodeGroupService",node_group_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.mk8s.v1.NodeGroupService"
    __operation_type__ = v1_1.Operation
    
    def get(self,
        request: "GetNodeGroupRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetNodeGroupRequest","NodeGroup"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=node_group_pb2.NodeGroup,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","NodeGroup"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=node_group_pb2.NodeGroup,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListNodeGroupsRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListNodeGroupsRequest","ListNodeGroupsResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=node_group_service_pb2.ListNodeGroupsResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateNodeGroupRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateNodeGroupRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateNodeGroupRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateNodeGroupRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteNodeGroupRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteNodeGroupRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def upgrade(self,
        request: "UpgradeNodeGroupRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpgradeNodeGroupRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Upgrade",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    

__all__ = [
    #@ local import names here @#
    "Cluster",
    "ClusterSpec",
    "ControlPlaneSpec",
    "ControlPlaneEndpointsSpec",
    "PublicEndpointSpec",
    "KubeNetworkSpec",
    "ClusterStatus",
    "ControlPlaneStatus",
    "ControlPlaneStatusEndpoints",
    "ControlPlaneStatusAuth",
    "CreateClusterRequest",
    "GetClusterRequest",
    "ListClustersRequest",
    "ListClustersResponse",
    "UpdateClusterRequest",
    "DeleteClusterRequest",
    "ClusterServiceClient",
    "DiskSpec",
    "ResourcesSpec",
    "NodeGroup",
    "NodeGroupSpec",
    "NodeTemplate",
    "NodeMetadataTemplate",
    "GpuClusterSpec",
    "NetworkInterfaceTemplate",
    "PublicIPAddress",
    "AttachedFilesystemSpec",
    "ExistingFilesystem",
    "NodeGroupAutoscalingSpec",
    "NodeTaint",
    "NodeGroupDeploymentStrategy",
    "PercentOrCount",
    "NodeGroupStatus",
    "CreateNodeGroupRequest",
    "GetNodeGroupRequest",
    "ListNodeGroupsRequest",
    "ListNodeGroupsResponse",
    "UpdateNodeGroupRequest",
    "DeleteNodeGroupRequest",
    "UpgradeNodeGroupRequest",
    "NodeGroupServiceClient",
]
