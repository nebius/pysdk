# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.registry.v1.artifact_pb2 as artifact_pb2
import nebius.base.protos.pb_enum as pb_enum
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_2
import builtins as builtins
import google.protobuf.timestamp_pb2 as timestamp_pb2
import nebius.api.nebius.registry.v1.artifact_service_pb2 as artifact_service_pb2
import collections.abc as abc
import nebius.api.nebius.registry.v1.registry_pb2 as registry_pb2
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import nebius.api.nebius.registry.v1.registry_service_pb2 as registry_service_pb2

# file: nebius/registry/v1/artifact.proto
class Artifact(message_1.Message):
    _PB2_CLASS_ = artifact_pb2.Artifact
    
    class Status(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.registry.v1.Artifact.Status",artifact_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATUS_UNSPECIFIED = 0
        ACTIVE = 1
        DELETING = 2
    
    class Type(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.registry.v1.Artifact.Type",artifact_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        BLOB = 0
        MANIFEST = 1
        DEB_PACKAGE = 2
        MANIFEST_LIST = 3
        RELEASE_INDEX = 4
        PACKAGE_INDEX = 5
        GZIPPED_PACKAGE_INDEX = 6
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
        media_type: "builtins.str|None" = None,
        digest: "builtins.str|None" = None,
        size: "builtins.int|None" = None,
        status: "Artifact.Status|artifact_pb2.Artifact.Status|None" = None,
        type: "Artifact.Type|artifact_pb2.Artifact.Type|None" = None,
        created_at: "timestamp_pb2.Timestamp|None" = None,
        updated_at: "timestamp_pb2.Timestamp|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.Artifact",artifact_pb2.DESCRIPTOR)
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if media_type is not None:
            self.media_type = media_type
        if digest is not None:
            self.digest = digest
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False)
    
    @property
    def media_type(self) -> "builtins.str":
        return super()._get_field("media_type", explicit_presence=False,
        )
    @media_type.setter
    def media_type(self, value: "builtins.str") -> None:
        return super()._set_field("media_type",value,explicit_presence=False)
    
    @property
    def digest(self) -> "builtins.str":
        return super()._get_field("digest", explicit_presence=False,
        )
    @digest.setter
    def digest(self, value: "builtins.str") -> None:
        return super()._set_field("digest",value,explicit_presence=False)
    
    @property
    def size(self) -> "builtins.int":
        return super()._get_field("size", explicit_presence=False,
        )
    @size.setter
    def size(self, value: "builtins.int") -> None:
        return super()._set_field("size",value,explicit_presence=False)
    
    @property
    def status(self) -> "Artifact.Status":
        return super()._get_field("status", explicit_presence=False,
        wrap=Artifact.Status,
        )
    @status.setter
    def status(self, value: "Artifact.Status|artifact_pb2.Artifact.Status") -> None:
        return super()._set_field("status",value,explicit_presence=False)
    
    @property
    def type(self) -> "Artifact.Type":
        return super()._get_field("type", explicit_presence=False,
        wrap=Artifact.Type,
        )
    @type.setter
    def type(self, value: "Artifact.Type|artifact_pb2.Artifact.Type") -> None:
        return super()._set_field("type",value,explicit_presence=False)
    
    @property
    def created_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("created_at", explicit_presence=True,
        )
    @created_at.setter
    def created_at(self, value: "timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("created_at",value,explicit_presence=True)
    
    @property
    def updated_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("updated_at", explicit_presence=True,
        )
    @updated_at.setter
    def updated_at(self, value: "timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("updated_at",value,explicit_presence=True)
    
# file: nebius/registry/v1/artifact_service.proto
class GetArtifactRequest(message_1.Message):
    _PB2_CLASS_ = artifact_service_pb2.GetArtifactRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.GetArtifactRequest",artifact_service_pb2.DESCRIPTOR)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False)
    
class ListArtifactsRequest(message_1.Message):
    _PB2_CLASS_ = artifact_service_pb2.ListArtifactsRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.ListArtifactsRequest",artifact_service_pb2.DESCRIPTOR)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False)
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value,explicit_presence=False)
    
class ListArtifactsResponse(message_1.Message):
    _PB2_CLASS_ = artifact_service_pb2.ListArtifactsResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.Iterable[Artifact]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.ListArtifactsResponse",artifact_service_pb2.DESCRIPTOR)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Artifact]":
        return super()._get_field("items", explicit_presence=False,
        wrap=Artifact,
        )
    @items.setter
    def items(self, value: "abc.Iterable[Artifact]") -> None:
        return super()._set_field("items",value,explicit_presence=False)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False)
    
class DeleteArtifactRequest(message_1.Message):
    _PB2_CLASS_ = artifact_service_pb2.DeleteArtifactRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.DeleteArtifactRequest",artifact_service_pb2.DESCRIPTOR)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False)
    
# file: nebius/registry/v1/registry.proto
class Registry(message_1.Message):
    _PB2_CLASS_ = registry_pb2.Registry
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "RegistrySpec|registry_pb2.RegistrySpec|None" = None,
        status: "RegistryStatus|registry_pb2.RegistryStatus|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.Registry",registry_pb2.DESCRIPTOR)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value,explicit_presence=True)
    
    @property
    def spec(self) -> "RegistrySpec|None":
        return super()._get_field("spec", explicit_presence=True,
        wrap=RegistrySpec,
        )
    @spec.setter
    def spec(self, value: "RegistrySpec|registry_pb2.RegistrySpec|None") -> None:
        return super()._set_field("spec",value,explicit_presence=True)
    
    @property
    def status(self) -> "RegistryStatus|None":
        return super()._get_field("status", explicit_presence=True,
        wrap=RegistryStatus,
        )
    @status.setter
    def status(self, value: "RegistryStatus|registry_pb2.RegistryStatus|None") -> None:
        return super()._set_field("status",value,explicit_presence=True)
    
class RegistrySpec(message_1.Message):
    _PB2_CLASS_ = registry_pb2.RegistrySpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        description: "builtins.str|None" = None,
        images_count: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.RegistrySpec",registry_pb2.DESCRIPTOR)
        if description is not None:
            self.description = description
        if images_count is not None:
            self.images_count = images_count
    
    @property
    def description(self) -> "builtins.str":
        return super()._get_field("description", explicit_presence=False,
        )
    @description.setter
    def description(self, value: "builtins.str") -> None:
        return super()._set_field("description",value,explicit_presence=False)
    
    @property
    def images_count(self) -> "builtins.int":
        return super()._get_field("images_count", explicit_presence=False,
        )
    @images_count.setter
    def images_count(self, value: "builtins.int") -> None:
        return super()._set_field("images_count",value,explicit_presence=False)
    
class RegistryStatus(message_1.Message):
    _PB2_CLASS_ = registry_pb2.RegistryStatus
    
    class State(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.registry.v1.RegistryStatus.State",registry_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        CREATING = 0
        ACTIVE = 1
        DELETING = 2
        SUSPENDED = 3
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        state: "RegistryStatus.State|registry_pb2.RegistryStatus.State|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.RegistryStatus",registry_pb2.DESCRIPTOR)
        if state is not None:
            self.state = state
    
    @property
    def state(self) -> "RegistryStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=RegistryStatus.State,
        )
    @state.setter
    def state(self, value: "RegistryStatus.State|registry_pb2.RegistryStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False)
    
# file: nebius/registry/v1/registry_service.proto
class GetRegistryRequest(message_1.Message):
    _PB2_CLASS_ = registry_service_pb2.GetRegistryRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.GetRegistryRequest",registry_service_pb2.DESCRIPTOR)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False)
    
class ListRegistriesRequest(message_1.Message):
    _PB2_CLASS_ = registry_service_pb2.ListRegistriesRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.ListRegistriesRequest",registry_service_pb2.DESCRIPTOR)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False)
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value,explicit_presence=False)
    
class ListRegistriesResponse(message_1.Message):
    _PB2_CLASS_ = registry_service_pb2.ListRegistriesResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.Iterable[Registry]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.ListRegistriesResponse",registry_service_pb2.DESCRIPTOR)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Registry]":
        return super()._get_field("items", explicit_presence=False,
        wrap=Registry,
        )
    @items.setter
    def items(self, value: "abc.Iterable[Registry]") -> None:
        return super()._set_field("items",value,explicit_presence=False)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False)
    
class CreateRegistryRequest(message_1.Message):
    _PB2_CLASS_ = registry_service_pb2.CreateRegistryRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "RegistrySpec|registry_pb2.RegistrySpec|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.CreateRegistryRequest",registry_service_pb2.DESCRIPTOR)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value,explicit_presence=True)
    
    @property
    def spec(self) -> "RegistrySpec|None":
        return super()._get_field("spec", explicit_presence=True,
        wrap=RegistrySpec,
        )
    @spec.setter
    def spec(self, value: "RegistrySpec|registry_pb2.RegistrySpec|None") -> None:
        return super()._set_field("spec",value,explicit_presence=True)
    
class UpdateRegistryRequest(message_1.Message):
    _PB2_CLASS_ = registry_service_pb2.UpdateRegistryRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "RegistrySpec|registry_pb2.RegistrySpec|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.UpdateRegistryRequest",registry_service_pb2.DESCRIPTOR)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value,explicit_presence=True)
    
    @property
    def spec(self) -> "RegistrySpec|None":
        return super()._get_field("spec", explicit_presence=True,
        wrap=RegistrySpec,
        )
    @spec.setter
    def spec(self, value: "RegistrySpec|registry_pb2.RegistrySpec|None") -> None:
        return super()._set_field("spec",value,explicit_presence=True)
    
class DeleteRegistryRequest(message_1.Message):
    _PB2_CLASS_ = registry_service_pb2.DeleteRegistryRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.registry.v1.DeleteRegistryRequest",registry_service_pb2.DESCRIPTOR)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False)
    
