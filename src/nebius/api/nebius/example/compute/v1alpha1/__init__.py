# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_classes as pb_classes
import nebius.api.nebius.example.compute.v1alpha1.testing_pb2 as testing_pb2
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_1
import builtins as builtins
import google.protobuf.any_pb2 as any_pb2
import google.protobuf.duration_pb2 as duration_pb2
import datetime as datetime
import google.protobuf.timestamp_pb2 as timestamp_pb2
import collections.abc as abc
import nebius.base.protos.well_known as well_known
import nebius.api.nebius.example.compute.v1alpha1.instance_pb2 as instance_pb2
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import nebius.base.protos.pb_enum as pb_enum
import nebius.api.nebius.example.compute.v1alpha1.instance_service_pb2 as instance_service_pb2
import nebius.aio.client as client
import grpc as grpc
import nebius.aio.request as request_1
import nebius.aio.operation as operation
import nebius.api.nebius.common.v1.operation_pb2 as operation_pb2
#@ local imports here @#

# file: nebius/example/compute/v1alpha1/testing.proto
class Recursive(pb_classes.Message):
    __PB2_CLASS__ = testing_pb2.Recursive
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.Recursive",testing_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        str: "builtins.str|None" = None,
        recursion: "Recursive|testing_pb2.Recursive|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if str is not None:
            self.str = str
        if recursion is not None:
            self.recursion = recursion
    
    @property
    def str(self) -> "builtins.str":
        return super()._get_field("str", explicit_presence=False,
        )
    @str.setter
    def str(self, value: "builtins.str") -> None:
        return super()._set_field("str",value,explicit_presence=False,
        )
    
    @property
    def recursion(self) -> "Recursive|None":
        return super()._get_field("recursion", explicit_presence=True,
        wrap=Recursive,
        )
    @recursion.setter
    def recursion(self, value: "Recursive|testing_pb2.Recursive|None") -> None:
        return super()._set_field("recursion",value,explicit_presence=True,
        )
    
class TestingSpec(pb_classes.Message):
    __PB2_CLASS__ = testing_pb2.TestingSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.TestingSpec",testing_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class SioMapEntry(pb_classes.Message):
        __PB2_CLASS__ = testing_pb2.TestingSpec.SioMapEntry
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.TestingSpec.SioMapEntry",testing_pb2.DESCRIPTOR,descriptor_1.Descriptor)
        
        def __init__(
            self,
            initial_message: message_1.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.int|None" = None,
        ) -> None:
            super().__init__(initial_message)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value,explicit_presence=False,
            )
        
        @property
        def value(self) -> "builtins.int":
            return super()._get_field("value", explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.int") -> None:
            return super()._set_field("value",value,explicit_presence=False,
            )
        
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        any: "any_pb2.Any|None" = None,
        duration: "duration_pb2.Duration|datetime.timedelta|None" = None,
        timestamp: "timestamp_pb2.Timestamp|datetime.datetime|None" = None,
        recursive: "Recursive|testing_pb2.Recursive|None" = None,
        any_out: "any_pb2.Any|None" = None,
        duration_out: "duration_pb2.Duration|datetime.timedelta|None" = None,
        timestamp_out: "timestamp_pb2.Timestamp|datetime.datetime|None" = None,
        recursive_out: "Recursive|testing_pb2.Recursive|None" = None,
        non_empty_default: "builtins.str|None" = None,
        test_tf_validators: "TestTFValidators|testing_pb2.TestTFValidators|None" = None,
        sensitive_input_only: "builtins.str|None" = None,
        dur: "duration_pb2.Duration|datetime.timedelta|None" = None,
        time: "timestamp_pb2.Timestamp|datetime.datetime|None" = None,
        duration_array: "abc.Iterable[duration_pb2.Duration|datetime.timedelta]|None" = None,
        optional_well_known: "timestamp_pb2.Timestamp|datetime.datetime|None" = None,
        optional_message: "TestTFProtovalidateOneof|testing_pb2.TestTFProtovalidateOneof|None" = None,
        sio_repeated: "abc.Iterable[builtins.str]|None" = None,
        sio_map: "abc.Mapping[builtins.str,builtins.int]|None" = None,
        sio_obj: "TestSimple|testing_pb2.TestSimple|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if any is not None:
            self.any = any
        if duration is not None:
            self.duration = duration
        if timestamp is not None:
            self.timestamp = timestamp
        if recursive is not None:
            self.recursive = recursive
        if any_out is not None:
            self.any_out = any_out
        if duration_out is not None:
            self.duration_out = duration_out
        if timestamp_out is not None:
            self.timestamp_out = timestamp_out
        if recursive_out is not None:
            self.recursive_out = recursive_out
        if non_empty_default is not None:
            self.non_empty_default = non_empty_default
        if test_tf_validators is not None:
            self.test_tf_validators = test_tf_validators
        if sensitive_input_only is not None:
            self.sensitive_input_only = sensitive_input_only
        if dur is not None:
            self.dur = dur
        if time is not None:
            self.time = time
        if duration_array is not None:
            self.duration_array = duration_array
        if optional_well_known is not None:
            self.optional_well_known = optional_well_known
        if optional_message is not None:
            self.optional_message = optional_message
        if sio_repeated is not None:
            self.sio_repeated = sio_repeated
        if sio_map is not None:
            self.sio_map = sio_map
        if sio_obj is not None:
            self.sio_obj = sio_obj
    
    @property
    def any(self) -> "any_pb2.Any":
        return super()._get_field("any", explicit_presence=False,
        )
    @any.setter
    def any(self, value: "any_pb2.Any") -> None:
        return super()._set_field("any",value,explicit_presence=False,
        )
    
    @property
    def duration(self) -> "datetime.timedelta":
        return super()._get_field("duration", explicit_presence=False,
        wrap=well_known.from_duration
        )
    @duration.setter
    def duration(self, value: "duration_pb2.Duration|datetime.timedelta") -> None:
        return super()._set_field("duration",value,explicit_presence=False,
        unwrap=well_known.to_duration
        )
    
    @property
    def timestamp(self) -> "datetime.datetime":
        return super()._get_field("timestamp", explicit_presence=False,
        wrap=well_known.from_timestamp
        )
    @timestamp.setter
    def timestamp(self, value: "timestamp_pb2.Timestamp|datetime.datetime") -> None:
        return super()._set_field("timestamp",value,explicit_presence=False,
        unwrap=well_known.to_timestamp
        )
    
    @property
    def recursive(self) -> "Recursive|None":
        return super()._get_field("recursive", explicit_presence=True,
        wrap=Recursive,
        )
    @recursive.setter
    def recursive(self, value: "Recursive|testing_pb2.Recursive|None") -> None:
        return super()._set_field("recursive",value,explicit_presence=True,
        )
    
    @property
    def any_out(self) -> "any_pb2.Any":
        return super()._get_field("any_out", explicit_presence=False,
        )
    @any_out.setter
    def any_out(self, value: "any_pb2.Any") -> None:
        return super()._set_field("any_out",value,explicit_presence=False,
        )
    
    @property
    def duration_out(self) -> "datetime.timedelta":
        return super()._get_field("duration_out", explicit_presence=False,
        wrap=well_known.from_duration
        )
    @duration_out.setter
    def duration_out(self, value: "duration_pb2.Duration|datetime.timedelta") -> None:
        return super()._set_field("duration_out",value,explicit_presence=False,
        unwrap=well_known.to_duration
        )
    
    @property
    def timestamp_out(self) -> "datetime.datetime":
        return super()._get_field("timestamp_out", explicit_presence=False,
        wrap=well_known.from_timestamp
        )
    @timestamp_out.setter
    def timestamp_out(self, value: "timestamp_pb2.Timestamp|datetime.datetime") -> None:
        return super()._set_field("timestamp_out",value,explicit_presence=False,
        unwrap=well_known.to_timestamp
        )
    
    @property
    def recursive_out(self) -> "Recursive|None":
        return super()._get_field("recursive_out", explicit_presence=True,
        wrap=Recursive,
        )
    @recursive_out.setter
    def recursive_out(self, value: "Recursive|testing_pb2.Recursive|None") -> None:
        return super()._set_field("recursive_out",value,explicit_presence=True,
        )
    
    @property
    def non_empty_default(self) -> "builtins.str":
        return super()._get_field("non_empty_default", explicit_presence=False,
        )
    @non_empty_default.setter
    def non_empty_default(self, value: "builtins.str") -> None:
        return super()._set_field("non_empty_default",value,explicit_presence=False,
        )
    
    @property
    def test_tf_validators(self) -> "TestTFValidators":
        return super()._get_field("test_tf_validators", explicit_presence=False,
        wrap=TestTFValidators,
        )
    @test_tf_validators.setter
    def test_tf_validators(self, value: "TestTFValidators|testing_pb2.TestTFValidators") -> None:
        return super()._set_field("test_tf_validators",value,explicit_presence=False,
        )
    
    @property
    def sensitive_input_only(self) -> "builtins.str":
        return super()._get_field("sensitive_input_only", explicit_presence=False,
        )
    @sensitive_input_only.setter
    def sensitive_input_only(self, value: "builtins.str") -> None:
        return super()._set_field("sensitive_input_only",value,explicit_presence=False,
        )
    
    @property
    def dur(self) -> "datetime.timedelta":
        return super()._get_field("dur", explicit_presence=False,
        wrap=well_known.from_duration
        )
    @dur.setter
    def dur(self, value: "duration_pb2.Duration|datetime.timedelta") -> None:
        return super()._set_field("dur",value,explicit_presence=False,
        unwrap=well_known.to_duration
        )
    
    @property
    def time(self) -> "datetime.datetime":
        return super()._get_field("time", explicit_presence=False,
        wrap=well_known.from_timestamp
        )
    @time.setter
    def time(self, value: "timestamp_pb2.Timestamp|datetime.datetime") -> None:
        return super()._set_field("time",value,explicit_presence=False,
        unwrap=well_known.to_timestamp
        )
    
    @property
    def duration_array(self) -> "abc.MutableSequence[datetime.timedelta]":
        return super()._get_field("duration_array", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(well_known.from_duration,well_known.to_duration),
        )
    @duration_array.setter
    def duration_array(self, value: "abc.Iterable[duration_pb2.Duration|datetime.timedelta]") -> None:
        return super()._set_field("duration_array",value,explicit_presence=False,
        )
    
    @property
    def optional_well_known(self) -> "datetime.datetime":
        return super()._get_field("optional_well_known", explicit_presence=False,
        wrap=well_known.from_timestamp
        )
    @optional_well_known.setter
    def optional_well_known(self, value: "timestamp_pb2.Timestamp|datetime.datetime") -> None:
        return super()._set_field("optional_well_known",value,explicit_presence=False,
        unwrap=well_known.to_timestamp
        )
    
    @property
    def optional_message(self) -> "TestTFProtovalidateOneof":
        return super()._get_field("optional_message", explicit_presence=False,
        wrap=TestTFProtovalidateOneof,
        )
    @optional_message.setter
    def optional_message(self, value: "TestTFProtovalidateOneof|testing_pb2.TestTFProtovalidateOneof") -> None:
        return super()._set_field("optional_message",value,explicit_presence=False,
        )
    
    @property
    def sio_repeated(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("sio_repeated", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @sio_repeated.setter
    def sio_repeated(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("sio_repeated",value,explicit_presence=False,
        )
    
    @property
    def sio_map(self) -> "abc.MutableMapping[builtins.str,builtins.int]":
        return super()._get_field("sio_map", explicit_presence=False,
        wrap=pb_classes.Map,
        )
    @sio_map.setter
    def sio_map(self, value: "abc.Mapping[builtins.str,builtins.int]") -> None:
        return super()._set_field("sio_map",value,explicit_presence=False,
        )
    
    @property
    def sio_obj(self) -> "TestSimple":
        return super()._get_field("sio_obj", explicit_presence=False,
        wrap=TestSimple,
        )
    @sio_obj.setter
    def sio_obj(self, value: "TestSimple|testing_pb2.TestSimple") -> None:
        return super()._set_field("sio_obj",value,explicit_presence=False,
        )
    
class TestSimple(pb_classes.Message):
    __PB2_CLASS__ = testing_pb2.TestSimple
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.TestSimple",testing_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        a: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if a is not None:
            self.a = a
    
    @property
    def a(self) -> "builtins.int":
        return super()._get_field("a", explicit_presence=False,
        )
    @a.setter
    def a(self, value: "builtins.int") -> None:
        return super()._set_field("a",value,explicit_presence=False,
        )
    
class TestTFValidators(pb_classes.Message):
    __PB2_CLASS__ = testing_pb2.TestTFValidators
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.TestTFValidators",testing_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        test_type_limit_validator: "builtins.int|None" = None,
        test_protovalidate_main: "builtins.int|None" = None,
        a: "builtins.int|None" = None,
        b: "builtins.int|None" = None,
        test_message: "TestTFProtovalidateMessage|testing_pb2.TestTFProtovalidateMessage|None" = None,
        test_oneof_requirement: "TestTFProtovalidateOneof|testing_pb2.TestTFProtovalidateOneof|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if test_type_limit_validator is not None:
            self.test_type_limit_validator = test_type_limit_validator
        if test_protovalidate_main is not None:
            self.test_protovalidate_main = test_protovalidate_main
        if a is not None:
            self.a = a
        if b is not None:
            self.b = b
        if test_message is not None:
            self.test_message = test_message
        if test_oneof_requirement is not None:
            self.test_oneof_requirement = test_oneof_requirement
    
    @property
    def test_type_limit_validator(self) -> "builtins.int":
        return super()._get_field("test_type_limit_validator", explicit_presence=False,
        )
    @test_type_limit_validator.setter
    def test_type_limit_validator(self, value: "builtins.int") -> None:
        return super()._set_field("test_type_limit_validator",value,explicit_presence=False,
        )
    
    @property
    def test_protovalidate_main(self) -> "builtins.int":
        return super()._get_field("test_protovalidate_main", explicit_presence=False,
        )
    @test_protovalidate_main.setter
    def test_protovalidate_main(self, value: "builtins.int") -> None:
        return super()._set_field("test_protovalidate_main",value,explicit_presence=False,
        )
    
    @property
    def a(self) -> "builtins.int|None":
        return super()._get_field("a", explicit_presence=True,
        )
    @a.setter
    def a(self, value: "builtins.int|None") -> None:
        return super()._set_field("a",value,explicit_presence=True,
        )
    
    @property
    def b(self) -> "builtins.int|None":
        return super()._get_field("b", explicit_presence=True,
        )
    @b.setter
    def b(self, value: "builtins.int|None") -> None:
        return super()._set_field("b",value,explicit_presence=True,
        )
    
    @property
    def test_message(self) -> "TestTFProtovalidateMessage":
        return super()._get_field("test_message", explicit_presence=False,
        wrap=TestTFProtovalidateMessage,
        )
    @test_message.setter
    def test_message(self, value: "TestTFProtovalidateMessage|testing_pb2.TestTFProtovalidateMessage") -> None:
        return super()._set_field("test_message",value,explicit_presence=False,
        )
    
    @property
    def test_oneof_requirement(self) -> "TestTFProtovalidateOneof":
        return super()._get_field("test_oneof_requirement", explicit_presence=False,
        wrap=TestTFProtovalidateOneof,
        )
    @test_oneof_requirement.setter
    def test_oneof_requirement(self, value: "TestTFProtovalidateOneof|testing_pb2.TestTFProtovalidateOneof") -> None:
        return super()._set_field("test_oneof_requirement",value,explicit_presence=False,
        )
    
class TestTFProtovalidateMessage(pb_classes.Message):
    __PB2_CLASS__ = testing_pb2.TestTFProtovalidateMessage
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.TestTFProtovalidateMessage",testing_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        a: "builtins.int|None" = None,
        b: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if a is not None:
            self.a = a
        if b is not None:
            self.b = b
    
    @property
    def a(self) -> "builtins.int":
        return super()._get_field("a", explicit_presence=False,
        )
    @a.setter
    def a(self, value: "builtins.int") -> None:
        return super()._set_field("a",value,explicit_presence=False,
        )
    
    @property
    def b(self) -> "builtins.int":
        return super()._get_field("b", explicit_presence=False,
        )
    @b.setter
    def b(self, value: "builtins.int") -> None:
        return super()._set_field("b",value,explicit_presence=False,
        )
    
class TestTFProtovalidateOneof(pb_classes.Message):
    __PB2_CLASS__ = testing_pb2.TestTFProtovalidateOneof
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.TestTFProtovalidateOneof",testing_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        a: "builtins.int|None" = None,
        b: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if a is not None:
            self.a = a
        if b is not None:
            self.b = b
    
    @property
    def a(self) -> "builtins.int|None":
        return super()._get_field("a", explicit_presence=True,
        )
    @a.setter
    def a(self, value: "builtins.int|None") -> None:
        return super()._set_field("a",value,explicit_presence=True,
        )
    
    @property
    def b(self) -> "builtins.int|None":
        return super()._get_field("b", explicit_presence=True,
        )
    @b.setter
    def b(self, value: "builtins.int|None") -> None:
        return super()._set_field("b",value,explicit_presence=True,
        )
    
# file: nebius/example/compute/v1alpha1/instance.proto
class Instance(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.Instance
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.Instance",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "InstanceSpec|instance_pb2.InstanceSpec|None" = None,
        status: "InstanceStatus|instance_pb2.InstanceStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "InstanceSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=InstanceSpec,
        )
    @spec.setter
    def spec(self, value: "InstanceSpec|instance_pb2.InstanceSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "InstanceStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=InstanceStatus,
        )
    @status.setter
    def status(self, value: "InstanceStatus|instance_pb2.InstanceStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class InstanceSpec(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.InstanceSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.InstanceSpec",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class InstanceMetadataEntry(pb_classes.Message):
        __PB2_CLASS__ = instance_pb2.InstanceSpec.InstanceMetadataEntry
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.InstanceSpec.InstanceMetadataEntry",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
        
        def __init__(
            self,
            initial_message: message_1.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value,explicit_presence=False,
            )
        
        @property
        def value(self) -> "builtins.str":
            return super()._get_field("value", explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.str") -> None:
            return super()._set_field("value",value,explicit_presence=False,
            )
        
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        instance_name: "builtins.str|None" = None,
        description: "builtins.str|None" = None,
        zone_id: "builtins.str|None" = None,
        platform_id: "builtins.str|None" = None,
        resources: "Resources|instance_pb2.Resources|None" = None,
        instance_metadata: "abc.Mapping[builtins.str,builtins.str]|None" = None,
        boot_disk_id: "builtins.str|None" = None,
        secondary_disks: "abc.Iterable[builtins.str]|None" = None,
        network_interfaces: "abc.Iterable[builtins.str]|None" = None,
        hostname: "builtins.str|None" = None,
        service_account_id: "builtins.str|None" = None,
        testing: "TestingSpec|testing_pb2.TestingSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if instance_name is not None:
            self.instance_name = instance_name
        if description is not None:
            self.description = description
        if zone_id is not None:
            self.zone_id = zone_id
        if platform_id is not None:
            self.platform_id = platform_id
        if resources is not None:
            self.resources = resources
        if instance_metadata is not None:
            self.instance_metadata = instance_metadata
        if boot_disk_id is not None:
            self.boot_disk_id = boot_disk_id
        if secondary_disks is not None:
            self.secondary_disks = secondary_disks
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if hostname is not None:
            self.hostname = hostname
        if service_account_id is not None:
            self.service_account_id = service_account_id
        if testing is not None:
            self.testing = testing
    
    @property
    def instance_name(self) -> "builtins.str":
        return super()._get_field("instance_name", explicit_presence=False,
        )
    @instance_name.setter
    def instance_name(self, value: "builtins.str") -> None:
        return super()._set_field("instance_name",value,explicit_presence=False,
        )
    
    @property
    def description(self) -> "builtins.str":
        return super()._get_field("description", explicit_presence=False,
        )
    @description.setter
    def description(self, value: "builtins.str") -> None:
        return super()._set_field("description",value,explicit_presence=False,
        )
    
    @property
    def zone_id(self) -> "builtins.str":
        return super()._get_field("zone_id", explicit_presence=False,
        )
    @zone_id.setter
    def zone_id(self, value: "builtins.str") -> None:
        return super()._set_field("zone_id",value,explicit_presence=False,
        )
    
    @property
    def platform_id(self) -> "builtins.str":
        return super()._get_field("platform_id", explicit_presence=False,
        )
    @platform_id.setter
    def platform_id(self, value: "builtins.str") -> None:
        return super()._set_field("platform_id",value,explicit_presence=False,
        )
    
    @property
    def resources(self) -> "Resources":
        return super()._get_field("resources", explicit_presence=False,
        wrap=Resources,
        )
    @resources.setter
    def resources(self, value: "Resources|instance_pb2.Resources") -> None:
        return super()._set_field("resources",value,explicit_presence=False,
        )
    
    @property
    def instance_metadata(self) -> "abc.MutableMapping[builtins.str,builtins.str]":
        return super()._get_field("instance_metadata", explicit_presence=False,
        wrap=pb_classes.Map,
        )
    @instance_metadata.setter
    def instance_metadata(self, value: "abc.Mapping[builtins.str,builtins.str]") -> None:
        return super()._set_field("instance_metadata",value,explicit_presence=False,
        )
    
    @property
    def boot_disk_id(self) -> "builtins.str":
        return super()._get_field("boot_disk_id", explicit_presence=False,
        )
    @boot_disk_id.setter
    def boot_disk_id(self, value: "builtins.str") -> None:
        return super()._set_field("boot_disk_id",value,explicit_presence=False,
        )
    
    @property
    def secondary_disks(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("secondary_disks", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @secondary_disks.setter
    def secondary_disks(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("secondary_disks",value,explicit_presence=False,
        )
    
    @property
    def network_interfaces(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("network_interfaces", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @network_interfaces.setter
    def network_interfaces(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("network_interfaces",value,explicit_presence=False,
        )
    
    @property
    def hostname(self) -> "builtins.str":
        return super()._get_field("hostname", explicit_presence=False,
        )
    @hostname.setter
    def hostname(self, value: "builtins.str") -> None:
        return super()._set_field("hostname",value,explicit_presence=False,
        )
    
    @property
    def service_account_id(self) -> "builtins.str":
        return super()._get_field("service_account_id", explicit_presence=False,
        )
    @service_account_id.setter
    def service_account_id(self, value: "builtins.str") -> None:
        return super()._set_field("service_account_id",value,explicit_presence=False,
        )
    
    @property
    def testing(self) -> "TestingSpec":
        return super()._get_field("testing", explicit_presence=False,
        wrap=TestingSpec,
        )
    @testing.setter
    def testing(self, value: "TestingSpec|testing_pb2.TestingSpec") -> None:
        return super()._set_field("testing",value,explicit_presence=False,
        )
    
class Resources(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.Resources
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.Resources",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        memory_bytes: "builtins.int|None" = None,
        cores_count: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if memory_bytes is not None:
            self.memory_bytes = memory_bytes
        if cores_count is not None:
            self.cores_count = cores_count
    
    @property
    def memory_bytes(self) -> "builtins.int":
        return super()._get_field("memory_bytes", explicit_presence=False,
        )
    @memory_bytes.setter
    def memory_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("memory_bytes",value,explicit_presence=False,
        )
    
    @property
    def cores_count(self) -> "builtins.int":
        return super()._get_field("cores_count", explicit_presence=False,
        )
    @cores_count.setter
    def cores_count(self, value: "builtins.int") -> None:
        return super()._set_field("cores_count",value,explicit_presence=False,
        )
    
class InstanceStatus(pb_classes.Message):
    __PB2_CLASS__ = instance_pb2.InstanceStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.InstanceStatus",instance_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class State(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.example.compute.v1alpha1.InstanceStatus.State",instance_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATUS_UNSPECIFIED = 0
        PROVISIONING = 1
        RUNNING = 2
        STOPPING = 3
        STOPPED = 4
        STARTING = 5
        RESTARTING = 6
        UPDATING = 7
        ERROR = 8
        CRASHED = 9
        DELETING = 10
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        state: "InstanceStatus.State|instance_pb2.InstanceStatus.State|None" = None,
        compute_node: "builtins.str|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if state is not None:
            self.state = state
        if compute_node is not None:
            self.compute_node = compute_node
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def state(self) -> "InstanceStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=InstanceStatus.State,
        )
    @state.setter
    def state(self, value: "InstanceStatus.State|instance_pb2.InstanceStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def compute_node(self) -> "builtins.str":
        return super()._get_field("compute_node", explicit_presence=False,
        )
    @compute_node.setter
    def compute_node(self, value: "builtins.str") -> None:
        return super()._set_field("compute_node",value,explicit_presence=False,
        )
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value,explicit_presence=False,
        )
    
# file: nebius/example/compute/v1alpha1/instance_service.proto
class InstanceView(pb_enum.Enum):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.example.compute.v1alpha1.InstanceView",instance_service_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    BASIC = 0
    FULL = 1

class GetInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.GetInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.GetInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        view: "InstanceView|instance_service_pb2.InstanceView|None" = None,
        resource_version: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
        if view is not None:
            self.view = view
        if resource_version is not None:
            self.resource_version = resource_version
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
    @property
    def view(self) -> "InstanceView":
        return super()._get_field("view", explicit_presence=False,
        wrap=InstanceView,
        )
    @view.setter
    def view(self, value: "InstanceView|instance_service_pb2.InstanceView") -> None:
        return super()._set_field("view",value,explicit_presence=False,
        )
    
    @property
    def resource_version(self) -> "builtins.str":
        return super()._get_field("resource_version", explicit_presence=False,
        )
    @resource_version.setter
    def resource_version(self, value: "builtins.str") -> None:
        return super()._set_field("resource_version",value,explicit_presence=False,
        )
    
class ListInstancesRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.ListInstancesRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.ListInstancesRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        project_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
        view: "InstanceView|instance_service_pb2.InstanceView|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if project_id is not None:
            self.project_id = project_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
        if view is not None:
            self.view = view
    
    @property
    def project_id(self) -> "builtins.str":
        return super()._get_field("project_id", explicit_presence=False,
        )
    @project_id.setter
    def project_id(self, value: "builtins.str") -> None:
        return super()._set_field("project_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value,explicit_presence=False,
        )
    
    @property
    def view(self) -> "InstanceView":
        return super()._get_field("view", explicit_presence=False,
        wrap=InstanceView,
        )
    @view.setter
    def view(self, value: "InstanceView|instance_service_pb2.InstanceView") -> None:
        return super()._set_field("view",value,explicit_presence=False,
        )
    
class ListInstancesResponse(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.ListInstancesResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.ListInstancesResponse",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[Instance]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Instance]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Instance,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[Instance]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    
class CreateInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.CreateInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.CreateInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "InstanceSpec|instance_pb2.InstanceSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "InstanceSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=InstanceSpec,
        )
    @spec.setter
    def spec(self, value: "InstanceSpec|instance_pb2.InstanceSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class UpdateInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.UpdateInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.UpdateInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "InstanceSpec|instance_pb2.InstanceSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "InstanceSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=InstanceSpec,
        )
    @spec.setter
    def spec(self, value: "InstanceSpec|instance_pb2.InstanceSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.DeleteInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.DeleteInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        resource_version: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
        if resource_version is not None:
            self.resource_version = resource_version
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
    @property
    def resource_version(self) -> "builtins.str":
        return super()._get_field("resource_version", explicit_presence=False,
        )
    @resource_version.setter
    def resource_version(self, value: "builtins.str") -> None:
        return super()._set_field("resource_version",value,explicit_presence=False,
        )
    
class StopInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.StopInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.StopInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        instance_id: "builtins.str|None" = None,
        force: "builtins.bool|None" = None,
        termination_grace_period: "duration_pb2.Duration|datetime.timedelta|None" = None,
        compute_node: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if instance_id is not None:
            self.instance_id = instance_id
        if force is not None:
            self.force = force
        if termination_grace_period is not None:
            self.termination_grace_period = termination_grace_period
        if compute_node is not None:
            self.compute_node = compute_node
    
    @property
    def instance_id(self) -> "builtins.str":
        return super()._get_field("instance_id", explicit_presence=False,
        )
    @instance_id.setter
    def instance_id(self, value: "builtins.str") -> None:
        return super()._set_field("instance_id",value,explicit_presence=False,
        )
    
    @property
    def force(self) -> "builtins.bool":
        return super()._get_field("force", explicit_presence=False,
        )
    @force.setter
    def force(self, value: "builtins.bool") -> None:
        return super()._set_field("force",value,explicit_presence=False,
        )
    
    @property
    def termination_grace_period(self) -> "datetime.timedelta":
        return super()._get_field("termination_grace_period", explicit_presence=False,
        wrap=well_known.from_duration
        )
    @termination_grace_period.setter
    def termination_grace_period(self, value: "duration_pb2.Duration|datetime.timedelta") -> None:
        return super()._set_field("termination_grace_period",value,explicit_presence=False,
        unwrap=well_known.to_duration
        )
    
    @property
    def compute_node(self) -> "builtins.str":
        return super()._get_field("compute_node", explicit_presence=False,
        )
    @compute_node.setter
    def compute_node(self, value: "builtins.str") -> None:
        return super()._set_field("compute_node",value,explicit_presence=False,
        )
    
class StartInstanceRequest(pb_classes.Message):
    __PB2_CLASS__ = instance_service_pb2.StartInstanceRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.example.compute.v1alpha1.StartInstanceRequest",instance_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        instance_id: "builtins.str|None" = None,
        override_force_deallocated: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if instance_id is not None:
            self.instance_id = instance_id
        if override_force_deallocated is not None:
            self.override_force_deallocated = override_force_deallocated
    
    @property
    def instance_id(self) -> "builtins.str":
        return super()._get_field("instance_id", explicit_presence=False,
        )
    @instance_id.setter
    def instance_id(self, value: "builtins.str") -> None:
        return super()._set_field("instance_id",value,explicit_presence=False,
        )
    
    @property
    def override_force_deallocated(self) -> "builtins.bool":
        return super()._get_field("override_force_deallocated", explicit_presence=False,
        )
    @override_force_deallocated.setter
    def override_force_deallocated(self, value: "builtins.bool") -> None:
        return super()._set_field("override_force_deallocated",value,explicit_presence=False,
        )
    

class InstanceServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.example.compute.v1alpha1.InstanceService",instance_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.example.compute.v1alpha1.InstanceService"
    __operation_type__ = v1_1.Operation
    
    def get(self,
        request: "GetInstanceRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetInstanceRequest","Instance"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=instance_pb2.Instance,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListInstancesRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListInstancesRequest","ListInstancesResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=instance_service_pb2.ListInstancesResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","Instance"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=instance_pb2.Instance,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateInstanceRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateInstanceRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteInstanceRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def stop(self,
        request: "StopInstanceRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["StopInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Stop",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def start(self,
        request: "StartInstanceRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["StartInstanceRequest","operation.Operation[v1_1.Operation]"]:
        return super().request(
            method="Start",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    

__all__ = [
    #@ local import names here @#
    "Recursive",
    "TestingSpec",
    "TestSimple",
    "TestTFValidators",
    "TestTFProtovalidateMessage",
    "TestTFProtovalidateOneof",
    "Instance",
    "InstanceSpec",
    "Resources",
    "InstanceStatus",
    "InstanceView",
    "GetInstanceRequest",
    "ListInstancesRequest",
    "ListInstancesResponse",
    "CreateInstanceRequest",
    "UpdateInstanceRequest",
    "DeleteInstanceRequest",
    "StopInstanceRequest",
    "StartInstanceRequest",
    "InstanceServiceClient",
]
