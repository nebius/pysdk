# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.storage.v1.bucket_counters_pb2 as bucket_counters_pb2
import google.protobuf.message as message_2
import builtins as builtins
import nebius.base.protos.pb_enum as pb_enum
import nebius.api.nebius.storage.v1.lifecycle_pb2 as lifecycle_pb2
import collections.abc as abc
import google.protobuf.timestamp_pb2 as timestamp_pb2
import nebius.api.nebius.storage.v1.bucket_pb2 as bucket_pb2
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import nebius.api.nebius.storage.v1.bucket_service_pb2 as bucket_service_pb2

# file: nebius/storage/v1/base.proto
# file: nebius/storage/v1/bucket_counters.proto
class CurrentBucketCounters(message_1.Message):
    _PB2_CLASS_ = bucket_counters_pb2.CurrentBucketCounters
    _pb2_base_: bucket_counters_pb2.CurrentBucketCounters
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        simple_objects_quantity: "builtins.int|None" = None,
        simple_objects_size: "builtins.int|None" = None,
        multipart_objects_quantity: "builtins.int|None" = None,
        multipart_objects_size: "builtins.int|None" = None,
        multipart_uploads_quantity: "builtins.int|None" = None,
        inflight_parts_quantity: "builtins.int|None" = None,
        inflight_parts_size: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if simple_objects_quantity is not None:
            self.simple_objects_quantity = simple_objects_quantity
        if simple_objects_size is not None:
            self.simple_objects_size = simple_objects_size
        if multipart_objects_quantity is not None:
            self.multipart_objects_quantity = multipart_objects_quantity
        if multipart_objects_size is not None:
            self.multipart_objects_size = multipart_objects_size
        if multipart_uploads_quantity is not None:
            self.multipart_uploads_quantity = multipart_uploads_quantity
        if inflight_parts_quantity is not None:
            self.inflight_parts_quantity = inflight_parts_quantity
        if inflight_parts_size is not None:
            self.inflight_parts_size = inflight_parts_size
    
    @property
    def simple_objects_quantity(self) -> "builtins.int":
        return super()._get_field("simple_objects_quantity", base=self._pb2_base_, explicit_presence=False,
        )
    @simple_objects_quantity.setter
    def simple_objects_quantity(self, value: "builtins.int") -> None:
        return super()._set_field("simple_objects_quantity",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def simple_objects_size(self) -> "builtins.int":
        return super()._get_field("simple_objects_size", base=self._pb2_base_, explicit_presence=False,
        )
    @simple_objects_size.setter
    def simple_objects_size(self, value: "builtins.int") -> None:
        return super()._set_field("simple_objects_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def multipart_objects_quantity(self) -> "builtins.int":
        return super()._get_field("multipart_objects_quantity", base=self._pb2_base_, explicit_presence=False,
        )
    @multipart_objects_quantity.setter
    def multipart_objects_quantity(self, value: "builtins.int") -> None:
        return super()._set_field("multipart_objects_quantity",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def multipart_objects_size(self) -> "builtins.int":
        return super()._get_field("multipart_objects_size", base=self._pb2_base_, explicit_presence=False,
        )
    @multipart_objects_size.setter
    def multipart_objects_size(self, value: "builtins.int") -> None:
        return super()._set_field("multipart_objects_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def multipart_uploads_quantity(self) -> "builtins.int":
        return super()._get_field("multipart_uploads_quantity", base=self._pb2_base_, explicit_presence=False,
        )
    @multipart_uploads_quantity.setter
    def multipart_uploads_quantity(self, value: "builtins.int") -> None:
        return super()._set_field("multipart_uploads_quantity",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def inflight_parts_quantity(self) -> "builtins.int":
        return super()._get_field("inflight_parts_quantity", base=self._pb2_base_, explicit_presence=False,
        )
    @inflight_parts_quantity.setter
    def inflight_parts_quantity(self, value: "builtins.int") -> None:
        return super()._set_field("inflight_parts_quantity",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def inflight_parts_size(self) -> "builtins.int":
        return super()._get_field("inflight_parts_size", base=self._pb2_base_, explicit_presence=False,
        )
    @inflight_parts_size.setter
    def inflight_parts_size(self, value: "builtins.int") -> None:
        return super()._set_field("inflight_parts_size",value, base=self._pb2_base_,explicit_presence=False)
    
class NonCurrentBucketCounters(message_1.Message):
    _PB2_CLASS_ = bucket_counters_pb2.NonCurrentBucketCounters
    _pb2_base_: bucket_counters_pb2.NonCurrentBucketCounters
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        simple_objects_quantity: "builtins.int|None" = None,
        simple_objects_size: "builtins.int|None" = None,
        multipart_objects_quantity: "builtins.int|None" = None,
        multipart_objects_size: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if simple_objects_quantity is not None:
            self.simple_objects_quantity = simple_objects_quantity
        if simple_objects_size is not None:
            self.simple_objects_size = simple_objects_size
        if multipart_objects_quantity is not None:
            self.multipart_objects_quantity = multipart_objects_quantity
        if multipart_objects_size is not None:
            self.multipart_objects_size = multipart_objects_size
    
    @property
    def simple_objects_quantity(self) -> "builtins.int":
        return super()._get_field("simple_objects_quantity", base=self._pb2_base_, explicit_presence=False,
        )
    @simple_objects_quantity.setter
    def simple_objects_quantity(self, value: "builtins.int") -> None:
        return super()._set_field("simple_objects_quantity",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def simple_objects_size(self) -> "builtins.int":
        return super()._get_field("simple_objects_size", base=self._pb2_base_, explicit_presence=False,
        )
    @simple_objects_size.setter
    def simple_objects_size(self, value: "builtins.int") -> None:
        return super()._set_field("simple_objects_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def multipart_objects_quantity(self) -> "builtins.int":
        return super()._get_field("multipart_objects_quantity", base=self._pb2_base_, explicit_presence=False,
        )
    @multipart_objects_quantity.setter
    def multipart_objects_quantity(self, value: "builtins.int") -> None:
        return super()._set_field("multipart_objects_quantity",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def multipart_objects_size(self) -> "builtins.int":
        return super()._get_field("multipart_objects_size", base=self._pb2_base_, explicit_presence=False,
        )
    @multipart_objects_size.setter
    def multipart_objects_size(self, value: "builtins.int") -> None:
        return super()._set_field("multipart_objects_size",value, base=self._pb2_base_,explicit_presence=False)
    
class BucketCounters(message_1.Message):
    _PB2_CLASS_ = bucket_counters_pb2.BucketCounters
    _pb2_base_: bucket_counters_pb2.BucketCounters
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        storage_class: "pb_enum.Enum|None" = None,
        counters: "CurrentBucketCounters|bucket_counters_pb2.CurrentBucketCounters|None" = None,
        non_current_counters: "NonCurrentBucketCounters|bucket_counters_pb2.NonCurrentBucketCounters|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if storage_class is not None:
            self.storage_class = storage_class
        if counters is not None:
            self.counters = counters
        if non_current_counters is not None:
            self.non_current_counters = non_current_counters
    
    @property
    def storage_class(self) -> "pb_enum.Enum":
        return super()._get_field("storage_class", base=self._pb2_base_, explicit_presence=False,
        )
    @storage_class.setter
    def storage_class(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("storage_class",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def counters(self) -> "CurrentBucketCounters|None":
        return super()._get_field("counters", base=self._pb2_base_, explicit_presence=True,
        wrap=CurrentBucketCounters,
        )
    @counters.setter
    def counters(self, value: "CurrentBucketCounters|bucket_counters_pb2.CurrentBucketCounters|None") -> None:
        return super()._set_field("counters",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def non_current_counters(self) -> "NonCurrentBucketCounters|None":
        return super()._get_field("non_current_counters", base=self._pb2_base_, explicit_presence=True,
        wrap=NonCurrentBucketCounters,
        )
    @non_current_counters.setter
    def non_current_counters(self, value: "NonCurrentBucketCounters|bucket_counters_pb2.NonCurrentBucketCounters|None") -> None:
        return super()._set_field("non_current_counters",value, base=self._pb2_base_,explicit_presence=True)
    
# file: nebius/storage/v1/lifecycle.proto
class LifecycleConfiguration(message_1.Message):
    _PB2_CLASS_ = lifecycle_pb2.LifecycleConfiguration
    _pb2_base_: lifecycle_pb2.LifecycleConfiguration
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        rules: "abc.MutableSequence[LifecycleRule]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if rules is not None:
            self.rules = rules
    
    @property
    def rules(self) -> "abc.MutableSequence[LifecycleRule]|None":
        return super()._get_field("rules", base=self._pb2_base_, explicit_presence=True,
        wrap=LifecycleRule,
        )
    @rules.setter
    def rules(self, value: "abc.MutableSequence[LifecycleRule]|None") -> None:
        return super()._set_field("rules",value, base=self._pb2_base_,explicit_presence=True)
    
class LifecycleRule(message_1.Message):
    _PB2_CLASS_ = lifecycle_pb2.LifecycleRule
    _pb2_base_: lifecycle_pb2.LifecycleRule
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        status: "pb_enum.Enum|None" = None,
        filter: "LifecycleFilter|lifecycle_pb2.LifecycleFilter|None" = None,
        expiration: "LifecycleExpiration|lifecycle_pb2.LifecycleExpiration|None" = None,
        noncurrent_version_expiration: "LifecycleNoncurrentVersionExpiration|lifecycle_pb2.LifecycleNoncurrentVersionExpiration|None" = None,
        abort_incomplete_multipart_upload: "LifecycleAbortIncompleteMultipartUpload|lifecycle_pb2.LifecycleAbortIncompleteMultipartUpload|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if filter is not None:
            self.filter = filter
        if expiration is not None:
            self.expiration = expiration
        if noncurrent_version_expiration is not None:
            self.noncurrent_version_expiration = noncurrent_version_expiration
        if abort_incomplete_multipart_upload is not None:
            self.abort_incomplete_multipart_upload = abort_incomplete_multipart_upload
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def status(self) -> "pb_enum.Enum":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=False,
        )
    @status.setter
    def status(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def filter(self) -> "LifecycleFilter|None":
        return super()._get_field("filter", base=self._pb2_base_, explicit_presence=True,
        wrap=LifecycleFilter,
        )
    @filter.setter
    def filter(self, value: "LifecycleFilter|lifecycle_pb2.LifecycleFilter|None") -> None:
        return super()._set_field("filter",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def expiration(self) -> "LifecycleExpiration|None":
        return super()._get_field("expiration", base=self._pb2_base_, explicit_presence=True,
        wrap=LifecycleExpiration,
        )
    @expiration.setter
    def expiration(self, value: "LifecycleExpiration|lifecycle_pb2.LifecycleExpiration|None") -> None:
        return super()._set_field("expiration",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def noncurrent_version_expiration(self) -> "LifecycleNoncurrentVersionExpiration|None":
        return super()._get_field("noncurrent_version_expiration", base=self._pb2_base_, explicit_presence=True,
        wrap=LifecycleNoncurrentVersionExpiration,
        )
    @noncurrent_version_expiration.setter
    def noncurrent_version_expiration(self, value: "LifecycleNoncurrentVersionExpiration|lifecycle_pb2.LifecycleNoncurrentVersionExpiration|None") -> None:
        return super()._set_field("noncurrent_version_expiration",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def abort_incomplete_multipart_upload(self) -> "LifecycleAbortIncompleteMultipartUpload|None":
        return super()._get_field("abort_incomplete_multipart_upload", base=self._pb2_base_, explicit_presence=True,
        wrap=LifecycleAbortIncompleteMultipartUpload,
        )
    @abort_incomplete_multipart_upload.setter
    def abort_incomplete_multipart_upload(self, value: "LifecycleAbortIncompleteMultipartUpload|lifecycle_pb2.LifecycleAbortIncompleteMultipartUpload|None") -> None:
        return super()._set_field("abort_incomplete_multipart_upload",value, base=self._pb2_base_,explicit_presence=True)
    
class LifecycleFilter(message_1.Message):
    _PB2_CLASS_ = lifecycle_pb2.LifecycleFilter
    _pb2_base_: lifecycle_pb2.LifecycleFilter
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        prefix: "builtins.str|None" = None,
        object_size_greater_than_bytes: "builtins.int|None" = None,
        object_size_less_than_bytes: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if prefix is not None:
            self.prefix = prefix
        if object_size_greater_than_bytes is not None:
            self.object_size_greater_than_bytes = object_size_greater_than_bytes
        if object_size_less_than_bytes is not None:
            self.object_size_less_than_bytes = object_size_less_than_bytes
    
    @property
    def prefix(self) -> "builtins.str":
        return super()._get_field("prefix", base=self._pb2_base_, explicit_presence=False,
        )
    @prefix.setter
    def prefix(self, value: "builtins.str") -> None:
        return super()._set_field("prefix",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def object_size_greater_than_bytes(self) -> "builtins.int":
        return super()._get_field("object_size_greater_than_bytes", base=self._pb2_base_, explicit_presence=False,
        )
    @object_size_greater_than_bytes.setter
    def object_size_greater_than_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("object_size_greater_than_bytes",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def object_size_less_than_bytes(self) -> "builtins.int":
        return super()._get_field("object_size_less_than_bytes", base=self._pb2_base_, explicit_presence=False,
        )
    @object_size_less_than_bytes.setter
    def object_size_less_than_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("object_size_less_than_bytes",value, base=self._pb2_base_,explicit_presence=False)
    
class LifecycleExpiration(message_1.Message):
    _PB2_CLASS_ = lifecycle_pb2.LifecycleExpiration
    _pb2_base_: lifecycle_pb2.LifecycleExpiration
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        date: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None" = None,
        days: "builtins.int|None" = None,
        expired_object_delete_marker: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if date is not None:
            self.date = date
        if days is not None:
            self.days = days
        if expired_object_delete_marker is not None:
            self.expired_object_delete_marker = expired_object_delete_marker
    
    @property
    def date(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("date", base=self._pb2_base_, explicit_presence=True,
        )
    @date.setter
    def date(self, value: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("date",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def days(self) -> "builtins.int|None":
        return super()._get_field("days", base=self._pb2_base_, explicit_presence=True,
        )
    @days.setter
    def days(self, value: "builtins.int|None") -> None:
        return super()._set_field("days",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def expired_object_delete_marker(self) -> "builtins.bool":
        return super()._get_field("expired_object_delete_marker", base=self._pb2_base_, explicit_presence=False,
        )
    @expired_object_delete_marker.setter
    def expired_object_delete_marker(self, value: "builtins.bool") -> None:
        return super()._set_field("expired_object_delete_marker",value, base=self._pb2_base_,explicit_presence=False)
    
class LifecycleNoncurrentVersionExpiration(message_1.Message):
    _PB2_CLASS_ = lifecycle_pb2.LifecycleNoncurrentVersionExpiration
    _pb2_base_: lifecycle_pb2.LifecycleNoncurrentVersionExpiration
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        newer_noncurrent_versions: "builtins.int|None" = None,
        noncurrent_days: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if newer_noncurrent_versions is not None:
            self.newer_noncurrent_versions = newer_noncurrent_versions
        if noncurrent_days is not None:
            self.noncurrent_days = noncurrent_days
    
    @property
    def newer_noncurrent_versions(self) -> "builtins.int|None":
        return super()._get_field("newer_noncurrent_versions", base=self._pb2_base_, explicit_presence=True,
        )
    @newer_noncurrent_versions.setter
    def newer_noncurrent_versions(self, value: "builtins.int|None") -> None:
        return super()._set_field("newer_noncurrent_versions",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def noncurrent_days(self) -> "builtins.int":
        return super()._get_field("noncurrent_days", base=self._pb2_base_, explicit_presence=False,
        )
    @noncurrent_days.setter
    def noncurrent_days(self, value: "builtins.int") -> None:
        return super()._set_field("noncurrent_days",value, base=self._pb2_base_,explicit_presence=False)
    
class LifecycleAbortIncompleteMultipartUpload(message_1.Message):
    _PB2_CLASS_ = lifecycle_pb2.LifecycleAbortIncompleteMultipartUpload
    _pb2_base_: lifecycle_pb2.LifecycleAbortIncompleteMultipartUpload
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        days_after_initiation: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if days_after_initiation is not None:
            self.days_after_initiation = days_after_initiation
    
    @property
    def days_after_initiation(self) -> "builtins.int":
        return super()._get_field("days_after_initiation", base=self._pb2_base_, explicit_presence=False,
        )
    @days_after_initiation.setter
    def days_after_initiation(self, value: "builtins.int") -> None:
        return super()._set_field("days_after_initiation",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/storage/v1/bucket.proto
class Bucket(message_1.Message):
    _PB2_CLASS_ = bucket_pb2.Bucket
    _pb2_base_: bucket_pb2.Bucket
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "BucketSpec|bucket_pb2.BucketSpec|None" = None,
        status: "BucketStatus|bucket_pb2.BucketStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "BucketSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=BucketSpec,
        )
    @spec.setter
    def spec(self, value: "BucketSpec|bucket_pb2.BucketSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "BucketStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=BucketStatus,
        )
    @status.setter
    def status(self, value: "BucketStatus|bucket_pb2.BucketStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class BucketSpec(message_1.Message):
    _PB2_CLASS_ = bucket_pb2.BucketSpec
    _pb2_base_: bucket_pb2.BucketSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        versioning_policy: "pb_enum.Enum|None" = None,
        max_size_bytes: "builtins.int|None" = None,
        lifecycle_configuration: "LifecycleConfiguration|lifecycle_pb2.LifecycleConfiguration|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if versioning_policy is not None:
            self.versioning_policy = versioning_policy
        if max_size_bytes is not None:
            self.max_size_bytes = max_size_bytes
        if lifecycle_configuration is not None:
            self.lifecycle_configuration = lifecycle_configuration
    
    @property
    def versioning_policy(self) -> "pb_enum.Enum":
        return super()._get_field("versioning_policy", base=self._pb2_base_, explicit_presence=False,
        )
    @versioning_policy.setter
    def versioning_policy(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("versioning_policy",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def max_size_bytes(self) -> "builtins.int":
        return super()._get_field("max_size_bytes", base=self._pb2_base_, explicit_presence=False,
        )
    @max_size_bytes.setter
    def max_size_bytes(self, value: "builtins.int") -> None:
        return super()._set_field("max_size_bytes",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def lifecycle_configuration(self) -> "LifecycleConfiguration|None":
        return super()._get_field("lifecycle_configuration", base=self._pb2_base_, explicit_presence=True,
        wrap=LifecycleConfiguration,
        )
    @lifecycle_configuration.setter
    def lifecycle_configuration(self, value: "LifecycleConfiguration|lifecycle_pb2.LifecycleConfiguration|None") -> None:
        return super()._set_field("lifecycle_configuration",value, base=self._pb2_base_,explicit_presence=True)
    
class BucketStatus(message_1.Message):
    _PB2_CLASS_ = bucket_pb2.BucketStatus
    _pb2_base_: bucket_pb2.BucketStatus
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        counters: "abc.MutableSequence[BucketCounters]|None" = None,
        state: "pb_enum.Enum|None" = None,
        suspension_state: "pb_enum.Enum|None" = None,
        deleted_at: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None" = None,
        purge_at: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if counters is not None:
            self.counters = counters
        if state is not None:
            self.state = state
        if suspension_state is not None:
            self.suspension_state = suspension_state
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if purge_at is not None:
            self.purge_at = purge_at
    
    @property
    def counters(self) -> "abc.MutableSequence[BucketCounters]|None":
        return super()._get_field("counters", base=self._pb2_base_, explicit_presence=True,
        wrap=BucketCounters,
        )
    @counters.setter
    def counters(self, value: "abc.MutableSequence[BucketCounters]|None") -> None:
        return super()._set_field("counters",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def state(self) -> "pb_enum.Enum":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        )
    @state.setter
    def state(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def suspension_state(self) -> "pb_enum.Enum":
        return super()._get_field("suspension_state", base=self._pb2_base_, explicit_presence=False,
        )
    @suspension_state.setter
    def suspension_state(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("suspension_state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def deleted_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("deleted_at", base=self._pb2_base_, explicit_presence=True,
        )
    @deleted_at.setter
    def deleted_at(self, value: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("deleted_at",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def purge_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("purge_at", base=self._pb2_base_, explicit_presence=True,
        )
    @purge_at.setter
    def purge_at(self, value: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("purge_at",value, base=self._pb2_base_,explicit_presence=True)
    
# file: nebius/storage/v1/bucket_service.proto
class GetBucketRequest(message_1.Message):
    _PB2_CLASS_ = bucket_service_pb2.GetBucketRequest
    _pb2_base_: bucket_service_pb2.GetBucketRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        with_deleted: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
        if with_deleted is not None:
            self.with_deleted = with_deleted
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def with_deleted(self) -> "builtins.bool":
        return super()._get_field("with_deleted", base=self._pb2_base_, explicit_presence=False,
        )
    @with_deleted.setter
    def with_deleted(self, value: "builtins.bool") -> None:
        return super()._set_field("with_deleted",value, base=self._pb2_base_,explicit_presence=False)
    
class GetBucketByNameRequest(message_1.Message):
    _PB2_CLASS_ = bucket_service_pb2.GetBucketByNameRequest
    _pb2_base_: bucket_service_pb2.GetBucketByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
        with_deleted: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
        if with_deleted is not None:
            self.with_deleted = with_deleted
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def with_deleted(self) -> "builtins.bool":
        return super()._get_field("with_deleted", base=self._pb2_base_, explicit_presence=False,
        )
    @with_deleted.setter
    def with_deleted(self, value: "builtins.bool") -> None:
        return super()._set_field("with_deleted",value, base=self._pb2_base_,explicit_presence=False)
    
class CreateBucketRequest(message_1.Message):
    _PB2_CLASS_ = bucket_service_pb2.CreateBucketRequest
    _pb2_base_: bucket_service_pb2.CreateBucketRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "BucketSpec|bucket_pb2.BucketSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "BucketSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=BucketSpec,
        )
    @spec.setter
    def spec(self, value: "BucketSpec|bucket_pb2.BucketSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class UpdateBucketRequest(message_1.Message):
    _PB2_CLASS_ = bucket_service_pb2.UpdateBucketRequest
    _pb2_base_: bucket_service_pb2.UpdateBucketRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "BucketSpec|bucket_pb2.BucketSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "BucketSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=BucketSpec,
        )
    @spec.setter
    def spec(self, value: "BucketSpec|bucket_pb2.BucketSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class DeleteBucketRequest(message_1.Message):
    _PB2_CLASS_ = bucket_service_pb2.DeleteBucketRequest
    _pb2_base_: bucket_service_pb2.DeleteBucketRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class ListBucketsRequest(message_1.Message):
    _PB2_CLASS_ = bucket_service_pb2.ListBucketsRequest
    _pb2_base_: bucket_service_pb2.ListBucketsRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
        with_deleted: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
        if with_deleted is not None:
            self.with_deleted = with_deleted
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", base=self._pb2_base_, explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def with_deleted(self) -> "builtins.bool":
        return super()._get_field("with_deleted", base=self._pb2_base_, explicit_presence=False,
        )
    @with_deleted.setter
    def with_deleted(self, value: "builtins.bool") -> None:
        return super()._set_field("with_deleted",value, base=self._pb2_base_,explicit_presence=False)
    
class ListBucketsResponse(message_1.Message):
    _PB2_CLASS_ = bucket_service_pb2.ListBucketsResponse
    _pb2_base_: bucket_service_pb2.ListBucketsResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Bucket]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Bucket]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Bucket,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Bucket]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=False)
    
