# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import google.protobuf.message as message_2
import builtins as builtins
import google.protobuf.timestamp_pb2 as timestamp_pb2
import collections.abc as abc

# file: nebius/common/v1/metadata.proto
class ResourceMetadata(message_1.Message):
    _PB2_CLASS_ = metadata_pb2.ResourceMetadata
    _pb2_base_: metadata_pb2.ResourceMetadata
    
    class LabelsEntry(message_1.Message):
        _PB2_CLASS_ = metadata_pb2.ResourceMetadata.LabelsEntry
        _pb2_base_: metadata_pb2.ResourceMetadata.LabelsEntry
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", base=self._pb2_base_, explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def value(self) -> "builtins.str":
            return super()._get_field("value", base=self._pb2_base_, explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.str") -> None:
            return super()._set_field("value",value, base=self._pb2_base_,explicit_presence=False)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
        resource_version: "builtins.int|None" = None,
        created_at: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None" = None,
        updated_at: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None" = None,
        labels: "abc.MutableMapping[builtins.str,builtins.str]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
        if resource_version is not None:
            self.resource_version = resource_version
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if labels is not None:
            self.labels = labels
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def resource_version(self) -> "builtins.int":
        return super()._get_field("resource_version", base=self._pb2_base_, explicit_presence=False,
        )
    @resource_version.setter
    def resource_version(self, value: "builtins.int") -> None:
        return super()._set_field("resource_version",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def created_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("created_at", base=self._pb2_base_, explicit_presence=True,
        )
    @created_at.setter
    def created_at(self, value: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("created_at",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def updated_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("updated_at", base=self._pb2_base_, explicit_presence=True,
        )
    @updated_at.setter
    def updated_at(self, value: "timestamp_pb2.Timestamp|timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("updated_at",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def labels(self) -> "abc.MutableMapping[builtins.str,builtins.str]|None":
        return super()._get_field("labels", base=self._pb2_base_, explicit_presence=True,
        wrap=ResourceMetadata.LabelsEntry,
        )
    @labels.setter
    def labels(self, value: "abc.MutableMapping[builtins.str,builtins.str]|None") -> None:
        return super()._set_field("labels",value, base=self._pb2_base_,explicit_presence=True)
    
class GetByNameRequest(message_1.Message):
    _PB2_CLASS_ = metadata_pb2.GetByNameRequest
    _pb2_base_: metadata_pb2.GetByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
