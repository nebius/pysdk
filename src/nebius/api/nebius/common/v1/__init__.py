# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import google.protobuf.message as message_2
import builtins as builtins
import google.protobuf.timestamp_pb2 as timestamp_pb2
import collections.abc as abc
import nebius.api.nebius.common.v1.operation_pb2 as operation_pb2
import google.protobuf.any_pb2 as any_pb2
import google.rpc.status_pb2 as status_pb2

# file: nebius/common/v1/metadata.proto
class ResourceMetadata(message_1.Message):
    _PB2_CLASS_ = metadata_pb2.ResourceMetadata
    
    class LabelsEntry(message_1.Message):
        _PB2_CLASS_ = metadata_pb2.ResourceMetadata.LabelsEntry
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message,self._PB2_CLASS_,".nebius.common.v1.ResourceMetadata.LabelsEntry",metadata_pb2.DESCRIPTOR)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value,explicit_presence=False)
        
        @property
        def value(self) -> "builtins.str":
            return super()._get_field("value", explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.str") -> None:
            return super()._set_field("value",value,explicit_presence=False)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
        resource_version: "builtins.int|None" = None,
        created_at: "timestamp_pb2.Timestamp|None" = None,
        updated_at: "timestamp_pb2.Timestamp|None" = None,
        labels: "abc.Mapping[builtins.str,builtins.str]|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.common.v1.ResourceMetadata",metadata_pb2.DESCRIPTOR)
        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
        if resource_version is not None:
            self.resource_version = resource_version
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if labels is not None:
            self.labels = labels
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False)
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False)
    
    @property
    def resource_version(self) -> "builtins.int":
        return super()._get_field("resource_version", explicit_presence=False,
        )
    @resource_version.setter
    def resource_version(self, value: "builtins.int") -> None:
        return super()._set_field("resource_version",value,explicit_presence=False)
    
    @property
    def created_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("created_at", explicit_presence=True,
        )
    @created_at.setter
    def created_at(self, value: "timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("created_at",value,explicit_presence=True)
    
    @property
    def updated_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("updated_at", explicit_presence=True,
        )
    @updated_at.setter
    def updated_at(self, value: "timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("updated_at",value,explicit_presence=True)
    
    @property
    def labels(self) -> "abc.MutableMapping[builtins.str,builtins.str]":
        return super()._get_field("labels", explicit_presence=False,
        wrap=ResourceMetadata.LabelsEntry,
        )
    @labels.setter
    def labels(self, value: "abc.Mapping[builtins.str,builtins.str]") -> None:
        return super()._set_field("labels",value,explicit_presence=False)
    
class GetByNameRequest(message_1.Message):
    _PB2_CLASS_ = metadata_pb2.GetByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.common.v1.GetByNameRequest",metadata_pb2.DESCRIPTOR)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False)
    
# file: nebius/common/v1/operation.proto
class Operation(message_1.Message):
    _PB2_CLASS_ = operation_pb2.Operation
    
    class RequestHeader(message_1.Message):
        _PB2_CLASS_ = operation_pb2.Operation.RequestHeader
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            values: "abc.Iterable[builtins.str]|None" = None,
        ) -> None:
            super().__init__(initial_message,self._PB2_CLASS_,".nebius.common.v1.Operation.RequestHeader",operation_pb2.DESCRIPTOR)
            if values is not None:
                self.values = values
        
        @property
        def values(self) -> "abc.MutableSequence[builtins.str]":
            return super()._get_field("values", explicit_presence=False,
            )
        @values.setter
        def values(self, value: "abc.Iterable[builtins.str]") -> None:
            return super()._set_field("values",value,explicit_presence=False)
        
    
    class RequestHeadersEntry(message_1.Message):
        _PB2_CLASS_ = operation_pb2.Operation.RequestHeadersEntry
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "Operation.RequestHeader|operation_pb2.Operation.RequestHeader|None" = None,
        ) -> None:
            super().__init__(initial_message,self._PB2_CLASS_,".nebius.common.v1.Operation.RequestHeadersEntry",operation_pb2.DESCRIPTOR)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value,explicit_presence=False)
        
        @property
        def value(self) -> "Operation.RequestHeader|None":
            return super()._get_field("value", explicit_presence=True,
            wrap=Operation.RequestHeader,
            )
        @value.setter
        def value(self, value: "Operation.RequestHeader|operation_pb2.Operation.RequestHeader|None") -> None:
            return super()._set_field("value",value,explicit_presence=True)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
        description: "builtins.str|None" = None,
        created_at: "timestamp_pb2.Timestamp|None" = None,
        created_by: "builtins.str|None" = None,
        finished_at: "timestamp_pb2.Timestamp|None" = None,
        request: "any_pb2.Any|None" = None,
        request_headers: "abc.Mapping[builtins.str,Operation.RequestHeader]|None" = None,
        resource_id: "builtins.str|None" = None,
        progress_data: "any_pb2.Any|None" = None,
        status: "status_pb2.Status|None" = None,
    ) -> None:
        super().__init__(initial_message,self._PB2_CLASS_,".nebius.common.v1.Operation",operation_pb2.DESCRIPTOR)
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if finished_at is not None:
            self.finished_at = finished_at
        if request is not None:
            self.request = request
        if request_headers is not None:
            self.request_headers = request_headers
        if resource_id is not None:
            self.resource_id = resource_id
        if progress_data is not None:
            self.progress_data = progress_data
        if status is not None:
            self.status = status
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False)
    
    @property
    def description(self) -> "builtins.str":
        return super()._get_field("description", explicit_presence=False,
        )
    @description.setter
    def description(self, value: "builtins.str") -> None:
        return super()._set_field("description",value,explicit_presence=False)
    
    @property
    def created_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("created_at", explicit_presence=True,
        )
    @created_at.setter
    def created_at(self, value: "timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("created_at",value,explicit_presence=True)
    
    @property
    def created_by(self) -> "builtins.str":
        return super()._get_field("created_by", explicit_presence=False,
        )
    @created_by.setter
    def created_by(self, value: "builtins.str") -> None:
        return super()._set_field("created_by",value,explicit_presence=False)
    
    @property
    def finished_at(self) -> "timestamp_pb2.Timestamp|None":
        return super()._get_field("finished_at", explicit_presence=True,
        )
    @finished_at.setter
    def finished_at(self, value: "timestamp_pb2.Timestamp|None") -> None:
        return super()._set_field("finished_at",value,explicit_presence=True)
    
    @property
    def request(self) -> "any_pb2.Any|None":
        return super()._get_field("request", explicit_presence=True,
        )
    @request.setter
    def request(self, value: "any_pb2.Any|None") -> None:
        return super()._set_field("request",value,explicit_presence=True)
    
    @property
    def request_headers(self) -> "abc.MutableMapping[builtins.str,Operation.RequestHeader]":
        return super()._get_field("request_headers", explicit_presence=False,
        wrap=Operation.RequestHeadersEntry,
        )
    @request_headers.setter
    def request_headers(self, value: "abc.Mapping[builtins.str,Operation.RequestHeader]") -> None:
        return super()._set_field("request_headers",value,explicit_presence=False)
    
    @property
    def resource_id(self) -> "builtins.str":
        return super()._get_field("resource_id", explicit_presence=False,
        )
    @resource_id.setter
    def resource_id(self, value: "builtins.str") -> None:
        return super()._set_field("resource_id",value,explicit_presence=False)
    
    @property
    def progress_data(self) -> "any_pb2.Any|None":
        return super()._get_field("progress_data", explicit_presence=True,
        )
    @progress_data.setter
    def progress_data(self, value: "any_pb2.Any|None") -> None:
        return super()._set_field("progress_data",value,explicit_presence=True)
    
    @property
    def status(self) -> "status_pb2.Status|None":
        return super()._get_field("status", explicit_presence=True,
        )
    @status.setter
    def status(self, value: "status_pb2.Status|None") -> None:
        return super()._set_field("status",value,explicit_presence=True)
    
