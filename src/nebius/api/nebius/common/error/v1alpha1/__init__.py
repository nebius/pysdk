# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.common.error.v1alpha1.common_errors_pb2 as common_errors_pb2
import google.protobuf.message as message_2
import builtins as builtins
import collections.abc as abc
import nebius.api.nebius.common.error.v1alpha1.error_pb2 as error_pb2
import nebius.base.protos.pb_enum as pb_enum

# file: nebius/common/error/v1alpha1/common_errors.proto
class BadRequest(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.BadRequest
    _pb2_base_: common_errors_pb2.BadRequest
    
    class Violation(message_1.Message):
        _PB2_CLASS_ = common_errors_pb2.BadRequest.Violation
        _pb2_base_: common_errors_pb2.BadRequest.Violation
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            field: "builtins.str|None" = None,
            message: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
            if field is not None:
                self.field = field
            if message is not None:
                self.message = message
        
        @property
        def field(self) -> "builtins.str":
            return super()._get_field("field", base=self._pb2_base_, explicit_presence=False,
            )
        @field.setter
        def field(self, value: "builtins.str") -> None:
            return super()._set_field("field",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def message(self) -> "builtins.str":
            return super()._get_field("message", base=self._pb2_base_, explicit_presence=False,
            )
        @message.setter
        def message(self, value: "builtins.str") -> None:
            return super()._set_field("message",value, base=self._pb2_base_,explicit_presence=False)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        violations: "abc.MutableSequence[BadRequest.Violation]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if violations is not None:
            self.violations = violations
    
    @property
    def violations(self) -> "abc.MutableSequence[BadRequest.Violation]|None":
        return super()._get_field("violations", base=self._pb2_base_, explicit_presence=True,
        wrap=BadRequest.Violation,
        )
    @violations.setter
    def violations(self, value: "abc.MutableSequence[BadRequest.Violation]|None") -> None:
        return super()._set_field("violations",value, base=self._pb2_base_,explicit_presence=True)
    
class BadResourceState(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.BadResourceState
    _pb2_base_: common_errors_pb2.BadResourceState
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        resource_id: "builtins.str|None" = None,
        message: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if resource_id is not None:
            self.resource_id = resource_id
        if message is not None:
            self.message = message
    
    @property
    def resource_id(self) -> "builtins.str":
        return super()._get_field("resource_id", base=self._pb2_base_, explicit_presence=False,
        )
    @resource_id.setter
    def resource_id(self, value: "builtins.str") -> None:
        return super()._set_field("resource_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def message(self) -> "builtins.str":
        return super()._get_field("message", base=self._pb2_base_, explicit_presence=False,
        )
    @message.setter
    def message(self, value: "builtins.str") -> None:
        return super()._set_field("message",value, base=self._pb2_base_,explicit_presence=False)
    
class ResourceNotFound(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.ResourceNotFound
    _pb2_base_: common_errors_pb2.ResourceNotFound
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        resource_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if resource_id is not None:
            self.resource_id = resource_id
    
    @property
    def resource_id(self) -> "builtins.str":
        return super()._get_field("resource_id", base=self._pb2_base_, explicit_presence=False,
        )
    @resource_id.setter
    def resource_id(self, value: "builtins.str") -> None:
        return super()._set_field("resource_id",value, base=self._pb2_base_,explicit_presence=False)
    
class ResourceAlreadyExists(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.ResourceAlreadyExists
    _pb2_base_: common_errors_pb2.ResourceAlreadyExists
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        resource_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if resource_id is not None:
            self.resource_id = resource_id
    
    @property
    def resource_id(self) -> "builtins.str":
        return super()._get_field("resource_id", base=self._pb2_base_, explicit_presence=False,
        )
    @resource_id.setter
    def resource_id(self, value: "builtins.str") -> None:
        return super()._set_field("resource_id",value, base=self._pb2_base_,explicit_presence=False)
    
class ResourceConflict(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.ResourceConflict
    _pb2_base_: common_errors_pb2.ResourceConflict
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        resource_id: "builtins.str|None" = None,
        message: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if resource_id is not None:
            self.resource_id = resource_id
        if message is not None:
            self.message = message
    
    @property
    def resource_id(self) -> "builtins.str":
        return super()._get_field("resource_id", base=self._pb2_base_, explicit_presence=False,
        )
    @resource_id.setter
    def resource_id(self, value: "builtins.str") -> None:
        return super()._set_field("resource_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def message(self) -> "builtins.str":
        return super()._get_field("message", base=self._pb2_base_, explicit_presence=False,
        )
    @message.setter
    def message(self, value: "builtins.str") -> None:
        return super()._set_field("message",value, base=self._pb2_base_,explicit_presence=False)
    
class OperationAborted(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.OperationAborted
    _pb2_base_: common_errors_pb2.OperationAborted
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        operation_id: "builtins.str|None" = None,
        aborted_by_operation_id: "builtins.str|None" = None,
        resource_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if operation_id is not None:
            self.operation_id = operation_id
        if aborted_by_operation_id is not None:
            self.aborted_by_operation_id = aborted_by_operation_id
        if resource_id is not None:
            self.resource_id = resource_id
    
    @property
    def operation_id(self) -> "builtins.str":
        return super()._get_field("operation_id", base=self._pb2_base_, explicit_presence=False,
        )
    @operation_id.setter
    def operation_id(self, value: "builtins.str") -> None:
        return super()._set_field("operation_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def aborted_by_operation_id(self) -> "builtins.str":
        return super()._get_field("aborted_by_operation_id", base=self._pb2_base_, explicit_presence=False,
        )
    @aborted_by_operation_id.setter
    def aborted_by_operation_id(self, value: "builtins.str") -> None:
        return super()._set_field("aborted_by_operation_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def resource_id(self) -> "builtins.str":
        return super()._get_field("resource_id", base=self._pb2_base_, explicit_presence=False,
        )
    @resource_id.setter
    def resource_id(self, value: "builtins.str") -> None:
        return super()._set_field("resource_id",value, base=self._pb2_base_,explicit_presence=False)
    
class OutOfRange(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.OutOfRange
    _pb2_base_: common_errors_pb2.OutOfRange
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        requested: "builtins.str|None" = None,
        limit: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if requested is not None:
            self.requested = requested
        if limit is not None:
            self.limit = limit
    
    @property
    def requested(self) -> "builtins.str":
        return super()._get_field("requested", base=self._pb2_base_, explicit_presence=False,
        )
    @requested.setter
    def requested(self, value: "builtins.str") -> None:
        return super()._set_field("requested",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def limit(self) -> "builtins.str":
        return super()._get_field("limit", base=self._pb2_base_, explicit_presence=False,
        )
    @limit.setter
    def limit(self, value: "builtins.str") -> None:
        return super()._set_field("limit",value, base=self._pb2_base_,explicit_presence=False)
    
class PermissionDenied(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.PermissionDenied
    _pb2_base_: common_errors_pb2.PermissionDenied
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        resource_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if resource_id is not None:
            self.resource_id = resource_id
    
    @property
    def resource_id(self) -> "builtins.str":
        return super()._get_field("resource_id", base=self._pb2_base_, explicit_presence=False,
        )
    @resource_id.setter
    def resource_id(self, value: "builtins.str") -> None:
        return super()._set_field("resource_id",value, base=self._pb2_base_,explicit_presence=False)
    
class InternalError(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.InternalError
    _pb2_base_: common_errors_pb2.InternalError
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        request_id: "builtins.str|None" = None,
        trace_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if request_id is not None:
            self.request_id = request_id
        if trace_id is not None:
            self.trace_id = trace_id
    
    @property
    def request_id(self) -> "builtins.str":
        return super()._get_field("request_id", base=self._pb2_base_, explicit_presence=False,
        )
    @request_id.setter
    def request_id(self, value: "builtins.str") -> None:
        return super()._set_field("request_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def trace_id(self) -> "builtins.str":
        return super()._get_field("trace_id", base=self._pb2_base_, explicit_presence=False,
        )
    @trace_id.setter
    def trace_id(self, value: "builtins.str") -> None:
        return super()._set_field("trace_id",value, base=self._pb2_base_,explicit_presence=False)
    
class TooManyRequests(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.TooManyRequests
    _pb2_base_: common_errors_pb2.TooManyRequests
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        violation: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if violation is not None:
            self.violation = violation
    
    @property
    def violation(self) -> "builtins.str":
        return super()._get_field("violation", base=self._pb2_base_, explicit_presence=False,
        )
    @violation.setter
    def violation(self, value: "builtins.str") -> None:
        return super()._set_field("violation",value, base=self._pb2_base_,explicit_presence=False)
    
class QuotaFailure(message_1.Message):
    _PB2_CLASS_ = common_errors_pb2.QuotaFailure
    _pb2_base_: common_errors_pb2.QuotaFailure
    
    class Violation(message_1.Message):
        _PB2_CLASS_ = common_errors_pb2.QuotaFailure.Violation
        _pb2_base_: common_errors_pb2.QuotaFailure.Violation
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            quota: "builtins.str|None" = None,
            message: "builtins.str|None" = None,
            limit: "builtins.str|None" = None,
            requested: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
            if quota is not None:
                self.quota = quota
            if message is not None:
                self.message = message
            if limit is not None:
                self.limit = limit
            if requested is not None:
                self.requested = requested
        
        @property
        def quota(self) -> "builtins.str":
            return super()._get_field("quota", base=self._pb2_base_, explicit_presence=False,
            )
        @quota.setter
        def quota(self, value: "builtins.str") -> None:
            return super()._set_field("quota",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def message(self) -> "builtins.str":
            return super()._get_field("message", base=self._pb2_base_, explicit_presence=False,
            )
        @message.setter
        def message(self, value: "builtins.str") -> None:
            return super()._set_field("message",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def limit(self) -> "builtins.str":
            return super()._get_field("limit", base=self._pb2_base_, explicit_presence=False,
            )
        @limit.setter
        def limit(self, value: "builtins.str") -> None:
            return super()._set_field("limit",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def requested(self) -> "builtins.str":
            return super()._get_field("requested", base=self._pb2_base_, explicit_presence=False,
            )
        @requested.setter
        def requested(self, value: "builtins.str") -> None:
            return super()._set_field("requested",value, base=self._pb2_base_,explicit_presence=False)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        violations: "abc.MutableSequence[QuotaFailure.Violation]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if violations is not None:
            self.violations = violations
    
    @property
    def violations(self) -> "abc.MutableSequence[QuotaFailure.Violation]|None":
        return super()._get_field("violations", base=self._pb2_base_, explicit_presence=True,
        wrap=QuotaFailure.Violation,
        )
    @violations.setter
    def violations(self, value: "abc.MutableSequence[QuotaFailure.Violation]|None") -> None:
        return super()._set_field("violations",value, base=self._pb2_base_,explicit_presence=True)
    
# file: nebius/common/error/v1alpha1/error.proto
class ServiceError(message_1.Message):
    _PB2_CLASS_ = error_pb2.ServiceError
    _pb2_base_: error_pb2.ServiceError
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        service: "builtins.str|None" = None,
        code: "builtins.str|None" = None,
        bad_request: "BadRequest|common_errors_pb2.BadRequest|None" = None,
        bad_resource_state: "BadResourceState|common_errors_pb2.BadResourceState|None" = None,
        resource_not_found: "ResourceNotFound|common_errors_pb2.ResourceNotFound|None" = None,
        resource_already_exists: "ResourceAlreadyExists|common_errors_pb2.ResourceAlreadyExists|None" = None,
        out_of_range: "OutOfRange|common_errors_pb2.OutOfRange|None" = None,
        permission_denied: "PermissionDenied|common_errors_pb2.PermissionDenied|None" = None,
        resource_conflict: "ResourceConflict|common_errors_pb2.ResourceConflict|None" = None,
        operation_aborted: "OperationAborted|common_errors_pb2.OperationAborted|None" = None,
        too_many_requests: "TooManyRequests|common_errors_pb2.TooManyRequests|None" = None,
        quota_failure: "QuotaFailure|common_errors_pb2.QuotaFailure|None" = None,
        internal_error: "InternalError|common_errors_pb2.InternalError|None" = None,
        retry_type: "pb_enum.Enum|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if service is not None:
            self.service = service
        if code is not None:
            self.code = code
        if bad_request is not None:
            self.bad_request = bad_request
        if bad_resource_state is not None:
            self.bad_resource_state = bad_resource_state
        if resource_not_found is not None:
            self.resource_not_found = resource_not_found
        if resource_already_exists is not None:
            self.resource_already_exists = resource_already_exists
        if out_of_range is not None:
            self.out_of_range = out_of_range
        if permission_denied is not None:
            self.permission_denied = permission_denied
        if resource_conflict is not None:
            self.resource_conflict = resource_conflict
        if operation_aborted is not None:
            self.operation_aborted = operation_aborted
        if too_many_requests is not None:
            self.too_many_requests = too_many_requests
        if quota_failure is not None:
            self.quota_failure = quota_failure
        if internal_error is not None:
            self.internal_error = internal_error
        if retry_type is not None:
            self.retry_type = retry_type
    
    @property
    def service(self) -> "builtins.str":
        return super()._get_field("service", base=self._pb2_base_, explicit_presence=False,
        )
    @service.setter
    def service(self, value: "builtins.str") -> None:
        return super()._set_field("service",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def code(self) -> "builtins.str":
        return super()._get_field("code", base=self._pb2_base_, explicit_presence=False,
        )
    @code.setter
    def code(self, value: "builtins.str") -> None:
        return super()._set_field("code",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def bad_request(self) -> "BadRequest|None":
        return super()._get_field("bad_request", base=self._pb2_base_, explicit_presence=True,
        wrap=BadRequest,
        )
    @bad_request.setter
    def bad_request(self, value: "BadRequest|common_errors_pb2.BadRequest|None") -> None:
        return super()._set_field("bad_request",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def bad_resource_state(self) -> "BadResourceState|None":
        return super()._get_field("bad_resource_state", base=self._pb2_base_, explicit_presence=True,
        wrap=BadResourceState,
        )
    @bad_resource_state.setter
    def bad_resource_state(self, value: "BadResourceState|common_errors_pb2.BadResourceState|None") -> None:
        return super()._set_field("bad_resource_state",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def resource_not_found(self) -> "ResourceNotFound|None":
        return super()._get_field("resource_not_found", base=self._pb2_base_, explicit_presence=True,
        wrap=ResourceNotFound,
        )
    @resource_not_found.setter
    def resource_not_found(self, value: "ResourceNotFound|common_errors_pb2.ResourceNotFound|None") -> None:
        return super()._set_field("resource_not_found",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def resource_already_exists(self) -> "ResourceAlreadyExists|None":
        return super()._get_field("resource_already_exists", base=self._pb2_base_, explicit_presence=True,
        wrap=ResourceAlreadyExists,
        )
    @resource_already_exists.setter
    def resource_already_exists(self, value: "ResourceAlreadyExists|common_errors_pb2.ResourceAlreadyExists|None") -> None:
        return super()._set_field("resource_already_exists",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def out_of_range(self) -> "OutOfRange|None":
        return super()._get_field("out_of_range", base=self._pb2_base_, explicit_presence=True,
        wrap=OutOfRange,
        )
    @out_of_range.setter
    def out_of_range(self, value: "OutOfRange|common_errors_pb2.OutOfRange|None") -> None:
        return super()._set_field("out_of_range",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def permission_denied(self) -> "PermissionDenied|None":
        return super()._get_field("permission_denied", base=self._pb2_base_, explicit_presence=True,
        wrap=PermissionDenied,
        )
    @permission_denied.setter
    def permission_denied(self, value: "PermissionDenied|common_errors_pb2.PermissionDenied|None") -> None:
        return super()._set_field("permission_denied",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def resource_conflict(self) -> "ResourceConflict|None":
        return super()._get_field("resource_conflict", base=self._pb2_base_, explicit_presence=True,
        wrap=ResourceConflict,
        )
    @resource_conflict.setter
    def resource_conflict(self, value: "ResourceConflict|common_errors_pb2.ResourceConflict|None") -> None:
        return super()._set_field("resource_conflict",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def operation_aborted(self) -> "OperationAborted|None":
        return super()._get_field("operation_aborted", base=self._pb2_base_, explicit_presence=True,
        wrap=OperationAborted,
        )
    @operation_aborted.setter
    def operation_aborted(self, value: "OperationAborted|common_errors_pb2.OperationAborted|None") -> None:
        return super()._set_field("operation_aborted",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def too_many_requests(self) -> "TooManyRequests|None":
        return super()._get_field("too_many_requests", base=self._pb2_base_, explicit_presence=True,
        wrap=TooManyRequests,
        )
    @too_many_requests.setter
    def too_many_requests(self, value: "TooManyRequests|common_errors_pb2.TooManyRequests|None") -> None:
        return super()._set_field("too_many_requests",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def quota_failure(self) -> "QuotaFailure|None":
        return super()._get_field("quota_failure", base=self._pb2_base_, explicit_presence=True,
        wrap=QuotaFailure,
        )
    @quota_failure.setter
    def quota_failure(self, value: "QuotaFailure|common_errors_pb2.QuotaFailure|None") -> None:
        return super()._set_field("quota_failure",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def internal_error(self) -> "InternalError|None":
        return super()._get_field("internal_error", base=self._pb2_base_, explicit_presence=True,
        wrap=InternalError,
        )
    @internal_error.setter
    def internal_error(self, value: "InternalError|common_errors_pb2.InternalError|None") -> None:
        return super()._set_field("internal_error",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def retry_type(self) -> "pb_enum.Enum":
        return super()._get_field("retry_type", base=self._pb2_base_, explicit_presence=False,
        )
    @retry_type.setter
    def retry_type(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("retry_type",value, base=self._pb2_base_,explicit_presence=False)
    
