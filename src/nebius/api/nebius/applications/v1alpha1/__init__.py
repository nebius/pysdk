# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.applications.v1alpha1.k8s_release_pb2 as k8s_release_pb2
import google.protobuf.message as message_2
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import builtins as builtins
import collections.abc as abc
import nebius.base.protos.pb_enum as pb_enum
import nebius.api.nebius.applications.v1alpha1.k8s_release_service_pb2 as k8s_release_service_pb2

# file: nebius/applications/v1alpha1/k8s_release.proto
class K8sRelease(message_1.Message):
    _PB2_CLASS_ = k8s_release_pb2.K8sRelease
    _pb2_base_: k8s_release_pb2.K8sRelease
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "K8sReleaseSpec|k8s_release_pb2.K8sReleaseSpec|None" = None,
        status: "K8sReleaseStatus|k8s_release_pb2.K8sReleaseStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "K8sReleaseSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=K8sReleaseSpec,
        )
    @spec.setter
    def spec(self, value: "K8sReleaseSpec|k8s_release_pb2.K8sReleaseSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "K8sReleaseStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=K8sReleaseStatus,
        )
    @status.setter
    def status(self, value: "K8sReleaseStatus|k8s_release_pb2.K8sReleaseStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class K8sReleaseSpec(message_1.Message):
    _PB2_CLASS_ = k8s_release_pb2.K8sReleaseSpec
    _pb2_base_: k8s_release_pb2.K8sReleaseSpec
    
    class SetEntry(message_1.Message):
        _PB2_CLASS_ = k8s_release_pb2.K8sReleaseSpec.SetEntry
        _pb2_base_: k8s_release_pb2.K8sReleaseSpec.SetEntry
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", base=self._pb2_base_, explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def value(self) -> "builtins.str":
            return super()._get_field("value", base=self._pb2_base_, explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.str") -> None:
            return super()._set_field("value",value, base=self._pb2_base_,explicit_presence=False)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        cluster_id: "builtins.str|None" = None,
        product_slug: "builtins.str|None" = None,
        namespace: "builtins.str|None" = None,
        application_name: "builtins.str|None" = None,
        values: "builtins.str|None" = None,
        set: "abc.MutableMapping[builtins.str,builtins.str]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if product_slug is not None:
            self.product_slug = product_slug
        if namespace is not None:
            self.namespace = namespace
        if application_name is not None:
            self.application_name = application_name
        if values is not None:
            self.values = values
        if set is not None:
            self.set = set
    
    @property
    def cluster_id(self) -> "builtins.str":
        return super()._get_field("cluster_id", base=self._pb2_base_, explicit_presence=False,
        )
    @cluster_id.setter
    def cluster_id(self, value: "builtins.str") -> None:
        return super()._set_field("cluster_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def product_slug(self) -> "builtins.str":
        return super()._get_field("product_slug", base=self._pb2_base_, explicit_presence=False,
        )
    @product_slug.setter
    def product_slug(self, value: "builtins.str") -> None:
        return super()._set_field("product_slug",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def namespace(self) -> "builtins.str":
        return super()._get_field("namespace", base=self._pb2_base_, explicit_presence=False,
        )
    @namespace.setter
    def namespace(self, value: "builtins.str") -> None:
        return super()._set_field("namespace",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def application_name(self) -> "builtins.str":
        return super()._get_field("application_name", base=self._pb2_base_, explicit_presence=False,
        )
    @application_name.setter
    def application_name(self, value: "builtins.str") -> None:
        return super()._set_field("application_name",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def values(self) -> "builtins.str":
        return super()._get_field("values", base=self._pb2_base_, explicit_presence=False,
        )
    @values.setter
    def values(self, value: "builtins.str") -> None:
        return super()._set_field("values",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def set(self) -> "abc.MutableMapping[builtins.str,builtins.str]|None":
        return super()._get_field("set", base=self._pb2_base_, explicit_presence=True,
        wrap=K8sReleaseSpec.SetEntry,
        )
    @set.setter
    def set(self, value: "abc.MutableMapping[builtins.str,builtins.str]|None") -> None:
        return super()._set_field("set",value, base=self._pb2_base_,explicit_presence=True)
    
class K8sReleaseStatus(message_1.Message):
    _PB2_CLASS_ = k8s_release_pb2.K8sReleaseStatus
    _pb2_base_: k8s_release_pb2.K8sReleaseStatus
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        state: "pb_enum.Enum|None" = None,
        error_message: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if state is not None:
            self.state = state
        if error_message is not None:
            self.error_message = error_message
    
    @property
    def state(self) -> "pb_enum.Enum":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        )
    @state.setter
    def state(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def error_message(self) -> "builtins.str":
        return super()._get_field("error_message", base=self._pb2_base_, explicit_presence=False,
        )
    @error_message.setter
    def error_message(self, value: "builtins.str") -> None:
        return super()._set_field("error_message",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/applications/v1alpha1/k8s_release_service.proto
class GetK8sReleaseRequest(message_1.Message):
    _PB2_CLASS_ = k8s_release_service_pb2.GetK8sReleaseRequest
    _pb2_base_: k8s_release_service_pb2.GetK8sReleaseRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class ListK8sReleasesRequest(message_1.Message):
    _PB2_CLASS_ = k8s_release_service_pb2.ListK8sReleasesRequest
    _pb2_base_: k8s_release_service_pb2.ListK8sReleasesRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
        filter: "builtins.str|None" = None,
        cluster_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter
        if cluster_id is not None:
            self.cluster_id = cluster_id
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def filter(self) -> "builtins.str":
        return super()._get_field("filter", base=self._pb2_base_, explicit_presence=False,
        )
    @filter.setter
    def filter(self, value: "builtins.str") -> None:
        return super()._set_field("filter",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def cluster_id(self) -> "builtins.str":
        return super()._get_field("cluster_id", base=self._pb2_base_, explicit_presence=False,
        )
    @cluster_id.setter
    def cluster_id(self, value: "builtins.str") -> None:
        return super()._set_field("cluster_id",value, base=self._pb2_base_,explicit_presence=False)
    
class CreateK8sReleaseRequest(message_1.Message):
    _PB2_CLASS_ = k8s_release_service_pb2.CreateK8sReleaseRequest
    _pb2_base_: k8s_release_service_pb2.CreateK8sReleaseRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "K8sReleaseSpec|k8s_release_pb2.K8sReleaseSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "K8sReleaseSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=K8sReleaseSpec,
        )
    @spec.setter
    def spec(self, value: "K8sReleaseSpec|k8s_release_pb2.K8sReleaseSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class DeleteK8sReleaseRequest(message_1.Message):
    _PB2_CLASS_ = k8s_release_service_pb2.DeleteK8sReleaseRequest
    _pb2_base_: k8s_release_service_pb2.DeleteK8sReleaseRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class ListK8sReleasesResponse(message_1.Message):
    _PB2_CLASS_ = k8s_release_service_pb2.ListK8sReleasesResponse
    _pb2_base_: k8s_release_service_pb2.ListK8sReleasesResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[K8sRelease]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[K8sRelease]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=K8sRelease,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[K8sRelease]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=False)
    
