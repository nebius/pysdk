# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_enum as pb_enum
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import nebius.api.nebius.logging.v1.agentmanager.version_service_pb2 as version_service_pb2
import nebius.base.protos.pb_classes as pb_classes
import google.protobuf.message as message
import builtins as builtins
import google.protobuf.duration_pb2 as duration_pb2
import datetime as datetime
import collections.abc as abc
import nebius.base.protos.well_known as well_known
import typing as typing
import nebius.aio.client as client
import grpc as grpc
import nebius.aio.request as request
#@ local imports here @#

# file: nebius/logging/v1/agentmanager/version_service.proto
class AgentType(pb_enum.Enum):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.logging.agentmanager.v1.AgentType",version_service_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    AGENT_UNDEFINED = 0
    O11Y_AGENT = 1

class AgentState(pb_enum.Enum):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.logging.agentmanager.v1.AgentState",version_service_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    STATE_UNDEFINED = 0
    STATE_HEALTHY = 1
    STATE_ERROR = 2

class Action(pb_enum.Enum):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.logging.agentmanager.v1.Action",version_service_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    ACTION_UNDEFINED = 0
    NOP = 1
    UPDATE = 2
    RESTART = 3

class GetVersionRequest(pb_classes.Message):
    __PB2_CLASS__ = version_service_pb2.GetVersionRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.logging.agentmanager.v1.GetVersionRequest",version_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message.Message|None = None,
        *,
        type: "AgentType|version_service_pb2.AgentType|None" = None,
        agent_version: "builtins.str|None" = None,
        updater_version: "builtins.str|None" = None,
        parent_id: "builtins.str|None" = None,
        instance_id: "builtins.str|None" = None,
        os_info: "OSInfo|version_service_pb2.OSInfo|None" = None,
        agent_state: "AgentState|version_service_pb2.AgentState|None" = None,
        agent_uptime: "duration_pb2.Duration|datetime.timedelta|None" = None,
        system_uptime: "duration_pb2.Duration|datetime.timedelta|None" = None,
        updater_uptime: "duration_pb2.Duration|datetime.timedelta|None" = None,
        agent_state_messages: "abc.Iterable[builtins.str]|None" = None,
        last_update_error: "builtins.str|None" = None,
        mk8s_cluster_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if type is not None:
            self.type = type
        if agent_version is not None:
            self.agent_version = agent_version
        if updater_version is not None:
            self.updater_version = updater_version
        if parent_id is not None:
            self.parent_id = parent_id
        if instance_id is not None:
            self.instance_id = instance_id
        if os_info is not None:
            self.os_info = os_info
        if agent_state is not None:
            self.agent_state = agent_state
        if agent_uptime is not None:
            self.agent_uptime = agent_uptime
        if system_uptime is not None:
            self.system_uptime = system_uptime
        if updater_uptime is not None:
            self.updater_uptime = updater_uptime
        if agent_state_messages is not None:
            self.agent_state_messages = agent_state_messages
        if last_update_error is not None:
            self.last_update_error = last_update_error
        if mk8s_cluster_id is not None:
            self.mk8s_cluster_id = mk8s_cluster_id
    
    @builtins.property
    def type(self) -> "AgentType":
        return super()._get_field("type", explicit_presence=False,
        wrap=AgentType,
        )
    @type.setter
    def type(self, value: "AgentType|version_service_pb2.AgentType") -> None:
        return super()._set_field("type",value,explicit_presence=False,
        )
    
    @builtins.property
    def agent_version(self) -> "builtins.str":
        return super()._get_field("agent_version", explicit_presence=False,
        )
    @agent_version.setter
    def agent_version(self, value: "builtins.str") -> None:
        return super()._set_field("agent_version",value,explicit_presence=False,
        )
    
    @builtins.property
    def updater_version(self) -> "builtins.str":
        return super()._get_field("updater_version", explicit_presence=False,
        )
    @updater_version.setter
    def updater_version(self, value: "builtins.str") -> None:
        return super()._set_field("updater_version",value,explicit_presence=False,
        )
    
    @builtins.property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @builtins.property
    def instance_id(self) -> "builtins.str":
        return super()._get_field("instance_id", explicit_presence=False,
        )
    @instance_id.setter
    def instance_id(self, value: "builtins.str") -> None:
        return super()._set_field("instance_id",value,explicit_presence=False,
        )
    
    @builtins.property
    def os_info(self) -> "OSInfo":
        return super()._get_field("os_info", explicit_presence=False,
        wrap=OSInfo,
        )
    @os_info.setter
    def os_info(self, value: "OSInfo|version_service_pb2.OSInfo") -> None:
        return super()._set_field("os_info",value,explicit_presence=False,
        )
    
    @builtins.property
    def agent_state(self) -> "AgentState":
        return super()._get_field("agent_state", explicit_presence=False,
        wrap=AgentState,
        )
    @agent_state.setter
    def agent_state(self, value: "AgentState|version_service_pb2.AgentState") -> None:
        return super()._set_field("agent_state",value,explicit_presence=False,
        )
    
    @builtins.property
    def agent_uptime(self) -> "datetime.timedelta|None":
        return super()._get_field("agent_uptime", explicit_presence=True,
        wrap=well_known.from_duration
        )
    @agent_uptime.setter
    def agent_uptime(self, value: "duration_pb2.Duration|datetime.timedelta|None") -> None:
        return super()._set_field("agent_uptime",value,explicit_presence=True,
        unwrap=well_known.to_duration
        )
    
    @builtins.property
    def system_uptime(self) -> "datetime.timedelta|None":
        return super()._get_field("system_uptime", explicit_presence=True,
        wrap=well_known.from_duration
        )
    @system_uptime.setter
    def system_uptime(self, value: "duration_pb2.Duration|datetime.timedelta|None") -> None:
        return super()._set_field("system_uptime",value,explicit_presence=True,
        unwrap=well_known.to_duration
        )
    
    @builtins.property
    def updater_uptime(self) -> "datetime.timedelta|None":
        return super()._get_field("updater_uptime", explicit_presence=True,
        wrap=well_known.from_duration
        )
    @updater_uptime.setter
    def updater_uptime(self, value: "duration_pb2.Duration|datetime.timedelta|None") -> None:
        return super()._set_field("updater_uptime",value,explicit_presence=True,
        unwrap=well_known.to_duration
        )
    
    @builtins.property
    def agent_state_messages(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("agent_state_messages", explicit_presence=False,
        wrap=pb_classes.Repeated,
        )
    @agent_state_messages.setter
    def agent_state_messages(self, value: "abc.Iterable[builtins.str]") -> None:
        return super()._set_field("agent_state_messages",value,explicit_presence=False,
        )
    
    @builtins.property
    def last_update_error(self) -> "builtins.str":
        return super()._get_field("last_update_error", explicit_presence=False,
        )
    @last_update_error.setter
    def last_update_error(self, value: "builtins.str") -> None:
        return super()._set_field("last_update_error",value,explicit_presence=False,
        )
    
    @builtins.property
    def mk8s_cluster_id(self) -> "builtins.str":
        return super()._get_field("mk8s_cluster_id", explicit_presence=False,
        )
    @mk8s_cluster_id.setter
    def mk8s_cluster_id(self, value: "builtins.str") -> None:
        return super()._set_field("mk8s_cluster_id",value,explicit_presence=False,
        )
    
class OSInfo(pb_classes.Message):
    __PB2_CLASS__ = version_service_pb2.OSInfo
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.logging.agentmanager.v1.OSInfo",version_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message.Message|None = None,
        *,
        name: "builtins.str|None" = None,
        uname: "builtins.str|None" = None,
        architecture: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if name is not None:
            self.name = name
        if uname is not None:
            self.uname = uname
        if architecture is not None:
            self.architecture = architecture
    
    @builtins.property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False,
        )
    
    @builtins.property
    def uname(self) -> "builtins.str":
        return super()._get_field("uname", explicit_presence=False,
        )
    @uname.setter
    def uname(self, value: "builtins.str") -> None:
        return super()._set_field("uname",value,explicit_presence=False,
        )
    
    @builtins.property
    def architecture(self) -> "builtins.str":
        return super()._get_field("architecture", explicit_presence=False,
        )
    @architecture.setter
    def architecture(self, value: "builtins.str") -> None:
        return super()._set_field("architecture",value,explicit_presence=False,
        )
    
class GetVersionResponse(pb_classes.Message):
    __PB2_CLASS__ = version_service_pb2.GetVersionResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.logging.agentmanager.v1.GetVersionResponse",version_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class __OneOfClass_response__(pb_classes.OneOf):
        name: builtins.str= "response"
        
        def __init__(self, msg: "GetVersionResponse") -> None:
            super().__init__()
            self._message: "GetVersionResponse" = msg
    
    class __OneOfClass_response_nop__(__OneOfClass_response__):
        field: typing.Literal["nop"] = "nop"
        
        def __init__(self, msg: "GetVersionResponse") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "NopActionParams":
            return self._message.nop
    
    class __OneOfClass_response_update__(__OneOfClass_response__):
        field: typing.Literal["update"] = "update"
        
        def __init__(self, msg: "GetVersionResponse") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "UpdateActionParams":
            return self._message.update
    
    class __OneOfClass_response_restart__(__OneOfClass_response__):
        field: typing.Literal["restart"] = "restart"
        
        def __init__(self, msg: "GetVersionResponse") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "RestartActionParams":
            return self._message.restart
    
    @builtins.property
    def response(self) -> __OneOfClass_response_nop__|__OneOfClass_response_update__|__OneOfClass_response_restart__|None:
        field_name: str|None = super().which_field_in_oneof("response")
        match field_name:
            case "nop":
                return self.__OneOfClass_response_nop__(self)
            case "update":
                return self.__OneOfClass_response_update__(self)
            case "restart":
                return self.__OneOfClass_response_restart__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name)
    
    def __init__(
        self,
        initial_message: message.Message|None = None,
        *,
        action: "Action|version_service_pb2.Action|None" = None,
        nop: "NopActionParams|version_service_pb2.NopActionParams|None" = None,
        update: "UpdateActionParams|version_service_pb2.UpdateActionParams|None" = None,
        restart: "RestartActionParams|version_service_pb2.RestartActionParams|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if action is not None:
            self.action = action
        if nop is not None:
            self.nop = nop
        if update is not None:
            self.update = update
        if restart is not None:
            self.restart = restart
    
    @builtins.property
    def action(self) -> "Action":
        return super()._get_field("action", explicit_presence=False,
        wrap=Action,
        )
    @action.setter
    def action(self, value: "Action|version_service_pb2.Action") -> None:
        return super()._set_field("action",value,explicit_presence=False,
        )
    
    @builtins.property
    def nop(self) -> "NopActionParams":
        return super()._get_field("nop", explicit_presence=False,
        wrap=NopActionParams,
        )
    @nop.setter
    def nop(self, value: "NopActionParams|version_service_pb2.NopActionParams") -> None:
        return super()._set_field("nop",value,explicit_presence=False,
        )
    
    @builtins.property
    def update(self) -> "UpdateActionParams":
        return super()._get_field("update", explicit_presence=False,
        wrap=UpdateActionParams,
        )
    @update.setter
    def update(self, value: "UpdateActionParams|version_service_pb2.UpdateActionParams") -> None:
        return super()._set_field("update",value,explicit_presence=False,
        )
    
    @builtins.property
    def restart(self) -> "RestartActionParams":
        return super()._get_field("restart", explicit_presence=False,
        wrap=RestartActionParams,
        )
    @restart.setter
    def restart(self, value: "RestartActionParams|version_service_pb2.RestartActionParams") -> None:
        return super()._set_field("restart",value,explicit_presence=False,
        )
    
class NopActionParams(pb_classes.Message):
    __PB2_CLASS__ = version_service_pb2.NopActionParams
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.logging.agentmanager.v1.NopActionParams",version_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message.Message|None = None,
    ) -> None:
        super().__init__(initial_message)
    
class UpdateActionParams(pb_classes.Message):
    __PB2_CLASS__ = version_service_pb2.UpdateActionParams
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.logging.agentmanager.v1.UpdateActionParams",version_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message.Message|None = None,
        *,
        version: "builtins.str|None" = None,
        repo_url: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if version is not None:
            self.version = version
        if repo_url is not None:
            self.repo_url = repo_url
    
    @builtins.property
    def version(self) -> "builtins.str":
        return super()._get_field("version", explicit_presence=False,
        )
    @version.setter
    def version(self, value: "builtins.str") -> None:
        return super()._set_field("version",value,explicit_presence=False,
        )
    
    @builtins.property
    def repo_url(self) -> "builtins.str":
        return super()._get_field("repo_url", explicit_presence=False,
        )
    @repo_url.setter
    def repo_url(self, value: "builtins.str") -> None:
        return super()._set_field("repo_url",value,explicit_presence=False,
        )
    
class RestartActionParams(pb_classes.Message):
    __PB2_CLASS__ = version_service_pb2.RestartActionParams
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.logging.agentmanager.v1.RestartActionParams",version_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message.Message|None = None,
    ) -> None:
        super().__init__(initial_message)
    

class VersionServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.logging.agentmanager.v1.VersionService",version_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.logging.agentmanager.v1.VersionService"
    
    def get_version(self,
        request: "GetVersionRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request.Request["GetVersionRequest","GetVersionResponse"]:
        return super().request(
            method="GetVersion",
            request=request,
            result_pb2_class=version_service_pb2.GetVersionResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    

__all__ = [
    #@ local import names here @#
    "AgentType",
    "AgentState",
    "Action",
    "GetVersionRequest",
    "OSInfo",
    "GetVersionResponse",
    "NopActionParams",
    "UpdateActionParams",
    "RestartActionParams",
    "VersionServiceClient",
]
