# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.msp.spark.v1alpha1.cluster_pb2 as cluster_pb2
import google.protobuf.message as message_2
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import builtins as builtins
import nebius.api.nebius.msp.v1alpha1 as v1alpha1_1
import nebius.api.nebius.msp.v1alpha1.cluster_pb2 as cluster_pb2_1
import nebius.api.nebius.msp.spark.v1alpha1.cluster_service_pb2 as cluster_service_pb2
import collections.abc as abc
import nebius.api.nebius.msp.spark.v1alpha1.common_pb2 as common_pb2
import nebius.api.nebius.msp.spark.v1alpha1.preset_pb2 as preset_pb2
import nebius.api.nebius.msp.v1alpha1.resource as resource_1
import nebius.api.nebius.msp.v1alpha1.resource.template_pb2 as template_pb2
import nebius.api.nebius.msp.spark.v1alpha1.job_pb2 as job_pb2
import nebius.api.nebius.msp.spark.v1alpha1.job_service_pb2 as job_service_pb2
import nebius.api.nebius.msp.spark.v1alpha1.session_pb2 as session_pb2
import nebius.api.nebius.msp.spark.v1alpha1.session_service_pb2 as session_service_pb2

# file: nebius/msp/spark/v1alpha1/cluster.proto
class Cluster(message_1.Message):
    _PB2_CLASS_ = cluster_pb2.Cluster
    _pb2_base_: cluster_pb2.Cluster
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
        status: "ClusterStatus|cluster_pb2.ClusterStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "ClusterSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "ClusterStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=ClusterStatus,
        )
    @status.setter
    def status(self, value: "ClusterStatus|cluster_pb2.ClusterStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class ClusterSpec(message_1.Message):
    _PB2_CLASS_ = cluster_pb2.ClusterSpec
    _pb2_base_: cluster_pb2.ClusterSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        description: "builtins.str|None" = None,
        limits: "Limits|cluster_pb2.Limits|None" = None,
        authorization: "Password|cluster_pb2.Password|None" = None,
        service_account_id: "builtins.str|None" = None,
        network_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if description is not None:
            self.description = description
        if limits is not None:
            self.limits = limits
        if authorization is not None:
            self.authorization = authorization
        if service_account_id is not None:
            self.service_account_id = service_account_id
        if network_id is not None:
            self.network_id = network_id
    
    @property
    def description(self) -> "builtins.str|None":
        return super()._get_field("description", base=self._pb2_base_, explicit_presence=True,
        )
    @description.setter
    def description(self, value: "builtins.str|None") -> None:
        return super()._set_field("description",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def limits(self) -> "Limits|None":
        return super()._get_field("limits", base=self._pb2_base_, explicit_presence=True,
        wrap=Limits,
        )
    @limits.setter
    def limits(self, value: "Limits|cluster_pb2.Limits|None") -> None:
        return super()._set_field("limits",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def authorization(self) -> "Password|None":
        return super()._get_field("authorization", base=self._pb2_base_, explicit_presence=True,
        wrap=Password,
        )
    @authorization.setter
    def authorization(self, value: "Password|cluster_pb2.Password|None") -> None:
        return super()._set_field("authorization",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def service_account_id(self) -> "builtins.str":
        return super()._get_field("service_account_id", base=self._pb2_base_, explicit_presence=False,
        )
    @service_account_id.setter
    def service_account_id(self, value: "builtins.str") -> None:
        return super()._set_field("service_account_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def network_id(self) -> "builtins.str":
        return super()._get_field("network_id", base=self._pb2_base_, explicit_presence=False,
        )
    @network_id.setter
    def network_id(self, value: "builtins.str") -> None:
        return super()._set_field("network_id",value, base=self._pb2_base_,explicit_presence=False)
    
class ClusterStatus(message_1.Message):
    _PB2_CLASS_ = cluster_pb2.ClusterStatus
    _pb2_base_: cluster_pb2.ClusterStatus
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        phase: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase|None" = None,
        state: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State|None" = None,
        history_server_endpoint: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if phase is not None:
            self.phase = phase
        if state is not None:
            self.state = state
        if history_server_endpoint is not None:
            self.history_server_endpoint = history_server_endpoint
    
    @property
    def phase(self) -> "v1alpha1_1.ClusterStatus.Phase":
        return super()._get_field("phase", base=self._pb2_base_, explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.Phase,
        )
    @phase.setter
    def phase(self, value: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase") -> None:
        return super()._set_field("phase",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def state(self) -> "v1alpha1_1.ClusterStatus.State":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.State,
        )
    @state.setter
    def state(self, value: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def history_server_endpoint(self) -> "builtins.str|None":
        return super()._get_field("history_server_endpoint", base=self._pb2_base_, explicit_presence=True,
        )
    @history_server_endpoint.setter
    def history_server_endpoint(self, value: "builtins.str|None") -> None:
        return super()._set_field("history_server_endpoint",value, base=self._pb2_base_,explicit_presence=True)
    
class Limits(message_1.Message):
    _PB2_CLASS_ = cluster_pb2.Limits
    _pb2_base_: cluster_pb2.Limits
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        cpu: "builtins.int|None" = None,
        memory_gibibytes: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if cpu is not None:
            self.cpu = cpu
        if memory_gibibytes is not None:
            self.memory_gibibytes = memory_gibibytes
    
    @property
    def cpu(self) -> "builtins.int":
        return super()._get_field("cpu", base=self._pb2_base_, explicit_presence=False,
        )
    @cpu.setter
    def cpu(self, value: "builtins.int") -> None:
        return super()._set_field("cpu",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def memory_gibibytes(self) -> "builtins.int":
        return super()._get_field("memory_gibibytes", base=self._pb2_base_, explicit_presence=False,
        )
    @memory_gibibytes.setter
    def memory_gibibytes(self, value: "builtins.int") -> None:
        return super()._set_field("memory_gibibytes",value, base=self._pb2_base_,explicit_presence=False)
    
class Password(message_1.Message):
    _PB2_CLASS_ = cluster_pb2.Password
    _pb2_base_: cluster_pb2.Password
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        password: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if password is not None:
            self.password = password
    
    @property
    def password(self) -> "builtins.str":
        return super()._get_field("password", base=self._pb2_base_, explicit_presence=False,
        )
    @password.setter
    def password(self, value: "builtins.str") -> None:
        return super()._set_field("password",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/msp/spark/v1alpha1/cluster_service.proto
class GetClusterRequest(message_1.Message):
    _PB2_CLASS_ = cluster_service_pb2.GetClusterRequest
    _pb2_base_: cluster_service_pb2.GetClusterRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class GetClusterByNameRequest(message_1.Message):
    _PB2_CLASS_ = cluster_service_pb2.GetClusterByNameRequest
    _pb2_base_: cluster_service_pb2.GetClusterByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
class ListClustersRequest(message_1.Message):
    _PB2_CLASS_ = cluster_service_pb2.ListClustersRequest
    _pb2_base_: cluster_service_pb2.ListClustersRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListClustersResponse(message_1.Message):
    _PB2_CLASS_ = cluster_service_pb2.ListClustersResponse
    _pb2_base_: cluster_service_pb2.ListClustersResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Cluster]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Cluster]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Cluster,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Cluster]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str|None":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=True,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str|None") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=True)
    
class CreateClusterRequest(message_1.Message):
    _PB2_CLASS_ = cluster_service_pb2.CreateClusterRequest
    _pb2_base_: cluster_service_pb2.CreateClusterRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "ClusterSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class UpdateClusterRequest(message_1.Message):
    _PB2_CLASS_ = cluster_service_pb2.UpdateClusterRequest
    _pb2_base_: cluster_service_pb2.UpdateClusterRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "ClusterSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class DeleteClusterRequest(message_1.Message):
    _PB2_CLASS_ = cluster_service_pb2.DeleteClusterRequest
    _pb2_base_: cluster_service_pb2.DeleteClusterRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/msp/spark/v1alpha1/common.proto
class PythonConfig(message_1.Message):
    _PB2_CLASS_ = common_pb2.PythonConfig
    _pb2_base_: common_pb2.PythonConfig
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        requirements: "abc.MutableSequence[builtins.str]|None" = None,
        file_uris: "abc.MutableSequence[builtins.str]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if requirements is not None:
            self.requirements = requirements
        if file_uris is not None:
            self.file_uris = file_uris
    
    @property
    def requirements(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("requirements", base=self._pb2_base_, explicit_presence=False,
        )
    @requirements.setter
    def requirements(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("requirements",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def file_uris(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("file_uris", base=self._pb2_base_, explicit_presence=False,
        )
    @file_uris.setter
    def file_uris(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("file_uris",value, base=self._pb2_base_,explicit_presence=False)
    
class JavaConfig(message_1.Message):
    _PB2_CLASS_ = common_pb2.JavaConfig
    _pb2_base_: common_pb2.JavaConfig
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        entrypoint_class: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if entrypoint_class is not None:
            self.entrypoint_class = entrypoint_class
    
    @property
    def entrypoint_class(self) -> "builtins.str":
        return super()._get_field("entrypoint_class", base=self._pb2_base_, explicit_presence=False,
        )
    @entrypoint_class.setter
    def entrypoint_class(self, value: "builtins.str") -> None:
        return super()._set_field("entrypoint_class",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/msp/spark/v1alpha1/preset.proto
class DriverTemplateSpec(message_1.Message):
    _PB2_CLASS_ = preset_pb2.DriverTemplateSpec
    _pb2_base_: preset_pb2.DriverTemplateSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        disk: "resource_1.DiskSpec|template_pb2.DiskSpec|None" = None,
        resources: "resource_1.ResourcesSpec|template_pb2.ResourcesSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if disk is not None:
            self.disk = disk
        if resources is not None:
            self.resources = resources
    
    @property
    def disk(self) -> "resource_1.DiskSpec|None":
        return super()._get_field("disk", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.DiskSpec,
        )
    @disk.setter
    def disk(self, value: "resource_1.DiskSpec|template_pb2.DiskSpec|None") -> None:
        return super()._set_field("disk",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def resources(self) -> "resource_1.ResourcesSpec|None":
        return super()._get_field("resources", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.ResourcesSpec,
        )
    @resources.setter
    def resources(self, value: "resource_1.ResourcesSpec|template_pb2.ResourcesSpec|None") -> None:
        return super()._set_field("resources",value, base=self._pb2_base_,explicit_presence=True)
    
class DynamicAllocationSpec(message_1.Message):
    _PB2_CLASS_ = preset_pb2.DynamicAllocationSpec
    _pb2_base_: preset_pb2.DynamicAllocationSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        min: "builtins.int|None" = None,
        max: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
    
    @property
    def min(self) -> "builtins.int":
        return super()._get_field("min", base=self._pb2_base_, explicit_presence=False,
        )
    @min.setter
    def min(self, value: "builtins.int") -> None:
        return super()._set_field("min",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def max(self) -> "builtins.int":
        return super()._get_field("max", base=self._pb2_base_, explicit_presence=False,
        )
    @max.setter
    def max(self, value: "builtins.int") -> None:
        return super()._set_field("max",value, base=self._pb2_base_,explicit_presence=False)
    
class ExecutorTemplateSpec(message_1.Message):
    _PB2_CLASS_ = preset_pb2.ExecutorTemplateSpec
    _pb2_base_: preset_pb2.ExecutorTemplateSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        disk: "resource_1.DiskSpec|template_pb2.DiskSpec|None" = None,
        resources: "resource_1.ResourcesSpec|template_pb2.ResourcesSpec|None" = None,
        hosts: "resource_1.HostSpec|template_pb2.HostSpec|None" = None,
        hosts_dynamic_allocation: "DynamicAllocationSpec|preset_pb2.DynamicAllocationSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if disk is not None:
            self.disk = disk
        if resources is not None:
            self.resources = resources
        if hosts is not None:
            self.hosts = hosts
        if hosts_dynamic_allocation is not None:
            self.hosts_dynamic_allocation = hosts_dynamic_allocation
    
    @property
    def disk(self) -> "resource_1.DiskSpec|None":
        return super()._get_field("disk", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.DiskSpec,
        )
    @disk.setter
    def disk(self, value: "resource_1.DiskSpec|template_pb2.DiskSpec|None") -> None:
        return super()._set_field("disk",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def resources(self) -> "resource_1.ResourcesSpec|None":
        return super()._get_field("resources", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.ResourcesSpec,
        )
    @resources.setter
    def resources(self, value: "resource_1.ResourcesSpec|template_pb2.ResourcesSpec|None") -> None:
        return super()._set_field("resources",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def hosts(self) -> "resource_1.HostSpec|None":
        return super()._get_field("hosts", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.HostSpec,
        )
    @hosts.setter
    def hosts(self, value: "resource_1.HostSpec|template_pb2.HostSpec|None") -> None:
        return super()._set_field("hosts",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def hosts_dynamic_allocation(self) -> "DynamicAllocationSpec|None":
        return super()._get_field("hosts_dynamic_allocation", base=self._pb2_base_, explicit_presence=True,
        wrap=DynamicAllocationSpec,
        )
    @hosts_dynamic_allocation.setter
    def hosts_dynamic_allocation(self, value: "DynamicAllocationSpec|preset_pb2.DynamicAllocationSpec|None") -> None:
        return super()._set_field("hosts_dynamic_allocation",value, base=self._pb2_base_,explicit_presence=True)
    
# file: nebius/msp/spark/v1alpha1/job.proto
class Job(message_1.Message):
    _PB2_CLASS_ = job_pb2.Job
    _pb2_base_: job_pb2.Job
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "JobSpec|job_pb2.JobSpec|None" = None,
        status: "JobStatus|job_pb2.JobStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "JobSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=JobSpec,
        )
    @spec.setter
    def spec(self, value: "JobSpec|job_pb2.JobSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "JobStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=JobStatus,
        )
    @status.setter
    def status(self, value: "JobStatus|job_pb2.JobStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class JobSpec(message_1.Message):
    _PB2_CLASS_ = job_pb2.JobSpec
    _pb2_base_: job_pb2.JobSpec
    
    class SparkConfEntry(message_1.Message):
        _PB2_CLASS_ = job_pb2.JobSpec.SparkConfEntry
        _pb2_base_: job_pb2.JobSpec.SparkConfEntry
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", base=self._pb2_base_, explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def value(self) -> "builtins.str":
            return super()._get_field("value", base=self._pb2_base_, explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.str") -> None:
            return super()._set_field("value",value, base=self._pb2_base_,explicit_presence=False)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        description: "builtins.str|None" = None,
        application_file_uri: "builtins.str|None" = None,
        driver: "DriverTemplateSpec|preset_pb2.DriverTemplateSpec|None" = None,
        executor: "ExecutorTemplateSpec|preset_pb2.ExecutorTemplateSpec|None" = None,
        spark_version: "builtins.str|None" = None,
        application_args: "abc.MutableSequence[builtins.str]|None" = None,
        file_uris: "abc.MutableSequence[builtins.str]|None" = None,
        jar_uris: "abc.MutableSequence[builtins.str]|None" = None,
        packages: "abc.MutableSequence[builtins.str]|None" = None,
        spark_conf: "abc.MutableMapping[builtins.str,builtins.str]|None" = None,
        python: "PythonConfig|common_pb2.PythonConfig|None" = None,
        java: "JavaConfig|common_pb2.JavaConfig|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if description is not None:
            self.description = description
        if application_file_uri is not None:
            self.application_file_uri = application_file_uri
        if driver is not None:
            self.driver = driver
        if executor is not None:
            self.executor = executor
        if spark_version is not None:
            self.spark_version = spark_version
        if application_args is not None:
            self.application_args = application_args
        if file_uris is not None:
            self.file_uris = file_uris
        if jar_uris is not None:
            self.jar_uris = jar_uris
        if packages is not None:
            self.packages = packages
        if spark_conf is not None:
            self.spark_conf = spark_conf
        if python is not None:
            self.python = python
        if java is not None:
            self.java = java
    
    @property
    def description(self) -> "builtins.str|None":
        return super()._get_field("description", base=self._pb2_base_, explicit_presence=True,
        )
    @description.setter
    def description(self, value: "builtins.str|None") -> None:
        return super()._set_field("description",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def application_file_uri(self) -> "builtins.str":
        return super()._get_field("application_file_uri", base=self._pb2_base_, explicit_presence=False,
        )
    @application_file_uri.setter
    def application_file_uri(self, value: "builtins.str") -> None:
        return super()._set_field("application_file_uri",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def driver(self) -> "DriverTemplateSpec|None":
        return super()._get_field("driver", base=self._pb2_base_, explicit_presence=True,
        wrap=DriverTemplateSpec,
        )
    @driver.setter
    def driver(self, value: "DriverTemplateSpec|preset_pb2.DriverTemplateSpec|None") -> None:
        return super()._set_field("driver",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def executor(self) -> "ExecutorTemplateSpec|None":
        return super()._get_field("executor", base=self._pb2_base_, explicit_presence=True,
        wrap=ExecutorTemplateSpec,
        )
    @executor.setter
    def executor(self, value: "ExecutorTemplateSpec|preset_pb2.ExecutorTemplateSpec|None") -> None:
        return super()._set_field("executor",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spark_version(self) -> "builtins.str":
        return super()._get_field("spark_version", base=self._pb2_base_, explicit_presence=False,
        )
    @spark_version.setter
    def spark_version(self, value: "builtins.str") -> None:
        return super()._set_field("spark_version",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def application_args(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("application_args", base=self._pb2_base_, explicit_presence=False,
        )
    @application_args.setter
    def application_args(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("application_args",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def file_uris(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("file_uris", base=self._pb2_base_, explicit_presence=False,
        )
    @file_uris.setter
    def file_uris(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("file_uris",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def jar_uris(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("jar_uris", base=self._pb2_base_, explicit_presence=False,
        )
    @jar_uris.setter
    def jar_uris(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("jar_uris",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def packages(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("packages", base=self._pb2_base_, explicit_presence=False,
        )
    @packages.setter
    def packages(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("packages",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def spark_conf(self) -> "abc.MutableMapping[builtins.str,builtins.str]|None":
        return super()._get_field("spark_conf", base=self._pb2_base_, explicit_presence=True,
        wrap=JobSpec.SparkConfEntry,
        )
    @spark_conf.setter
    def spark_conf(self, value: "abc.MutableMapping[builtins.str,builtins.str]|None") -> None:
        return super()._set_field("spark_conf",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def python(self) -> "PythonConfig|None":
        return super()._get_field("python", base=self._pb2_base_, explicit_presence=True,
        wrap=PythonConfig,
        )
    @python.setter
    def python(self, value: "PythonConfig|common_pb2.PythonConfig|None") -> None:
        return super()._set_field("python",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def java(self) -> "JavaConfig|None":
        return super()._get_field("java", base=self._pb2_base_, explicit_presence=True,
        wrap=JavaConfig,
        )
    @java.setter
    def java(self, value: "JavaConfig|common_pb2.JavaConfig|None") -> None:
        return super()._set_field("java",value, base=self._pb2_base_,explicit_presence=True)
    
class JobStatus(message_1.Message):
    _PB2_CLASS_ = job_pb2.JobStatus
    _pb2_base_: job_pb2.JobStatus
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        phase: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase|None" = None,
        state: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State|None" = None,
        driver_endpoint: "builtins.str|None" = None,
        driver_preset_details: "resource_1.PresetDetails|template_pb2.PresetDetails|None" = None,
        executor_preset_details: "resource_1.PresetDetails|template_pb2.PresetDetails|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if phase is not None:
            self.phase = phase
        if state is not None:
            self.state = state
        if driver_endpoint is not None:
            self.driver_endpoint = driver_endpoint
        if driver_preset_details is not None:
            self.driver_preset_details = driver_preset_details
        if executor_preset_details is not None:
            self.executor_preset_details = executor_preset_details
    
    @property
    def phase(self) -> "v1alpha1_1.ClusterStatus.Phase":
        return super()._get_field("phase", base=self._pb2_base_, explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.Phase,
        )
    @phase.setter
    def phase(self, value: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase") -> None:
        return super()._set_field("phase",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def state(self) -> "v1alpha1_1.ClusterStatus.State":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.State,
        )
    @state.setter
    def state(self, value: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def driver_endpoint(self) -> "builtins.str|None":
        return super()._get_field("driver_endpoint", base=self._pb2_base_, explicit_presence=True,
        )
    @driver_endpoint.setter
    def driver_endpoint(self, value: "builtins.str|None") -> None:
        return super()._set_field("driver_endpoint",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def driver_preset_details(self) -> "resource_1.PresetDetails|None":
        return super()._get_field("driver_preset_details", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.PresetDetails,
        )
    @driver_preset_details.setter
    def driver_preset_details(self, value: "resource_1.PresetDetails|template_pb2.PresetDetails|None") -> None:
        return super()._set_field("driver_preset_details",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def executor_preset_details(self) -> "resource_1.PresetDetails|None":
        return super()._get_field("executor_preset_details", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.PresetDetails,
        )
    @executor_preset_details.setter
    def executor_preset_details(self, value: "resource_1.PresetDetails|template_pb2.PresetDetails|None") -> None:
        return super()._set_field("executor_preset_details",value, base=self._pb2_base_,explicit_presence=True)
    
# file: nebius/msp/spark/v1alpha1/job_service.proto
class GetJobRequest(message_1.Message):
    _PB2_CLASS_ = job_service_pb2.GetJobRequest
    _pb2_base_: job_service_pb2.GetJobRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class ListJobsRequest(message_1.Message):
    _PB2_CLASS_ = job_service_pb2.ListJobsRequest
    _pb2_base_: job_service_pb2.ListJobsRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListJobsResponse(message_1.Message):
    _PB2_CLASS_ = job_service_pb2.ListJobsResponse
    _pb2_base_: job_service_pb2.ListJobsResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Job]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Job]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Job,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Job]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str|None":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=True,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str|None") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=True)
    
class CreateJobRequest(message_1.Message):
    _PB2_CLASS_ = job_service_pb2.CreateJobRequest
    _pb2_base_: job_service_pb2.CreateJobRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "JobSpec|job_pb2.JobSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "JobSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=JobSpec,
        )
    @spec.setter
    def spec(self, value: "JobSpec|job_pb2.JobSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class CancelJobRequest(message_1.Message):
    _PB2_CLASS_ = job_service_pb2.CancelJobRequest
    _pb2_base_: job_service_pb2.CancelJobRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/msp/spark/v1alpha1/session.proto
class Session(message_1.Message):
    _PB2_CLASS_ = session_pb2.Session
    _pb2_base_: session_pb2.Session
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "SessionSpec|session_pb2.SessionSpec|None" = None,
        status: "SessionStatus|session_pb2.SessionStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "SessionSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=SessionSpec,
        )
    @spec.setter
    def spec(self, value: "SessionSpec|session_pb2.SessionSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "SessionStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=SessionStatus,
        )
    @status.setter
    def status(self, value: "SessionStatus|session_pb2.SessionStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class SessionSpec(message_1.Message):
    _PB2_CLASS_ = session_pb2.SessionSpec
    _pb2_base_: session_pb2.SessionSpec
    
    class SparkConfEntry(message_1.Message):
        _PB2_CLASS_ = session_pb2.SessionSpec.SparkConfEntry
        _pb2_base_: session_pb2.SessionSpec.SparkConfEntry
        
        def __init__(
            self,
            initial_message: message_2.Message|None = None,
            *,
            key: "builtins.str|None" = None,
            value: "builtins.str|None" = None,
        ) -> None:
            super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
            if key is not None:
                self.key = key
            if value is not None:
                self.value = value
        
        @property
        def key(self) -> "builtins.str":
            return super()._get_field("key", base=self._pb2_base_, explicit_presence=False,
            )
        @key.setter
        def key(self, value: "builtins.str") -> None:
            return super()._set_field("key",value, base=self._pb2_base_,explicit_presence=False)
        
        @property
        def value(self) -> "builtins.str":
            return super()._get_field("value", base=self._pb2_base_, explicit_presence=False,
            )
        @value.setter
        def value(self, value: "builtins.str") -> None:
            return super()._set_field("value",value, base=self._pb2_base_,explicit_presence=False)
        
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        description: "builtins.str|None" = None,
        driver: "DriverTemplateSpec|preset_pb2.DriverTemplateSpec|None" = None,
        executor: "ExecutorTemplateSpec|preset_pb2.ExecutorTemplateSpec|None" = None,
        spark_version: "builtins.str|None" = None,
        file_uris: "abc.MutableSequence[builtins.str]|None" = None,
        jar_uris: "abc.MutableSequence[builtins.str]|None" = None,
        packages: "abc.MutableSequence[builtins.str]|None" = None,
        spark_conf: "abc.MutableMapping[builtins.str,builtins.str]|None" = None,
        python: "PythonConfig|common_pb2.PythonConfig|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if description is not None:
            self.description = description
        if driver is not None:
            self.driver = driver
        if executor is not None:
            self.executor = executor
        if spark_version is not None:
            self.spark_version = spark_version
        if file_uris is not None:
            self.file_uris = file_uris
        if jar_uris is not None:
            self.jar_uris = jar_uris
        if packages is not None:
            self.packages = packages
        if spark_conf is not None:
            self.spark_conf = spark_conf
        if python is not None:
            self.python = python
    
    @property
    def description(self) -> "builtins.str|None":
        return super()._get_field("description", base=self._pb2_base_, explicit_presence=True,
        )
    @description.setter
    def description(self, value: "builtins.str|None") -> None:
        return super()._set_field("description",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def driver(self) -> "DriverTemplateSpec|None":
        return super()._get_field("driver", base=self._pb2_base_, explicit_presence=True,
        wrap=DriverTemplateSpec,
        )
    @driver.setter
    def driver(self, value: "DriverTemplateSpec|preset_pb2.DriverTemplateSpec|None") -> None:
        return super()._set_field("driver",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def executor(self) -> "ExecutorTemplateSpec|None":
        return super()._get_field("executor", base=self._pb2_base_, explicit_presence=True,
        wrap=ExecutorTemplateSpec,
        )
    @executor.setter
    def executor(self, value: "ExecutorTemplateSpec|preset_pb2.ExecutorTemplateSpec|None") -> None:
        return super()._set_field("executor",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spark_version(self) -> "builtins.str":
        return super()._get_field("spark_version", base=self._pb2_base_, explicit_presence=False,
        )
    @spark_version.setter
    def spark_version(self, value: "builtins.str") -> None:
        return super()._set_field("spark_version",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def file_uris(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("file_uris", base=self._pb2_base_, explicit_presence=False,
        )
    @file_uris.setter
    def file_uris(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("file_uris",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def jar_uris(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("jar_uris", base=self._pb2_base_, explicit_presence=False,
        )
    @jar_uris.setter
    def jar_uris(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("jar_uris",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def packages(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("packages", base=self._pb2_base_, explicit_presence=False,
        )
    @packages.setter
    def packages(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("packages",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def spark_conf(self) -> "abc.MutableMapping[builtins.str,builtins.str]|None":
        return super()._get_field("spark_conf", base=self._pb2_base_, explicit_presence=True,
        wrap=SessionSpec.SparkConfEntry,
        )
    @spark_conf.setter
    def spark_conf(self, value: "abc.MutableMapping[builtins.str,builtins.str]|None") -> None:
        return super()._set_field("spark_conf",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def python(self) -> "PythonConfig|None":
        return super()._get_field("python", base=self._pb2_base_, explicit_presence=True,
        wrap=PythonConfig,
        )
    @python.setter
    def python(self, value: "PythonConfig|common_pb2.PythonConfig|None") -> None:
        return super()._set_field("python",value, base=self._pb2_base_,explicit_presence=True)
    
class SessionStatus(message_1.Message):
    _PB2_CLASS_ = session_pb2.SessionStatus
    _pb2_base_: session_pb2.SessionStatus
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        phase: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase|None" = None,
        state: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State|None" = None,
        spark_connect_endpoint: "builtins.str|None" = None,
        driver_preset_details: "resource_1.PresetDetails|template_pb2.PresetDetails|None" = None,
        executor_preset_details: "resource_1.PresetDetails|template_pb2.PresetDetails|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if phase is not None:
            self.phase = phase
        if state is not None:
            self.state = state
        if spark_connect_endpoint is not None:
            self.spark_connect_endpoint = spark_connect_endpoint
        if driver_preset_details is not None:
            self.driver_preset_details = driver_preset_details
        if executor_preset_details is not None:
            self.executor_preset_details = executor_preset_details
    
    @property
    def phase(self) -> "v1alpha1_1.ClusterStatus.Phase":
        return super()._get_field("phase", base=self._pb2_base_, explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.Phase,
        )
    @phase.setter
    def phase(self, value: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase") -> None:
        return super()._set_field("phase",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def state(self) -> "v1alpha1_1.ClusterStatus.State":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.State,
        )
    @state.setter
    def state(self, value: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def spark_connect_endpoint(self) -> "builtins.str|None":
        return super()._get_field("spark_connect_endpoint", base=self._pb2_base_, explicit_presence=True,
        )
    @spark_connect_endpoint.setter
    def spark_connect_endpoint(self, value: "builtins.str|None") -> None:
        return super()._set_field("spark_connect_endpoint",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def driver_preset_details(self) -> "resource_1.PresetDetails|None":
        return super()._get_field("driver_preset_details", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.PresetDetails,
        )
    @driver_preset_details.setter
    def driver_preset_details(self, value: "resource_1.PresetDetails|template_pb2.PresetDetails|None") -> None:
        return super()._set_field("driver_preset_details",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def executor_preset_details(self) -> "resource_1.PresetDetails|None":
        return super()._get_field("executor_preset_details", base=self._pb2_base_, explicit_presence=True,
        wrap=resource_1.PresetDetails,
        )
    @executor_preset_details.setter
    def executor_preset_details(self, value: "resource_1.PresetDetails|template_pb2.PresetDetails|None") -> None:
        return super()._set_field("executor_preset_details",value, base=self._pb2_base_,explicit_presence=True)
    
# file: nebius/msp/spark/v1alpha1/session_service.proto
class GetSessionRequest(message_1.Message):
    _PB2_CLASS_ = session_service_pb2.GetSessionRequest
    _pb2_base_: session_service_pb2.GetSessionRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class GetSessionByNameRequest(message_1.Message):
    _PB2_CLASS_ = session_service_pb2.GetSessionByNameRequest
    _pb2_base_: session_service_pb2.GetSessionByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
class ListSessionsRequest(message_1.Message):
    _PB2_CLASS_ = session_service_pb2.ListSessionsRequest
    _pb2_base_: session_service_pb2.ListSessionsRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListSessionsResponse(message_1.Message):
    _PB2_CLASS_ = session_service_pb2.ListSessionsResponse
    _pb2_base_: session_service_pb2.ListSessionsResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Session]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Session]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Session,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Session]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str|None":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=True,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str|None") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=True)
    
class CreateSessionRequest(message_1.Message):
    _PB2_CLASS_ = session_service_pb2.CreateSessionRequest
    _pb2_base_: session_service_pb2.CreateSessionRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "SessionSpec|session_pb2.SessionSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "SessionSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=SessionSpec,
        )
    @spec.setter
    def spec(self, value: "SessionSpec|session_pb2.SessionSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class DeleteSessionRequest(message_1.Message):
    _PB2_CLASS_ = session_service_pb2.DeleteSessionRequest
    _pb2_base_: session_service_pb2.DeleteSessionRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
