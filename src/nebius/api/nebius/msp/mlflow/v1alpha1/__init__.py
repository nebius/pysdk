# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_classes as pb_classes
import nebius.api.nebius.msp.mlflow.v1alpha1.cluster_pb2 as cluster_pb2
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_1
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import builtins as builtins
import nebius.api.nebius.msp.v1alpha1 as v1alpha1_1
import nebius.api.nebius.msp.v1alpha1.cluster_pb2 as cluster_pb2_1
import nebius.api.nebius.msp.mlflow.v1alpha1.cluster_service_pb2 as cluster_service_pb2
import collections.abc as abc
import nebius.aio.client as client
import nebius.api.nebius.common.v1alpha1 as v1alpha1_2
import grpc as grpc
import nebius.aio.request as request_1
import nebius.aio.operation as operation
import nebius.api.nebius.common.v1alpha1.operation_pb2 as operation_pb2
#@ local imports here @#

# file: nebius/msp/mlflow/v1alpha1/cluster.proto
class Cluster(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.Cluster
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.Cluster",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
        status: "MlflowClusterStatus|cluster_pb2.MlflowClusterStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @builtins.property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @builtins.property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @builtins.property
    def status(self) -> "MlflowClusterStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=MlflowClusterStatus,
        )
    @status.setter
    def status(self, value: "MlflowClusterStatus|cluster_pb2.MlflowClusterStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class ClusterSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ClusterSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.ClusterSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        description: "builtins.str|None" = None,
        public_access: "builtins.bool|None" = None,
        admin_username: "builtins.str|None" = None,
        admin_password: "builtins.str|None" = None,
        service_account_id: "builtins.str|None" = None,
        storage_bucket_name: "builtins.str|None" = None,
        network_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if description is not None:
            self.description = description
        if public_access is not None:
            self.public_access = public_access
        if admin_username is not None:
            self.admin_username = admin_username
        if admin_password is not None:
            self.admin_password = admin_password
        if service_account_id is not None:
            self.service_account_id = service_account_id
        if storage_bucket_name is not None:
            self.storage_bucket_name = storage_bucket_name
        if network_id is not None:
            self.network_id = network_id
    
    @builtins.property
    def description(self) -> "builtins.str":
        return super()._get_field("description", explicit_presence=False,
        )
    @description.setter
    def description(self, value: "builtins.str") -> None:
        return super()._set_field("description",value,explicit_presence=False,
        )
    
    @builtins.property
    def public_access(self) -> "builtins.bool":
        return super()._get_field("public_access", explicit_presence=False,
        )
    @public_access.setter
    def public_access(self, value: "builtins.bool") -> None:
        return super()._set_field("public_access",value,explicit_presence=False,
        )
    
    @builtins.property
    def admin_username(self) -> "builtins.str":
        return super()._get_field("admin_username", explicit_presence=False,
        )
    @admin_username.setter
    def admin_username(self, value: "builtins.str") -> None:
        return super()._set_field("admin_username",value,explicit_presence=False,
        )
    
    @builtins.property
    def admin_password(self) -> "builtins.str":
        return super()._get_field("admin_password", explicit_presence=False,
        )
    @admin_password.setter
    def admin_password(self, value: "builtins.str") -> None:
        return super()._set_field("admin_password",value,explicit_presence=False,
        )
    
    @builtins.property
    def service_account_id(self) -> "builtins.str":
        return super()._get_field("service_account_id", explicit_presence=False,
        )
    @service_account_id.setter
    def service_account_id(self, value: "builtins.str") -> None:
        return super()._set_field("service_account_id",value,explicit_presence=False,
        )
    
    @builtins.property
    def storage_bucket_name(self) -> "builtins.str":
        return super()._get_field("storage_bucket_name", explicit_presence=False,
        )
    @storage_bucket_name.setter
    def storage_bucket_name(self, value: "builtins.str") -> None:
        return super()._set_field("storage_bucket_name",value,explicit_presence=False,
        )
    
    @builtins.property
    def network_id(self) -> "builtins.str":
        return super()._get_field("network_id", explicit_presence=False,
        )
    @network_id.setter
    def network_id(self, value: "builtins.str") -> None:
        return super()._set_field("network_id",value,explicit_presence=False,
        )
    
class MlflowClusterStatus(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.MlflowClusterStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.MlflowClusterStatus",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        phase: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase|None" = None,
        state: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State|None" = None,
        tracking_endpoint: "builtins.str|None" = None,
        effective_storage_bucket_name: "builtins.str|None" = None,
        experiments_count: "builtins.int|None" = None,
        mlflow_version: "builtins.str|None" = None,
        tracking_endpoints: "Endpoints|cluster_pb2.Endpoints|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if phase is not None:
            self.phase = phase
        if state is not None:
            self.state = state
        if tracking_endpoint is not None:
            self.tracking_endpoint = tracking_endpoint
        if effective_storage_bucket_name is not None:
            self.effective_storage_bucket_name = effective_storage_bucket_name
        if experiments_count is not None:
            self.experiments_count = experiments_count
        if mlflow_version is not None:
            self.mlflow_version = mlflow_version
        if tracking_endpoints is not None:
            self.tracking_endpoints = tracking_endpoints
    
    @builtins.property
    def phase(self) -> "v1alpha1_1.ClusterStatus.Phase":
        return super()._get_field("phase", explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.Phase,
        )
    @phase.setter
    def phase(self, value: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase") -> None:
        return super()._set_field("phase",value,explicit_presence=False,
        )
    
    @builtins.property
    def state(self) -> "v1alpha1_1.ClusterStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.State,
        )
    @state.setter
    def state(self, value: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @builtins.property
    def tracking_endpoint(self) -> "builtins.str":
        return super()._get_field("tracking_endpoint", explicit_presence=False,
        )
    @tracking_endpoint.setter
    def tracking_endpoint(self, value: "builtins.str") -> None:
        return super()._set_field("tracking_endpoint",value,explicit_presence=False,
        )
    
    @builtins.property
    def effective_storage_bucket_name(self) -> "builtins.str":
        return super()._get_field("effective_storage_bucket_name", explicit_presence=False,
        )
    @effective_storage_bucket_name.setter
    def effective_storage_bucket_name(self, value: "builtins.str") -> None:
        return super()._set_field("effective_storage_bucket_name",value,explicit_presence=False,
        )
    
    @builtins.property
    def experiments_count(self) -> "builtins.int":
        return super()._get_field("experiments_count", explicit_presence=False,
        )
    @experiments_count.setter
    def experiments_count(self, value: "builtins.int") -> None:
        return super()._set_field("experiments_count",value,explicit_presence=False,
        )
    
    @builtins.property
    def mlflow_version(self) -> "builtins.str":
        return super()._get_field("mlflow_version", explicit_presence=False,
        )
    @mlflow_version.setter
    def mlflow_version(self, value: "builtins.str") -> None:
        return super()._set_field("mlflow_version",value,explicit_presence=False,
        )
    
    @builtins.property
    def tracking_endpoints(self) -> "Endpoints":
        return super()._get_field("tracking_endpoints", explicit_presence=False,
        wrap=Endpoints,
        )
    @tracking_endpoints.setter
    def tracking_endpoints(self, value: "Endpoints|cluster_pb2.Endpoints") -> None:
        return super()._set_field("tracking_endpoints",value,explicit_presence=False,
        )
    
class Endpoints(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.Endpoints
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.Endpoints",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        private: "builtins.str|None" = None,
        public: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if private is not None:
            self.private = private
        if public is not None:
            self.public = public
    
    @builtins.property
    def private(self) -> "builtins.str":
        return super()._get_field("private", explicit_presence=False,
        )
    @private.setter
    def private(self, value: "builtins.str") -> None:
        return super()._set_field("private",value,explicit_presence=False,
        )
    
    @builtins.property
    def public(self) -> "builtins.str":
        return super()._get_field("public", explicit_presence=False,
        )
    @public.setter
    def public(self, value: "builtins.str") -> None:
        return super()._set_field("public",value,explicit_presence=False,
        )
    
# file: nebius/msp/mlflow/v1alpha1/cluster_service.proto
class GetClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.GetClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.GetClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @builtins.property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class GetClusterByNameRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.GetClusterByNameRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.GetClusterByNameRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @builtins.property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @builtins.property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False,
        )
    
class ListClustersRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.ListClustersRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.ListClustersRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @builtins.property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @builtins.property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @builtins.property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
class ListClustersResponse(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.ListClustersResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.ListClustersResponse",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        items: "abc.Iterable[Cluster]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @builtins.property
    def items(self) -> "abc.MutableSequence[Cluster]":
        return super()._get_field("items", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Cluster,None),
        )
    @items.setter
    def items(self, value: "abc.Iterable[Cluster]") -> None:
        return super()._set_field("items",value,explicit_presence=False,
        )
    
    @builtins.property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    
class CreateClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.CreateClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.CreateClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @builtins.property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @builtins.property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.DeleteClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.mlflow.v1alpha1.DeleteClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @builtins.property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    

class ClusterServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.msp.mlflow.v1alpha1.ClusterService",cluster_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.msp.mlflow.v1alpha1.ClusterService"
    __operation_type__ = v1alpha1_2.Operation
    
    def get(self,
        request: "GetClusterRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetClusterRequest","Cluster"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=cluster_pb2.Cluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=pb_classes.simple_wrapper(Cluster),
        )
    
    def get_by_name(self,
        request: "GetClusterByNameRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetClusterByNameRequest","Cluster"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=cluster_pb2.Cluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=pb_classes.simple_wrapper(Cluster),
        )
    
    def list(self,
        request: "ListClustersRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListClustersRequest","ListClustersResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=cluster_service_pb2.ListClustersResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=pb_classes.simple_wrapper(ListClustersResponse),
        )
    
    def create(self,
        request: "CreateClusterRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateClusterRequest","operation.Operation[v1alpha1_2.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteClusterRequest",
        metadata: abc.Iterable[builtins.tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteClusterRequest","operation.Operation[v1alpha1_2.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    

__all__ = [
    #@ local import names here @#
    "Cluster",
    "ClusterSpec",
    "MlflowClusterStatus",
    "Endpoints",
    "GetClusterRequest",
    "GetClusterByNameRequest",
    "ListClustersRequest",
    "ListClustersResponse",
    "CreateClusterRequest",
    "DeleteClusterRequest",
    "ClusterServiceClient",
]
