# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message
import nebius.api.nebius.msp.v1alpha1.cluster_pb2 as cluster_pb2
import google.protobuf.message as message_1
import nebius.base.protos.pb_enum as pb_enum
import builtins as builtins

# file: nebius/msp/v1alpha1/cluster.proto
class ClusterStatus(message.Message):
    _PB2_CLASS_ = cluster_pb2.ClusterStatus
    _pb2_base_: cluster_pb2.ClusterStatus
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        phase: "pb_enum.Enum|None" = None,
        state: "pb_enum.Enum|None" = None,
        reconciling: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if phase is not None:
            self.phase = phase
        if state is not None:
            self.state = state
        if reconciling is not None:
            self.reconciling = reconciling
    
    @property
    def phase(self) -> "pb_enum.Enum":
        return super()._get_field("phase", base=self._pb2_base_, explicit_presence=False,
        )
    @phase.setter
    def phase(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("phase",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def state(self) -> "pb_enum.Enum":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        )
    @state.setter
    def state(self, value: "pb_enum.Enum") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def reconciling(self) -> "builtins.bool":
        return super()._get_field("reconciling", base=self._pb2_base_, explicit_presence=False,
        )
    @reconciling.setter
    def reconciling(self, value: "builtins.bool") -> None:
        return super()._set_field("reconciling",value, base=self._pb2_base_,explicit_presence=False)
    
