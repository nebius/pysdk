# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.message as message_1
import nebius.api.nebius.msp.postgresql.v1alpha1.config.postgresql_pb2 as postgresql_pb2
import google.protobuf.message as message_2
import builtins as builtins

# file: nebius/msp/postgresql/v1alpha1/config/postgresql.proto
class PostgresqlConfig16(message_1.Message):
    _PB2_CLASS_ = postgresql_pb2.PostgresqlConfig16
    _pb2_base_: postgresql_pb2.PostgresqlConfig16
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        autovacuum_work_mem: "builtins.int|None" = None,
        statement_timeout: "builtins.int|None" = None,
        idle_in_transaction_session_timeout: "builtins.int|None" = None,
        autovacuum_vacuum_cost_delay: "builtins.int|None" = None,
        autovacuum_vacuum_cost_limit: "builtins.int|None" = None,
        autovacuum_naptime: "builtins.int|None" = None,
        autovacuum_vacuum_scale_factor: "builtins.float|None" = None,
        autovacuum_analyze_scale_factor: "builtins.float|None" = None,
        default_transaction_read_only: "builtins.bool|None" = None,
        search_path: "builtins.str|None" = None,
        max_connections: "builtins.int|None" = None,
        shared_buffers: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if autovacuum_work_mem is not None:
            self.autovacuum_work_mem = autovacuum_work_mem
        if statement_timeout is not None:
            self.statement_timeout = statement_timeout
        if idle_in_transaction_session_timeout is not None:
            self.idle_in_transaction_session_timeout = idle_in_transaction_session_timeout
        if autovacuum_vacuum_cost_delay is not None:
            self.autovacuum_vacuum_cost_delay = autovacuum_vacuum_cost_delay
        if autovacuum_vacuum_cost_limit is not None:
            self.autovacuum_vacuum_cost_limit = autovacuum_vacuum_cost_limit
        if autovacuum_naptime is not None:
            self.autovacuum_naptime = autovacuum_naptime
        if autovacuum_vacuum_scale_factor is not None:
            self.autovacuum_vacuum_scale_factor = autovacuum_vacuum_scale_factor
        if autovacuum_analyze_scale_factor is not None:
            self.autovacuum_analyze_scale_factor = autovacuum_analyze_scale_factor
        if default_transaction_read_only is not None:
            self.default_transaction_read_only = default_transaction_read_only
        if search_path is not None:
            self.search_path = search_path
        if max_connections is not None:
            self.max_connections = max_connections
        if shared_buffers is not None:
            self.shared_buffers = shared_buffers
    
    @property
    def autovacuum_work_mem(self) -> "builtins.int|None":
        return super()._get_field("autovacuum_work_mem", base=self._pb2_base_, explicit_presence=True,
        )
    @autovacuum_work_mem.setter
    def autovacuum_work_mem(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_work_mem",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def statement_timeout(self) -> "builtins.int|None":
        return super()._get_field("statement_timeout", base=self._pb2_base_, explicit_presence=True,
        )
    @statement_timeout.setter
    def statement_timeout(self, value: "builtins.int|None") -> None:
        return super()._set_field("statement_timeout",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def idle_in_transaction_session_timeout(self) -> "builtins.int|None":
        return super()._get_field("idle_in_transaction_session_timeout", base=self._pb2_base_, explicit_presence=True,
        )
    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: "builtins.int|None") -> None:
        return super()._set_field("idle_in_transaction_session_timeout",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def autovacuum_vacuum_cost_delay(self) -> "builtins.int|None":
        return super()._get_field("autovacuum_vacuum_cost_delay", base=self._pb2_base_, explicit_presence=True,
        )
    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_vacuum_cost_delay",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def autovacuum_vacuum_cost_limit(self) -> "builtins.int|None":
        return super()._get_field("autovacuum_vacuum_cost_limit", base=self._pb2_base_, explicit_presence=True,
        )
    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_vacuum_cost_limit",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def autovacuum_naptime(self) -> "builtins.int|None":
        return super()._get_field("autovacuum_naptime", base=self._pb2_base_, explicit_presence=True,
        )
    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_naptime",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def autovacuum_vacuum_scale_factor(self) -> "builtins.float|None":
        return super()._get_field("autovacuum_vacuum_scale_factor", base=self._pb2_base_, explicit_presence=True,
        )
    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: "builtins.float|None") -> None:
        return super()._set_field("autovacuum_vacuum_scale_factor",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def autovacuum_analyze_scale_factor(self) -> "builtins.float|None":
        return super()._get_field("autovacuum_analyze_scale_factor", base=self._pb2_base_, explicit_presence=True,
        )
    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: "builtins.float|None") -> None:
        return super()._set_field("autovacuum_analyze_scale_factor",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def default_transaction_read_only(self) -> "builtins.bool|None":
        return super()._get_field("default_transaction_read_only", base=self._pb2_base_, explicit_presence=True,
        )
    @default_transaction_read_only.setter
    def default_transaction_read_only(self, value: "builtins.bool|None") -> None:
        return super()._set_field("default_transaction_read_only",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def search_path(self) -> "builtins.str|None":
        return super()._get_field("search_path", base=self._pb2_base_, explicit_presence=True,
        )
    @search_path.setter
    def search_path(self, value: "builtins.str|None") -> None:
        return super()._set_field("search_path",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def max_connections(self) -> "builtins.int|None":
        return super()._get_field("max_connections", base=self._pb2_base_, explicit_presence=True,
        )
    @max_connections.setter
    def max_connections(self, value: "builtins.int|None") -> None:
        return super()._set_field("max_connections",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def shared_buffers(self) -> "builtins.int|None":
        return super()._get_field("shared_buffers", base=self._pb2_base_, explicit_presence=True,
        )
    @shared_buffers.setter
    def shared_buffers(self, value: "builtins.int|None") -> None:
        return super()._set_field("shared_buffers",value, base=self._pb2_base_,explicit_presence=True)
    
