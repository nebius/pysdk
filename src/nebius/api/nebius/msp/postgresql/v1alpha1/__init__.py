# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_classes as pb_classes
import nebius.api.nebius.msp.postgresql.v1alpha1.preset_pb2 as preset_pb2
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_1
import nebius.api.nebius.msp.v1alpha1.resource as resource_1
import nebius.api.nebius.msp.v1alpha1.resource.template_pb2 as template_pb2
import nebius.api.nebius.msp.postgresql.v1alpha1.cluster_pb2 as cluster_pb2
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import nebius.base.protos.pb_enum as pb_enum
import builtins as builtins
import nebius.api.nebius.msp.v1alpha1 as v1alpha1_1
import nebius.api.nebius.msp.v1alpha1.cluster_pb2 as cluster_pb2_1
import nebius.api.nebius.msp.postgresql.v1alpha1.config as config_1
import nebius.api.nebius.msp.postgresql.v1alpha1.config.postgresql_pb2 as postgresql_pb2
import nebius.api.nebius.msp.postgresql.v1alpha1.cluster_service_pb2 as cluster_service_pb2
import collections.abc as abc
import nebius.aio.client as client
import nebius.api.nebius.common.v1alpha1 as v1alpha1_2
import typing as typing
import grpc as grpc
import nebius.aio.request as request_1
import nebius.aio.operation as operation
import nebius.api.nebius.common.v1alpha1.operation_pb2 as operation_pb2
#@ local imports here @#

# file: nebius/msp/postgresql/v1alpha1/preset.proto
class TemplateSpec(pb_classes.Message):
    __PB2_CLASS__ = preset_pb2.TemplateSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.TemplateSpec",preset_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        hosts: "resource_1.HostSpec|template_pb2.HostSpec|None" = None,
        disk: "resource_1.DiskSpec|template_pb2.DiskSpec|None" = None,
        resources: "resource_1.ResourcesSpec|template_pb2.ResourcesSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if hosts is not None:
            self.hosts = hosts
        if disk is not None:
            self.disk = disk
        if resources is not None:
            self.resources = resources
    
    @property
    def hosts(self) -> "resource_1.HostSpec":
        return super()._get_field("hosts", explicit_presence=False,
        wrap=resource_1.HostSpec,
        )
    @hosts.setter
    def hosts(self, value: "resource_1.HostSpec|template_pb2.HostSpec") -> None:
        return super()._set_field("hosts",value,explicit_presence=False,
        )
    
    @property
    def disk(self) -> "resource_1.DiskSpec":
        return super()._get_field("disk", explicit_presence=False,
        wrap=resource_1.DiskSpec,
        )
    @disk.setter
    def disk(self, value: "resource_1.DiskSpec|template_pb2.DiskSpec") -> None:
        return super()._set_field("disk",value,explicit_presence=False,
        )
    
    @property
    def resources(self) -> "resource_1.ResourcesSpec":
        return super()._get_field("resources", explicit_presence=False,
        wrap=resource_1.ResourcesSpec,
        )
    @resources.setter
    def resources(self, value: "resource_1.ResourcesSpec|template_pb2.ResourcesSpec") -> None:
        return super()._set_field("resources",value,explicit_presence=False,
        )
    
# file: nebius/msp/postgresql/v1alpha1/cluster.proto
class Cluster(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.Cluster
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.Cluster",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
        status: "ClusterStatus|cluster_pb2.ClusterStatus|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
    @property
    def status(self) -> "ClusterStatus":
        return super()._get_field("status", explicit_presence=False,
        wrap=ClusterStatus,
        )
    @status.setter
    def status(self, value: "ClusterStatus|cluster_pb2.ClusterStatus") -> None:
        return super()._set_field("status",value,explicit_presence=False,
        )
    
class ConnectionPoolerConfig(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ConnectionPoolerConfig
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.ConnectionPoolerConfig",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    class PoolingMode(pb_enum.Enum):
        __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.msp.postgresql.v1alpha1.ConnectionPoolerConfig.PoolingMode",cluster_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        POOLING_MODE_UNSPECIFIED = 0
        SESSION = 1
        TRANSACTION = 2
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        pooling_mode: "ConnectionPoolerConfig.PoolingMode|cluster_pb2.ConnectionPoolerConfig.PoolingMode|None" = None,
        max_pool_size: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if pooling_mode is not None:
            self.pooling_mode = pooling_mode
        if max_pool_size is not None:
            self.max_pool_size = max_pool_size
    
    @property
    def pooling_mode(self) -> "ConnectionPoolerConfig.PoolingMode":
        return super()._get_field("pooling_mode", explicit_presence=False,
        wrap=ConnectionPoolerConfig.PoolingMode,
        )
    @pooling_mode.setter
    def pooling_mode(self, value: "ConnectionPoolerConfig.PoolingMode|cluster_pb2.ConnectionPoolerConfig.PoolingMode") -> None:
        return super()._set_field("pooling_mode",value,explicit_presence=False,
        )
    
    @property
    def max_pool_size(self) -> "builtins.int|None":
        return super()._get_field("max_pool_size", explicit_presence=True,
        )
    @max_pool_size.setter
    def max_pool_size(self, value: "builtins.int|None") -> None:
        return super()._set_field("max_pool_size",value,explicit_presence=True,
        )
    
class ClusterSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ClusterSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.ClusterSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        description: "builtins.str|None" = None,
        network_id: "builtins.str|None" = None,
        config: "ConfigSpec|cluster_pb2.ConfigSpec|None" = None,
        bootstrap: "BootstrapSpec|cluster_pb2.BootstrapSpec|None" = None,
        backup: "BackupSpec|cluster_pb2.BackupSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if description is not None:
            self.description = description
        if network_id is not None:
            self.network_id = network_id
        if config is not None:
            self.config = config
        if bootstrap is not None:
            self.bootstrap = bootstrap
        if backup is not None:
            self.backup = backup
    
    @property
    def description(self) -> "builtins.str":
        return super()._get_field("description", explicit_presence=False,
        )
    @description.setter
    def description(self, value: "builtins.str") -> None:
        return super()._set_field("description",value,explicit_presence=False,
        )
    
    @property
    def network_id(self) -> "builtins.str":
        return super()._get_field("network_id", explicit_presence=False,
        )
    @network_id.setter
    def network_id(self, value: "builtins.str") -> None:
        return super()._set_field("network_id",value,explicit_presence=False,
        )
    
    @property
    def config(self) -> "ConfigSpec":
        return super()._get_field("config", explicit_presence=False,
        wrap=ConfigSpec,
        )
    @config.setter
    def config(self, value: "ConfigSpec|cluster_pb2.ConfigSpec") -> None:
        return super()._set_field("config",value,explicit_presence=False,
        )
    
    @property
    def bootstrap(self) -> "BootstrapSpec":
        return super()._get_field("bootstrap", explicit_presence=False,
        wrap=BootstrapSpec,
        )
    @bootstrap.setter
    def bootstrap(self, value: "BootstrapSpec|cluster_pb2.BootstrapSpec") -> None:
        return super()._set_field("bootstrap",value,explicit_presence=False,
        )
    
    @property
    def backup(self) -> "BackupSpec":
        return super()._get_field("backup", explicit_presence=False,
        wrap=BackupSpec,
        )
    @backup.setter
    def backup(self, value: "BackupSpec|cluster_pb2.BackupSpec") -> None:
        return super()._set_field("backup",value,explicit_presence=False,
        )
    
class ClusterStatus(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ClusterStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.ClusterStatus",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        phase: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase|None" = None,
        state: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State|None" = None,
        endpoints: "EndpointsSpec|cluster_pb2.EndpointsSpec|None" = None,
        preset_details: "resource_1.PresetDetails|template_pb2.PresetDetails|None" = None,
        connection_endpoints: "Endpoints|cluster_pb2.Endpoints|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if phase is not None:
            self.phase = phase
        if state is not None:
            self.state = state
        if endpoints is not None:
            self.endpoints = endpoints
        if preset_details is not None:
            self.preset_details = preset_details
        if connection_endpoints is not None:
            self.connection_endpoints = connection_endpoints
    
    @property
    def phase(self) -> "v1alpha1_1.ClusterStatus.Phase":
        return super()._get_field("phase", explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.Phase,
        )
    @phase.setter
    def phase(self, value: "v1alpha1_1.ClusterStatus.Phase|cluster_pb2_1.ClusterStatus.Phase") -> None:
        return super()._set_field("phase",value,explicit_presence=False,
        )
    
    @property
    def state(self) -> "v1alpha1_1.ClusterStatus.State":
        return super()._get_field("state", explicit_presence=False,
        wrap=v1alpha1_1.ClusterStatus.State,
        )
    @state.setter
    def state(self, value: "v1alpha1_1.ClusterStatus.State|cluster_pb2_1.ClusterStatus.State") -> None:
        return super()._set_field("state",value,explicit_presence=False,
        )
    
    @property
    def endpoints(self) -> "EndpointsSpec":
        return super()._get_field("endpoints", explicit_presence=False,
        wrap=EndpointsSpec,
        )
    @endpoints.setter
    def endpoints(self, value: "EndpointsSpec|cluster_pb2.EndpointsSpec") -> None:
        return super()._set_field("endpoints",value,explicit_presence=False,
        )
    
    @property
    def preset_details(self) -> "resource_1.PresetDetails":
        return super()._get_field("preset_details", explicit_presence=False,
        wrap=resource_1.PresetDetails,
        )
    @preset_details.setter
    def preset_details(self, value: "resource_1.PresetDetails|template_pb2.PresetDetails") -> None:
        return super()._set_field("preset_details",value,explicit_presence=False,
        )
    
    @property
    def connection_endpoints(self) -> "Endpoints":
        return super()._get_field("connection_endpoints", explicit_presence=False,
        wrap=Endpoints,
        )
    @connection_endpoints.setter
    def connection_endpoints(self, value: "Endpoints|cluster_pb2.Endpoints") -> None:
        return super()._set_field("connection_endpoints",value,explicit_presence=False,
        )
    
class EndpointsSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.EndpointsSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.EndpointsSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        read_write_endpoint: "builtins.str|None" = None,
        read_only_endpoint: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if read_write_endpoint is not None:
            self.read_write_endpoint = read_write_endpoint
        if read_only_endpoint is not None:
            self.read_only_endpoint = read_only_endpoint
    
    @property
    def read_write_endpoint(self) -> "builtins.str":
        return super()._get_field("read_write_endpoint", explicit_presence=False,
        )
    @read_write_endpoint.setter
    def read_write_endpoint(self, value: "builtins.str") -> None:
        return super()._set_field("read_write_endpoint",value,explicit_presence=False,
        )
    
    @property
    def read_only_endpoint(self) -> "builtins.str|None":
        return super()._get_field("read_only_endpoint", explicit_presence=True,
        )
    @read_only_endpoint.setter
    def read_only_endpoint(self, value: "builtins.str|None") -> None:
        return super()._set_field("read_only_endpoint",value,explicit_presence=True,
        )
    
class Endpoints(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.Endpoints
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.Endpoints",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        private_read_write: "builtins.str|None" = None,
        private_read_only: "builtins.str|None" = None,
        public_read_write: "builtins.str|None" = None,
        public_read_only: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if private_read_write is not None:
            self.private_read_write = private_read_write
        if private_read_only is not None:
            self.private_read_only = private_read_only
        if public_read_write is not None:
            self.public_read_write = public_read_write
        if public_read_only is not None:
            self.public_read_only = public_read_only
    
    @property
    def private_read_write(self) -> "builtins.str":
        return super()._get_field("private_read_write", explicit_presence=False,
        )
    @private_read_write.setter
    def private_read_write(self, value: "builtins.str") -> None:
        return super()._set_field("private_read_write",value,explicit_presence=False,
        )
    
    @property
    def private_read_only(self) -> "builtins.str":
        return super()._get_field("private_read_only", explicit_presence=False,
        )
    @private_read_only.setter
    def private_read_only(self, value: "builtins.str") -> None:
        return super()._set_field("private_read_only",value,explicit_presence=False,
        )
    
    @property
    def public_read_write(self) -> "builtins.str":
        return super()._get_field("public_read_write", explicit_presence=False,
        )
    @public_read_write.setter
    def public_read_write(self, value: "builtins.str") -> None:
        return super()._set_field("public_read_write",value,explicit_presence=False,
        )
    
    @property
    def public_read_only(self) -> "builtins.str":
        return super()._get_field("public_read_only", explicit_presence=False,
        )
    @public_read_only.setter
    def public_read_only(self, value: "builtins.str") -> None:
        return super()._set_field("public_read_only",value,explicit_presence=False,
        )
    
class ConfigSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.ConfigSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.ConfigSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        version: "builtins.str|None" = None,
        pooler_config: "ConnectionPoolerConfig|cluster_pb2.ConnectionPoolerConfig|None" = None,
        resources: "TemplateSpec|preset_pb2.TemplateSpec|None" = None,
        postgresql_config_16: "config_1.PostgresqlConfig16|postgresql_pb2.PostgresqlConfig16|None" = None,
        public_access: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if version is not None:
            self.version = version
        if pooler_config is not None:
            self.pooler_config = pooler_config
        if resources is not None:
            self.resources = resources
        if postgresql_config_16 is not None:
            self.postgresql_config_16 = postgresql_config_16
        if public_access is not None:
            self.public_access = public_access
    
    @property
    def version(self) -> "builtins.str":
        return super()._get_field("version", explicit_presence=False,
        )
    @version.setter
    def version(self, value: "builtins.str") -> None:
        return super()._set_field("version",value,explicit_presence=False,
        )
    
    @property
    def pooler_config(self) -> "ConnectionPoolerConfig":
        return super()._get_field("pooler_config", explicit_presence=False,
        wrap=ConnectionPoolerConfig,
        )
    @pooler_config.setter
    def pooler_config(self, value: "ConnectionPoolerConfig|cluster_pb2.ConnectionPoolerConfig") -> None:
        return super()._set_field("pooler_config",value,explicit_presence=False,
        )
    
    @property
    def resources(self) -> "TemplateSpec":
        return super()._get_field("resources", explicit_presence=False,
        wrap=TemplateSpec,
        )
    @resources.setter
    def resources(self, value: "TemplateSpec|preset_pb2.TemplateSpec") -> None:
        return super()._set_field("resources",value,explicit_presence=False,
        )
    
    @property
    def postgresql_config_16(self) -> "config_1.PostgresqlConfig16":
        return super()._get_field("postgresql_config_16", explicit_presence=False,
        wrap=config_1.PostgresqlConfig16,
        )
    @postgresql_config_16.setter
    def postgresql_config_16(self, value: "config_1.PostgresqlConfig16|postgresql_pb2.PostgresqlConfig16") -> None:
        return super()._set_field("postgresql_config_16",value,explicit_presence=False,
        )
    
    @property
    def public_access(self) -> "builtins.bool":
        return super()._get_field("public_access", explicit_presence=False,
        )
    @public_access.setter
    def public_access(self, value: "builtins.bool") -> None:
        return super()._set_field("public_access",value,explicit_presence=False,
        )
    
class BootstrapSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.BootstrapSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.BootstrapSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        user_name: "builtins.str|None" = None,
        user_password: "builtins.str|None" = None,
        db_name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if user_name is not None:
            self.user_name = user_name
        if user_password is not None:
            self.user_password = user_password
        if db_name is not None:
            self.db_name = db_name
    
    @property
    def user_name(self) -> "builtins.str":
        return super()._get_field("user_name", explicit_presence=False,
        )
    @user_name.setter
    def user_name(self, value: "builtins.str") -> None:
        return super()._set_field("user_name",value,explicit_presence=False,
        )
    
    @property
    def user_password(self) -> "builtins.str":
        return super()._get_field("user_password", explicit_presence=False,
        )
    @user_password.setter
    def user_password(self, value: "builtins.str") -> None:
        return super()._set_field("user_password",value,explicit_presence=False,
        )
    
    @property
    def db_name(self) -> "builtins.str":
        return super()._get_field("db_name", explicit_presence=False,
        )
    @db_name.setter
    def db_name(self, value: "builtins.str") -> None:
        return super()._set_field("db_name",value,explicit_presence=False,
        )
    
class BackupSpec(pb_classes.Message):
    __PB2_CLASS__ = cluster_pb2.BackupSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.BackupSpec",cluster_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        backup_window_start: "builtins.str|None" = None,
        retention_policy: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if backup_window_start is not None:
            self.backup_window_start = backup_window_start
        if retention_policy is not None:
            self.retention_policy = retention_policy
    
    @property
    def backup_window_start(self) -> "builtins.str":
        return super()._get_field("backup_window_start", explicit_presence=False,
        )
    @backup_window_start.setter
    def backup_window_start(self, value: "builtins.str") -> None:
        return super()._set_field("backup_window_start",value,explicit_presence=False,
        )
    
    @property
    def retention_policy(self) -> "builtins.str":
        return super()._get_field("retention_policy", explicit_presence=False,
        )
    @retention_policy.setter
    def retention_policy(self, value: "builtins.str") -> None:
        return super()._set_field("retention_policy",value,explicit_presence=False,
        )
    
# file: nebius/msp/postgresql/v1alpha1/cluster_service.proto
class GetClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.GetClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.GetClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class ListClustersRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.ListClustersRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.ListClustersRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value,explicit_presence=False,
        )
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value,explicit_presence=False,
        )
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value,explicit_presence=False,
        )
    
class ListClustersResponse(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.ListClustersResponse
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.ListClustersResponse",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        clusters: "abc.Iterable[Cluster]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if clusters is not None:
            self.clusters = clusters
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def clusters(self) -> "abc.MutableSequence[Cluster]":
        return super()._get_field("clusters", explicit_presence=False,
        wrap=pb_classes.Repeated.with_wrap(Cluster,None),
        )
    @clusters.setter
    def clusters(self, value: "abc.Iterable[Cluster]") -> None:
        return super()._set_field("clusters",value,explicit_presence=False,
        )
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value,explicit_presence=False,
        )
    
class CreateClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.CreateClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.CreateClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    
class DeleteClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.DeleteClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.DeleteClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value,explicit_presence=False,
        )
    
class UpdateClusterRequest(pb_classes.Message):
    __PB2_CLASS__ = cluster_service_pb2.UpdateClusterRequest
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.UpdateClusterRequest",cluster_service_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "ClusterSpec|cluster_pb2.ClusterSpec|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata":
        return super()._get_field("metadata", explicit_presence=False,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata") -> None:
        return super()._set_field("metadata",value,explicit_presence=False,
        )
    
    @property
    def spec(self) -> "ClusterSpec":
        return super()._get_field("spec", explicit_presence=False,
        wrap=ClusterSpec,
        )
    @spec.setter
    def spec(self, value: "ClusterSpec|cluster_pb2.ClusterSpec") -> None:
        return super()._set_field("spec",value,explicit_presence=False,
        )
    

class ClusterServiceClient(client.Client):
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.ServiceDescriptor](".nebius.msp.postgresql.v1alpha1.ClusterService",cluster_service_pb2.DESCRIPTOR,descriptor_1.ServiceDescriptor)
    __service_name__ = ".nebius.msp.postgresql.v1alpha1.ClusterService"
    __operation_type__ = v1alpha1_2.Operation
    
    def get(self,
        request: "GetClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["GetClusterRequest","Cluster"]:
        return super().request(
            method="Get",
            request=request,
            result_pb2_class=cluster_pb2.Cluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def get_by_name(self,
        request: "v1_1.GetByNameRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["v1_1.GetByNameRequest","Cluster"]:
        return super().request(
            method="GetByName",
            request=request,
            result_pb2_class=cluster_pb2.Cluster,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def list(self,
        request: "ListClustersRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["ListClustersRequest","ListClustersResponse"]:
        return super().request(
            method="List",
            request=request,
            result_pb2_class=cluster_service_pb2.ListClustersResponse,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
        )
    
    def create(self,
        request: "CreateClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["CreateClusterRequest","operation.Operation[v1alpha1_2.Operation]"]:
        return super().request(
            method="Create",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def delete(self,
        request: "DeleteClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["DeleteClusterRequest","operation.Operation[v1alpha1_2.Operation]"]:
        return super().request(
            method="Delete",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    
    def update(self,
        request: "UpdateClusterRequest",
        metadata: typing.Iterable[typing.Tuple[builtins.str,builtins.str]]|None = None,
        timeout: builtins.float|None = None,
        credentials: grpc.CallCredentials | None = None,
        wait_for_ready: builtins.bool | None = None,
        compression: grpc.Compression | None = None,
    ) -> request_1.Request["UpdateClusterRequest","operation.Operation[v1alpha1_2.Operation]"]:
        return super().request(
            method="Update",
            request=request,
            result_pb2_class=operation_pb2.Operation,
            metadata=metadata,
            timeout=timeout,
            credentials=credentials,
            wait_for_ready=wait_for_ready,
            compression=compression,
            result_wrapper=operation.Operation,
        )
    

__all__ = [
    #@ local import names here @#
    "TemplateSpec",
    "Cluster",
    "ConnectionPoolerConfig",
    "ClusterSpec",
    "ClusterStatus",
    "EndpointsSpec",
    "Endpoints",
    "ConfigSpec",
    "BootstrapSpec",
    "BackupSpec",
    "GetClusterRequest",
    "ListClustersRequest",
    "ListClustersResponse",
    "CreateClusterRequest",
    "DeleteClusterRequest",
    "UpdateClusterRequest",
    "ClusterServiceClient",
]
