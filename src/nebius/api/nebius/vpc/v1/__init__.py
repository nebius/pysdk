# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_enum as pb_enum
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import nebius.api.nebius.vpc.v1.pool_pb2 as pool_pb2
import nebius.base.protos.message as message_1
import google.protobuf.message as message_2
import nebius.api.nebius.common.v1 as v1_1
import nebius.api.nebius.common.v1.metadata_pb2 as metadata_pb2
import builtins as builtins
import collections.abc as abc
import nebius.api.nebius.vpc.v1.allocation_pb2 as allocation_pb2
import nebius.api.nebius.vpc.v1.allocation_service_pb2 as allocation_service_pb2
import nebius.api.nebius.vpc.v1.network_pb2 as network_pb2
import nebius.api.nebius.vpc.v1.network_service_pb2 as network_service_pb2
import nebius.api.nebius.vpc.v1.pool_service_pb2 as pool_service_pb2
import nebius.api.nebius.vpc.v1.subnet_pb2 as subnet_pb2
import nebius.api.nebius.vpc.v1.subnet_service_pb2 as subnet_service_pb2

# file: nebius/vpc/v1/pool.proto
class AddressBlockState(pb_enum.Enum):
    _PB2_DESCRIPTOR_ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.vpc.v1.AddressBlockState",pool_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    STATE_UNSPECIFIED = 0
    AVAILABLE = 1
    DISABLED = 2

class IpVersion(pb_enum.Enum):
    _PB2_DESCRIPTOR_ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.vpc.v1.IpVersion",pool_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    IP_VERSION_UNSPECIFIED = 0
    IPV4 = 1
    IPV6 = 2

class IpVisibility(pb_enum.Enum):
    _PB2_DESCRIPTOR_ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.vpc.v1.IpVisibility",pool_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
    IP_VISIBILITY_UNSPECIFIED = 0
    PRIVATE = 1
    PUBLIC = 2

class Pool(message_1.Message):
    _PB2_CLASS_ = pool_pb2.Pool
    _pb2_base_: pool_pb2.Pool
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "PoolSpec|pool_pb2.PoolSpec|None" = None,
        status: "PoolStatus|pool_pb2.PoolStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "PoolSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=PoolSpec,
        )
    @spec.setter
    def spec(self, value: "PoolSpec|pool_pb2.PoolSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "PoolStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=PoolStatus,
        )
    @status.setter
    def status(self, value: "PoolStatus|pool_pb2.PoolStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class PoolSpec(message_1.Message):
    _PB2_CLASS_ = pool_pb2.PoolSpec
    _pb2_base_: pool_pb2.PoolSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        source_pool_id: "builtins.str|None" = None,
        version: "IpVersion|pool_pb2.IpVersion|None" = None,
        visibility: "IpVisibility|pool_pb2.IpVisibility|None" = None,
        cidrs: "abc.MutableSequence[PoolCidr]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if source_pool_id is not None:
            self.source_pool_id = source_pool_id
        if version is not None:
            self.version = version
        if visibility is not None:
            self.visibility = visibility
        if cidrs is not None:
            self.cidrs = cidrs
    
    @property
    def source_pool_id(self) -> "builtins.str":
        return super()._get_field("source_pool_id", base=self._pb2_base_, explicit_presence=False,
        )
    @source_pool_id.setter
    def source_pool_id(self, value: "builtins.str") -> None:
        return super()._set_field("source_pool_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def version(self) -> "IpVersion":
        return super()._get_field("version", base=self._pb2_base_, explicit_presence=False,
        wrap=IpVersion,
        )
    @version.setter
    def version(self, value: "IpVersion|pool_pb2.IpVersion") -> None:
        return super()._set_field("version",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def visibility(self) -> "IpVisibility":
        return super()._get_field("visibility", base=self._pb2_base_, explicit_presence=False,
        wrap=IpVisibility,
        )
    @visibility.setter
    def visibility(self, value: "IpVisibility|pool_pb2.IpVisibility") -> None:
        return super()._set_field("visibility",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def cidrs(self) -> "abc.MutableSequence[PoolCidr]|None":
        return super()._get_field("cidrs", base=self._pb2_base_, explicit_presence=True,
        wrap=PoolCidr,
        )
    @cidrs.setter
    def cidrs(self, value: "abc.MutableSequence[PoolCidr]|None") -> None:
        return super()._set_field("cidrs",value, base=self._pb2_base_,explicit_presence=True)
    
class PoolCidr(message_1.Message):
    _PB2_CLASS_ = pool_pb2.PoolCidr
    _pb2_base_: pool_pb2.PoolCidr
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        cidr: "builtins.str|None" = None,
        state: "AddressBlockState|pool_pb2.AddressBlockState|None" = None,
        max_mask_length: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if cidr is not None:
            self.cidr = cidr
        if state is not None:
            self.state = state
        if max_mask_length is not None:
            self.max_mask_length = max_mask_length
    
    @property
    def cidr(self) -> "builtins.str":
        return super()._get_field("cidr", base=self._pb2_base_, explicit_presence=False,
        )
    @cidr.setter
    def cidr(self, value: "builtins.str") -> None:
        return super()._set_field("cidr",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def state(self) -> "AddressBlockState":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=AddressBlockState,
        )
    @state.setter
    def state(self, value: "AddressBlockState|pool_pb2.AddressBlockState") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def max_mask_length(self) -> "builtins.int":
        return super()._get_field("max_mask_length", base=self._pb2_base_, explicit_presence=False,
        )
    @max_mask_length.setter
    def max_mask_length(self, value: "builtins.int") -> None:
        return super()._set_field("max_mask_length",value, base=self._pb2_base_,explicit_presence=False)
    
class PoolStatus(message_1.Message):
    _PB2_CLASS_ = pool_pb2.PoolStatus
    _pb2_base_: pool_pb2.PoolStatus
    
    class State(pb_enum.Enum):
        _PB2_DESCRIPTOR_ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.vpc.v1.PoolStatus.State",pool_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATE_UNSPECIFIED = 0
        CREATING = 1
        READY = 2
        DELETING = 3
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        state: "PoolStatus.State|pool_pb2.PoolStatus.State|None" = None,
        cidrs: "abc.MutableSequence[builtins.str]|None" = None,
        scope_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if state is not None:
            self.state = state
        if cidrs is not None:
            self.cidrs = cidrs
        if scope_id is not None:
            self.scope_id = scope_id
    
    @property
    def state(self) -> "PoolStatus.State":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=PoolStatus.State,
        )
    @state.setter
    def state(self, value: "PoolStatus.State|pool_pb2.PoolStatus.State") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def cidrs(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("cidrs", base=self._pb2_base_, explicit_presence=False,
        )
    @cidrs.setter
    def cidrs(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("cidrs",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def scope_id(self) -> "builtins.str":
        return super()._get_field("scope_id", base=self._pb2_base_, explicit_presence=False,
        )
    @scope_id.setter
    def scope_id(self, value: "builtins.str") -> None:
        return super()._set_field("scope_id",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/vpc/v1/allocation.proto
class Allocation(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.Allocation
    _pb2_base_: allocation_pb2.Allocation
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "AllocationSpec|allocation_pb2.AllocationSpec|None" = None,
        status: "AllocationStatus|allocation_pb2.AllocationStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "AllocationSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=AllocationSpec,
        )
    @spec.setter
    def spec(self, value: "AllocationSpec|allocation_pb2.AllocationSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "AllocationStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=AllocationStatus,
        )
    @status.setter
    def status(self, value: "AllocationStatus|allocation_pb2.AllocationStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class AllocationSpec(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.AllocationSpec
    _pb2_base_: allocation_pb2.AllocationSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        ipv4_private: "IPv4PrivateAllocationSpec|allocation_pb2.IPv4PrivateAllocationSpec|None" = None,
        ipv4_public: "IPv4PublicAllocationSpec|allocation_pb2.IPv4PublicAllocationSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if ipv4_private is not None:
            self.ipv4_private = ipv4_private
        if ipv4_public is not None:
            self.ipv4_public = ipv4_public
    
    @property
    def ipv4_private(self) -> "IPv4PrivateAllocationSpec|None":
        return super()._get_field("ipv4_private", base=self._pb2_base_, explicit_presence=True,
        wrap=IPv4PrivateAllocationSpec,
        )
    @ipv4_private.setter
    def ipv4_private(self, value: "IPv4PrivateAllocationSpec|allocation_pb2.IPv4PrivateAllocationSpec|None") -> None:
        return super()._set_field("ipv4_private",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def ipv4_public(self) -> "IPv4PublicAllocationSpec|None":
        return super()._get_field("ipv4_public", base=self._pb2_base_, explicit_presence=True,
        wrap=IPv4PublicAllocationSpec,
        )
    @ipv4_public.setter
    def ipv4_public(self, value: "IPv4PublicAllocationSpec|allocation_pb2.IPv4PublicAllocationSpec|None") -> None:
        return super()._set_field("ipv4_public",value, base=self._pb2_base_,explicit_presence=True)
    
class IPv4PrivateAllocationSpec(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.IPv4PrivateAllocationSpec
    _pb2_base_: allocation_pb2.IPv4PrivateAllocationSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        cidr: "builtins.str|None" = None,
        subnet_id: "builtins.str|None" = None,
        pool_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if cidr is not None:
            self.cidr = cidr
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if pool_id is not None:
            self.pool_id = pool_id
    
    @property
    def cidr(self) -> "builtins.str":
        return super()._get_field("cidr", base=self._pb2_base_, explicit_presence=False,
        )
    @cidr.setter
    def cidr(self, value: "builtins.str") -> None:
        return super()._set_field("cidr",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def subnet_id(self) -> "builtins.str|None":
        return super()._get_field("subnet_id", base=self._pb2_base_, explicit_presence=True,
        )
    @subnet_id.setter
    def subnet_id(self, value: "builtins.str|None") -> None:
        return super()._set_field("subnet_id",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def pool_id(self) -> "builtins.str|None":
        return super()._get_field("pool_id", base=self._pb2_base_, explicit_presence=True,
        )
    @pool_id.setter
    def pool_id(self, value: "builtins.str|None") -> None:
        return super()._set_field("pool_id",value, base=self._pb2_base_,explicit_presence=True)
    
class IPv4PublicAllocationSpec(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.IPv4PublicAllocationSpec
    _pb2_base_: allocation_pb2.IPv4PublicAllocationSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        cidr: "builtins.str|None" = None,
        subnet_id: "builtins.str|None" = None,
        pool_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if cidr is not None:
            self.cidr = cidr
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if pool_id is not None:
            self.pool_id = pool_id
    
    @property
    def cidr(self) -> "builtins.str":
        return super()._get_field("cidr", base=self._pb2_base_, explicit_presence=False,
        )
    @cidr.setter
    def cidr(self, value: "builtins.str") -> None:
        return super()._set_field("cidr",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def subnet_id(self) -> "builtins.str|None":
        return super()._get_field("subnet_id", base=self._pb2_base_, explicit_presence=True,
        )
    @subnet_id.setter
    def subnet_id(self, value: "builtins.str|None") -> None:
        return super()._set_field("subnet_id",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def pool_id(self) -> "builtins.str|None":
        return super()._get_field("pool_id", base=self._pb2_base_, explicit_presence=True,
        )
    @pool_id.setter
    def pool_id(self, value: "builtins.str|None") -> None:
        return super()._set_field("pool_id",value, base=self._pb2_base_,explicit_presence=True)
    
class AllocationStatus(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.AllocationStatus
    _pb2_base_: allocation_pb2.AllocationStatus
    
    class State(pb_enum.Enum):
        _PB2_DESCRIPTOR_ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.vpc.v1.AllocationStatus.State",allocation_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATE_UNSPECIFIED = 0
        CREATING = 1
        ALLOCATED = 2
        ASSIGNED = 3
        DELETING = 4
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        state: "AllocationStatus.State|allocation_pb2.AllocationStatus.State|None" = None,
        details: "AllocationDetails|allocation_pb2.AllocationDetails|None" = None,
        assignment: "Assignment|allocation_pb2.Assignment|None" = None,
        static: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if state is not None:
            self.state = state
        if details is not None:
            self.details = details
        if assignment is not None:
            self.assignment = assignment
        if static is not None:
            self.static = static
    
    @property
    def state(self) -> "AllocationStatus.State":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=AllocationStatus.State,
        )
    @state.setter
    def state(self, value: "AllocationStatus.State|allocation_pb2.AllocationStatus.State") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def details(self) -> "AllocationDetails|None":
        return super()._get_field("details", base=self._pb2_base_, explicit_presence=True,
        wrap=AllocationDetails,
        )
    @details.setter
    def details(self, value: "AllocationDetails|allocation_pb2.AllocationDetails|None") -> None:
        return super()._set_field("details",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def assignment(self) -> "Assignment|None":
        return super()._get_field("assignment", base=self._pb2_base_, explicit_presence=True,
        wrap=Assignment,
        )
    @assignment.setter
    def assignment(self, value: "Assignment|allocation_pb2.Assignment|None") -> None:
        return super()._set_field("assignment",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def static(self) -> "builtins.bool":
        return super()._get_field("static", base=self._pb2_base_, explicit_presence=False,
        )
    @static.setter
    def static(self, value: "builtins.bool") -> None:
        return super()._set_field("static",value, base=self._pb2_base_,explicit_presence=False)
    
class AllocationDetails(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.AllocationDetails
    _pb2_base_: allocation_pb2.AllocationDetails
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        allocated_cidr: "builtins.str|None" = None,
        pool_id: "builtins.str|None" = None,
        version: "IpVersion|pool_pb2.IpVersion|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if allocated_cidr is not None:
            self.allocated_cidr = allocated_cidr
        if pool_id is not None:
            self.pool_id = pool_id
        if version is not None:
            self.version = version
    
    @property
    def allocated_cidr(self) -> "builtins.str":
        return super()._get_field("allocated_cidr", base=self._pb2_base_, explicit_presence=False,
        )
    @allocated_cidr.setter
    def allocated_cidr(self, value: "builtins.str") -> None:
        return super()._set_field("allocated_cidr",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def pool_id(self) -> "builtins.str":
        return super()._get_field("pool_id", base=self._pb2_base_, explicit_presence=False,
        )
    @pool_id.setter
    def pool_id(self, value: "builtins.str") -> None:
        return super()._set_field("pool_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def version(self) -> "IpVersion":
        return super()._get_field("version", base=self._pb2_base_, explicit_presence=False,
        wrap=IpVersion,
        )
    @version.setter
    def version(self, value: "IpVersion|pool_pb2.IpVersion") -> None:
        return super()._set_field("version",value, base=self._pb2_base_,explicit_presence=False)
    
class Assignment(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.Assignment
    _pb2_base_: allocation_pb2.Assignment
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        network_interface: "NetworkInterfaceAssignment|allocation_pb2.NetworkInterfaceAssignment|None" = None,
        load_balancer: "LoadBalancerAssignment|allocation_pb2.LoadBalancerAssignment|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if network_interface is not None:
            self.network_interface = network_interface
        if load_balancer is not None:
            self.load_balancer = load_balancer
    
    @property
    def network_interface(self) -> "NetworkInterfaceAssignment|None":
        return super()._get_field("network_interface", base=self._pb2_base_, explicit_presence=True,
        wrap=NetworkInterfaceAssignment,
        )
    @network_interface.setter
    def network_interface(self, value: "NetworkInterfaceAssignment|allocation_pb2.NetworkInterfaceAssignment|None") -> None:
        return super()._set_field("network_interface",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def load_balancer(self) -> "LoadBalancerAssignment|None":
        return super()._get_field("load_balancer", base=self._pb2_base_, explicit_presence=True,
        wrap=LoadBalancerAssignment,
        )
    @load_balancer.setter
    def load_balancer(self, value: "LoadBalancerAssignment|allocation_pb2.LoadBalancerAssignment|None") -> None:
        return super()._set_field("load_balancer",value, base=self._pb2_base_,explicit_presence=True)
    
class NetworkInterfaceAssignment(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.NetworkInterfaceAssignment
    _pb2_base_: allocation_pb2.NetworkInterfaceAssignment
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        instance_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if instance_id is not None:
            self.instance_id = instance_id
        if name is not None:
            self.name = name
    
    @property
    def instance_id(self) -> "builtins.str":
        return super()._get_field("instance_id", base=self._pb2_base_, explicit_presence=False,
        )
    @instance_id.setter
    def instance_id(self, value: "builtins.str") -> None:
        return super()._set_field("instance_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
class LoadBalancerAssignment(message_1.Message):
    _PB2_CLASS_ = allocation_pb2.LoadBalancerAssignment
    _pb2_base_: allocation_pb2.LoadBalancerAssignment
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/vpc/v1/allocation_service.proto
class GetAllocationRequest(message_1.Message):
    _PB2_CLASS_ = allocation_service_pb2.GetAllocationRequest
    _pb2_base_: allocation_service_pb2.GetAllocationRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class GetAllocationByNameRequest(message_1.Message):
    _PB2_CLASS_ = allocation_service_pb2.GetAllocationByNameRequest
    _pb2_base_: allocation_service_pb2.GetAllocationByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
class ListAllocationsRequest(message_1.Message):
    _PB2_CLASS_ = allocation_service_pb2.ListAllocationsRequest
    _pb2_base_: allocation_service_pb2.ListAllocationsRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListAllocationsResponse(message_1.Message):
    _PB2_CLASS_ = allocation_service_pb2.ListAllocationsResponse
    _pb2_base_: allocation_service_pb2.ListAllocationsResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Allocation]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Allocation]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Allocation,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Allocation]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class CreateAllocationRequest(message_1.Message):
    _PB2_CLASS_ = allocation_service_pb2.CreateAllocationRequest
    _pb2_base_: allocation_service_pb2.CreateAllocationRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "AllocationSpec|allocation_pb2.AllocationSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "AllocationSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=AllocationSpec,
        )
    @spec.setter
    def spec(self, value: "AllocationSpec|allocation_pb2.AllocationSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class UpdateAllocationRequest(message_1.Message):
    _PB2_CLASS_ = allocation_service_pb2.UpdateAllocationRequest
    _pb2_base_: allocation_service_pb2.UpdateAllocationRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "AllocationSpec|allocation_pb2.AllocationSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "AllocationSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=AllocationSpec,
        )
    @spec.setter
    def spec(self, value: "AllocationSpec|allocation_pb2.AllocationSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
class DeleteAllocationRequest(message_1.Message):
    _PB2_CLASS_ = allocation_service_pb2.DeleteAllocationRequest
    _pb2_base_: allocation_service_pb2.DeleteAllocationRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/vpc/v1/network.proto
class Network(message_1.Message):
    _PB2_CLASS_ = network_pb2.Network
    _pb2_base_: network_pb2.Network
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "NetworkSpec|network_pb2.NetworkSpec|None" = None,
        status: "NetworkStatus|network_pb2.NetworkStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "NetworkSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=NetworkSpec,
        )
    @spec.setter
    def spec(self, value: "NetworkSpec|network_pb2.NetworkSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "NetworkStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=NetworkStatus,
        )
    @status.setter
    def status(self, value: "NetworkStatus|network_pb2.NetworkStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class NetworkSpec(message_1.Message):
    _PB2_CLASS_ = network_pb2.NetworkSpec
    _pb2_base_: network_pb2.NetworkSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        ipv4_private_pools: "IPv4PrivateNetworkPools|network_pb2.IPv4PrivateNetworkPools|None" = None,
        ipv4_public_pools: "IPv4PublicNetworkPools|network_pb2.IPv4PublicNetworkPools|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if ipv4_private_pools is not None:
            self.ipv4_private_pools = ipv4_private_pools
        if ipv4_public_pools is not None:
            self.ipv4_public_pools = ipv4_public_pools
    
    @property
    def ipv4_private_pools(self) -> "IPv4PrivateNetworkPools|None":
        return super()._get_field("ipv4_private_pools", base=self._pb2_base_, explicit_presence=True,
        wrap=IPv4PrivateNetworkPools,
        )
    @ipv4_private_pools.setter
    def ipv4_private_pools(self, value: "IPv4PrivateNetworkPools|network_pb2.IPv4PrivateNetworkPools|None") -> None:
        return super()._set_field("ipv4_private_pools",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def ipv4_public_pools(self) -> "IPv4PublicNetworkPools|None":
        return super()._get_field("ipv4_public_pools", base=self._pb2_base_, explicit_presence=True,
        wrap=IPv4PublicNetworkPools,
        )
    @ipv4_public_pools.setter
    def ipv4_public_pools(self, value: "IPv4PublicNetworkPools|network_pb2.IPv4PublicNetworkPools|None") -> None:
        return super()._set_field("ipv4_public_pools",value, base=self._pb2_base_,explicit_presence=True)
    
class IPv4PrivateNetworkPools(message_1.Message):
    _PB2_CLASS_ = network_pb2.IPv4PrivateNetworkPools
    _pb2_base_: network_pb2.IPv4PrivateNetworkPools
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        pools: "abc.MutableSequence[NetworkPool]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if pools is not None:
            self.pools = pools
    
    @property
    def pools(self) -> "abc.MutableSequence[NetworkPool]|None":
        return super()._get_field("pools", base=self._pb2_base_, explicit_presence=True,
        wrap=NetworkPool,
        )
    @pools.setter
    def pools(self, value: "abc.MutableSequence[NetworkPool]|None") -> None:
        return super()._set_field("pools",value, base=self._pb2_base_,explicit_presence=True)
    
class IPv4PublicNetworkPools(message_1.Message):
    _PB2_CLASS_ = network_pb2.IPv4PublicNetworkPools
    _pb2_base_: network_pb2.IPv4PublicNetworkPools
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        pools: "abc.MutableSequence[NetworkPool]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if pools is not None:
            self.pools = pools
    
    @property
    def pools(self) -> "abc.MutableSequence[NetworkPool]|None":
        return super()._get_field("pools", base=self._pb2_base_, explicit_presence=True,
        wrap=NetworkPool,
        )
    @pools.setter
    def pools(self, value: "abc.MutableSequence[NetworkPool]|None") -> None:
        return super()._set_field("pools",value, base=self._pb2_base_,explicit_presence=True)
    
class NetworkPool(message_1.Message):
    _PB2_CLASS_ = network_pb2.NetworkPool
    _pb2_base_: network_pb2.NetworkPool
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class NetworkStatus(message_1.Message):
    _PB2_CLASS_ = network_pb2.NetworkStatus
    _pb2_base_: network_pb2.NetworkStatus
    
    class State(pb_enum.Enum):
        _PB2_DESCRIPTOR_ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.vpc.v1.NetworkStatus.State",network_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATE_UNSPECIFIED = 0
        CREATING = 1
        READY = 2
        DELETING = 3
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        state: "NetworkStatus.State|network_pb2.NetworkStatus.State|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if state is not None:
            self.state = state
    
    @property
    def state(self) -> "NetworkStatus.State":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=NetworkStatus.State,
        )
    @state.setter
    def state(self, value: "NetworkStatus.State|network_pb2.NetworkStatus.State") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/vpc/v1/network_service.proto
class GetNetworkRequest(message_1.Message):
    _PB2_CLASS_ = network_service_pb2.GetNetworkRequest
    _pb2_base_: network_service_pb2.GetNetworkRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class GetNetworkByNameRequest(message_1.Message):
    _PB2_CLASS_ = network_service_pb2.GetNetworkByNameRequest
    _pb2_base_: network_service_pb2.GetNetworkByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
class ListNetworksRequest(message_1.Message):
    _PB2_CLASS_ = network_service_pb2.ListNetworksRequest
    _pb2_base_: network_service_pb2.ListNetworksRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListNetworksResponse(message_1.Message):
    _PB2_CLASS_ = network_service_pb2.ListNetworksResponse
    _pb2_base_: network_service_pb2.ListNetworksResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Network]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Network]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Network,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Network]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/vpc/v1/pool_service.proto
class GetPoolRequest(message_1.Message):
    _PB2_CLASS_ = pool_service_pb2.GetPoolRequest
    _pb2_base_: pool_service_pb2.GetPoolRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class GetPoolByNameRequest(message_1.Message):
    _PB2_CLASS_ = pool_service_pb2.GetPoolByNameRequest
    _pb2_base_: pool_service_pb2.GetPoolByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
class ListPoolsRequest(message_1.Message):
    _PB2_CLASS_ = pool_service_pb2.ListPoolsRequest
    _pb2_base_: pool_service_pb2.ListPoolsRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListPoolsResponse(message_1.Message):
    _PB2_CLASS_ = pool_service_pb2.ListPoolsResponse
    _pb2_base_: pool_service_pb2.ListPoolsResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Pool]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Pool]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Pool,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Pool]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class UpdatePoolRequest(message_1.Message):
    _PB2_CLASS_ = pool_service_pb2.UpdatePoolRequest
    _pb2_base_: pool_service_pb2.UpdatePoolRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "PoolSpec|pool_pb2.PoolSpec|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "PoolSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=PoolSpec,
        )
    @spec.setter
    def spec(self, value: "PoolSpec|pool_pb2.PoolSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
# file: nebius/vpc/v1/subnet.proto
class Subnet(message_1.Message):
    _PB2_CLASS_ = subnet_pb2.Subnet
    _pb2_base_: subnet_pb2.Subnet
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        metadata: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None" = None,
        spec: "SubnetSpec|subnet_pb2.SubnetSpec|None" = None,
        status: "SubnetStatus|subnet_pb2.SubnetStatus|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
    
    @property
    def metadata(self) -> "v1_1.ResourceMetadata|None":
        return super()._get_field("metadata", base=self._pb2_base_, explicit_presence=True,
        wrap=v1_1.ResourceMetadata,
        )
    @metadata.setter
    def metadata(self, value: "v1_1.ResourceMetadata|metadata_pb2.ResourceMetadata|None") -> None:
        return super()._set_field("metadata",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def spec(self) -> "SubnetSpec|None":
        return super()._get_field("spec", base=self._pb2_base_, explicit_presence=True,
        wrap=SubnetSpec,
        )
    @spec.setter
    def spec(self, value: "SubnetSpec|subnet_pb2.SubnetSpec|None") -> None:
        return super()._set_field("spec",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def status(self) -> "SubnetStatus|None":
        return super()._get_field("status", base=self._pb2_base_, explicit_presence=True,
        wrap=SubnetStatus,
        )
    @status.setter
    def status(self, value: "SubnetStatus|subnet_pb2.SubnetStatus|None") -> None:
        return super()._set_field("status",value, base=self._pb2_base_,explicit_presence=True)
    
class SubnetSpec(message_1.Message):
    _PB2_CLASS_ = subnet_pb2.SubnetSpec
    _pb2_base_: subnet_pb2.SubnetSpec
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        network_id: "builtins.str|None" = None,
        ipv4_private_pools: "IPv4PrivateSubnetPools|subnet_pb2.IPv4PrivateSubnetPools|None" = None,
        ipv4_public_pools: "IPv4PublicSubnetPools|subnet_pb2.IPv4PublicSubnetPools|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if network_id is not None:
            self.network_id = network_id
        if ipv4_private_pools is not None:
            self.ipv4_private_pools = ipv4_private_pools
        if ipv4_public_pools is not None:
            self.ipv4_public_pools = ipv4_public_pools
    
    @property
    def network_id(self) -> "builtins.str":
        return super()._get_field("network_id", base=self._pb2_base_, explicit_presence=False,
        )
    @network_id.setter
    def network_id(self, value: "builtins.str") -> None:
        return super()._set_field("network_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def ipv4_private_pools(self) -> "IPv4PrivateSubnetPools|None":
        return super()._get_field("ipv4_private_pools", base=self._pb2_base_, explicit_presence=True,
        wrap=IPv4PrivateSubnetPools,
        )
    @ipv4_private_pools.setter
    def ipv4_private_pools(self, value: "IPv4PrivateSubnetPools|subnet_pb2.IPv4PrivateSubnetPools|None") -> None:
        return super()._set_field("ipv4_private_pools",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def ipv4_public_pools(self) -> "IPv4PublicSubnetPools|None":
        return super()._get_field("ipv4_public_pools", base=self._pb2_base_, explicit_presence=True,
        wrap=IPv4PublicSubnetPools,
        )
    @ipv4_public_pools.setter
    def ipv4_public_pools(self, value: "IPv4PublicSubnetPools|subnet_pb2.IPv4PublicSubnetPools|None") -> None:
        return super()._set_field("ipv4_public_pools",value, base=self._pb2_base_,explicit_presence=True)
    
class IPv4PrivateSubnetPools(message_1.Message):
    _PB2_CLASS_ = subnet_pb2.IPv4PrivateSubnetPools
    _pb2_base_: subnet_pb2.IPv4PrivateSubnetPools
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        pools: "abc.MutableSequence[SubnetPool]|None" = None,
        use_network_pools: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if pools is not None:
            self.pools = pools
        if use_network_pools is not None:
            self.use_network_pools = use_network_pools
    
    @property
    def pools(self) -> "abc.MutableSequence[SubnetPool]|None":
        return super()._get_field("pools", base=self._pb2_base_, explicit_presence=True,
        wrap=SubnetPool,
        )
    @pools.setter
    def pools(self, value: "abc.MutableSequence[SubnetPool]|None") -> None:
        return super()._set_field("pools",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def use_network_pools(self) -> "builtins.bool":
        return super()._get_field("use_network_pools", base=self._pb2_base_, explicit_presence=False,
        )
    @use_network_pools.setter
    def use_network_pools(self, value: "builtins.bool") -> None:
        return super()._set_field("use_network_pools",value, base=self._pb2_base_,explicit_presence=False)
    
class IPv4PublicSubnetPools(message_1.Message):
    _PB2_CLASS_ = subnet_pb2.IPv4PublicSubnetPools
    _pb2_base_: subnet_pb2.IPv4PublicSubnetPools
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        pools: "abc.MutableSequence[SubnetPool]|None" = None,
        use_network_pools: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if pools is not None:
            self.pools = pools
        if use_network_pools is not None:
            self.use_network_pools = use_network_pools
    
    @property
    def pools(self) -> "abc.MutableSequence[SubnetPool]|None":
        return super()._get_field("pools", base=self._pb2_base_, explicit_presence=True,
        wrap=SubnetPool,
        )
    @pools.setter
    def pools(self, value: "abc.MutableSequence[SubnetPool]|None") -> None:
        return super()._set_field("pools",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def use_network_pools(self) -> "builtins.bool":
        return super()._get_field("use_network_pools", base=self._pb2_base_, explicit_presence=False,
        )
    @use_network_pools.setter
    def use_network_pools(self, value: "builtins.bool") -> None:
        return super()._set_field("use_network_pools",value, base=self._pb2_base_,explicit_presence=False)
    
class SubnetPool(message_1.Message):
    _PB2_CLASS_ = subnet_pb2.SubnetPool
    _pb2_base_: subnet_pb2.SubnetPool
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        cidrs: "abc.MutableSequence[SubnetCidr]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if cidrs is not None:
            self.cidrs = cidrs
    
    @property
    def cidrs(self) -> "abc.MutableSequence[SubnetCidr]|None":
        return super()._get_field("cidrs", base=self._pb2_base_, explicit_presence=True,
        wrap=SubnetCidr,
        )
    @cidrs.setter
    def cidrs(self, value: "abc.MutableSequence[SubnetCidr]|None") -> None:
        return super()._set_field("cidrs",value, base=self._pb2_base_,explicit_presence=True)
    
class SubnetCidr(message_1.Message):
    _PB2_CLASS_ = subnet_pb2.SubnetCidr
    _pb2_base_: subnet_pb2.SubnetCidr
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        cidr: "builtins.str|None" = None,
        state: "AddressBlockState|pool_pb2.AddressBlockState|None" = None,
        max_mask_length: "builtins.int|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if cidr is not None:
            self.cidr = cidr
        if state is not None:
            self.state = state
        if max_mask_length is not None:
            self.max_mask_length = max_mask_length
    
    @property
    def cidr(self) -> "builtins.str":
        return super()._get_field("cidr", base=self._pb2_base_, explicit_presence=False,
        )
    @cidr.setter
    def cidr(self, value: "builtins.str") -> None:
        return super()._set_field("cidr",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def state(self) -> "AddressBlockState":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=AddressBlockState,
        )
    @state.setter
    def state(self, value: "AddressBlockState|pool_pb2.AddressBlockState") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def max_mask_length(self) -> "builtins.int":
        return super()._get_field("max_mask_length", base=self._pb2_base_, explicit_presence=False,
        )
    @max_mask_length.setter
    def max_mask_length(self, value: "builtins.int") -> None:
        return super()._set_field("max_mask_length",value, base=self._pb2_base_,explicit_presence=False)
    
class SubnetStatus(message_1.Message):
    _PB2_CLASS_ = subnet_pb2.SubnetStatus
    _pb2_base_: subnet_pb2.SubnetStatus
    
    class State(pb_enum.Enum):
        _PB2_DESCRIPTOR_ = descriptor.DescriptorWrap[descriptor_1.EnumDescriptor](".nebius.vpc.v1.SubnetStatus.State",subnet_pb2.DESCRIPTOR,descriptor_1.EnumDescriptor)
        STATE_UNSPECIFIED = 0
        CREATING = 1
        READY = 2
        DELETING = 3
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        state: "SubnetStatus.State|subnet_pb2.SubnetStatus.State|None" = None,
        ipv4_private_cidrs: "abc.MutableSequence[builtins.str]|None" = None,
        ipv4_public_cidrs: "abc.MutableSequence[builtins.str]|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if state is not None:
            self.state = state
        if ipv4_private_cidrs is not None:
            self.ipv4_private_cidrs = ipv4_private_cidrs
        if ipv4_public_cidrs is not None:
            self.ipv4_public_cidrs = ipv4_public_cidrs
    
    @property
    def state(self) -> "SubnetStatus.State":
        return super()._get_field("state", base=self._pb2_base_, explicit_presence=False,
        wrap=SubnetStatus.State,
        )
    @state.setter
    def state(self, value: "SubnetStatus.State|subnet_pb2.SubnetStatus.State") -> None:
        return super()._set_field("state",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def ipv4_private_cidrs(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("ipv4_private_cidrs", base=self._pb2_base_, explicit_presence=False,
        )
    @ipv4_private_cidrs.setter
    def ipv4_private_cidrs(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("ipv4_private_cidrs",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def ipv4_public_cidrs(self) -> "abc.MutableSequence[builtins.str]":
        return super()._get_field("ipv4_public_cidrs", base=self._pb2_base_, explicit_presence=False,
        )
    @ipv4_public_cidrs.setter
    def ipv4_public_cidrs(self, value: "abc.MutableSequence[builtins.str]") -> None:
        return super()._set_field("ipv4_public_cidrs",value, base=self._pb2_base_,explicit_presence=False)
    
# file: nebius/vpc/v1/subnet_service.proto
class GetSubnetRequest(message_1.Message):
    _PB2_CLASS_ = subnet_service_pb2.GetSubnetRequest
    _pb2_base_: subnet_service_pb2.GetSubnetRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if id is not None:
            self.id = id
    
    @property
    def id(self) -> "builtins.str":
        return super()._get_field("id", base=self._pb2_base_, explicit_presence=False,
        )
    @id.setter
    def id(self, value: "builtins.str") -> None:
        return super()._set_field("id",value, base=self._pb2_base_,explicit_presence=False)
    
class GetSubnetByNameRequest(message_1.Message):
    _PB2_CLASS_ = subnet_service_pb2.GetSubnetByNameRequest
    _pb2_base_: subnet_service_pb2.GetSubnetByNameRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", base=self._pb2_base_, explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value, base=self._pb2_base_,explicit_presence=False)
    
class ListSubnetsRequest(message_1.Message):
    _PB2_CLASS_ = subnet_service_pb2.ListSubnetsRequest
    _pb2_base_: subnet_service_pb2.ListSubnetsRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        parent_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if parent_id is not None:
            self.parent_id = parent_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def parent_id(self) -> "builtins.str":
        return super()._get_field("parent_id", base=self._pb2_base_, explicit_presence=False,
        )
    @parent_id.setter
    def parent_id(self, value: "builtins.str") -> None:
        return super()._set_field("parent_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListSubnetsByNetworkRequest(message_1.Message):
    _PB2_CLASS_ = subnet_service_pb2.ListSubnetsByNetworkRequest
    _pb2_base_: subnet_service_pb2.ListSubnetsByNetworkRequest
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        network_id: "builtins.str|None" = None,
        page_size: "builtins.int|None" = None,
        page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if network_id is not None:
            self.network_id = network_id
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
    
    @property
    def network_id(self) -> "builtins.str":
        return super()._get_field("network_id", base=self._pb2_base_, explicit_presence=False,
        )
    @network_id.setter
    def network_id(self, value: "builtins.str") -> None:
        return super()._set_field("network_id",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_size(self) -> "builtins.int":
        return super()._get_field("page_size", base=self._pb2_base_, explicit_presence=False,
        )
    @page_size.setter
    def page_size(self, value: "builtins.int") -> None:
        return super()._set_field("page_size",value, base=self._pb2_base_,explicit_presence=False)
    
    @property
    def page_token(self) -> "builtins.str":
        return super()._get_field("page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @page_token.setter
    def page_token(self, value: "builtins.str") -> None:
        return super()._set_field("page_token",value, base=self._pb2_base_,explicit_presence=False)
    
class ListSubnetsResponse(message_1.Message):
    _PB2_CLASS_ = subnet_service_pb2.ListSubnetsResponse
    _pb2_base_: subnet_service_pb2.ListSubnetsResponse
    
    def __init__(
        self,
        initial_message: message_2.Message|None = None,
        *,
        items: "abc.MutableSequence[Subnet]|None" = None,
        next_page_token: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message, "_pb2_base_", self._PB2_CLASS_)
        if items is not None:
            self.items = items
        if next_page_token is not None:
            self.next_page_token = next_page_token
    
    @property
    def items(self) -> "abc.MutableSequence[Subnet]|None":
        return super()._get_field("items", base=self._pb2_base_, explicit_presence=True,
        wrap=Subnet,
        )
    @items.setter
    def items(self, value: "abc.MutableSequence[Subnet]|None") -> None:
        return super()._set_field("items",value, base=self._pb2_base_,explicit_presence=True)
    
    @property
    def next_page_token(self) -> "builtins.str":
        return super()._get_field("next_page_token", base=self._pb2_base_, explicit_presence=False,
        )
    @next_page_token.setter
    def next_page_token(self, value: "builtins.str") -> None:
        return super()._set_field("next_page_token",value, base=self._pb2_base_,explicit_presence=False)
    
