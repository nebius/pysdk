# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

import nebius.base.protos.pb_classes as pb_classes
import nebius.api.nebius.vpc.v1alpha1.network_interface_pb2 as network_interface_pb2
import nebius.base.protos.descriptor as descriptor
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_1
import builtins as builtins
#@ local imports here @#

# file: nebius/vpc/v1alpha1/network_interface.proto
class NetworkInterfaceSpec(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.NetworkInterfaceSpec
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.vpc.v1alpha1.NetworkInterfaceSpec",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        subnet_id: "builtins.str|None" = None,
        name: "builtins.str|None" = None,
        ip_address: "IPAddress|network_interface_pb2.IPAddress|None" = None,
        public_ip_address: "PublicIPAddress|network_interface_pb2.PublicIPAddress|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if name is not None:
            self.name = name
        if ip_address is not None:
            self.ip_address = ip_address
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
    
    @property
    def subnet_id(self) -> "builtins.str":
        return super()._get_field("subnet_id", explicit_presence=False,
        )
    @subnet_id.setter
    def subnet_id(self, value: "builtins.str") -> None:
        return super()._set_field("subnet_id",value,explicit_presence=False,
        )
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False,
        )
    
    @property
    def ip_address(self) -> "IPAddress|None":
        return super()._get_field("ip_address", explicit_presence=True,
        wrap=IPAddress,
        )
    @ip_address.setter
    def ip_address(self, value: "IPAddress|network_interface_pb2.IPAddress|None") -> None:
        return super()._set_field("ip_address",value,explicit_presence=True,
        )
    
    @property
    def public_ip_address(self) -> "PublicIPAddress|None":
        return super()._get_field("public_ip_address", explicit_presence=True,
        wrap=PublicIPAddress,
        )
    @public_ip_address.setter
    def public_ip_address(self, value: "PublicIPAddress|network_interface_pb2.PublicIPAddress|None") -> None:
        return super()._set_field("public_ip_address",value,explicit_presence=True,
        )
    
class IPAddress(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.IPAddress
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.vpc.v1alpha1.IPAddress",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        allocation_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if allocation_id is not None:
            self.allocation_id = allocation_id
    
    @property
    def allocation_id(self) -> "builtins.str":
        return super()._get_field("allocation_id", explicit_presence=False,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=False,
        )
    
class PublicIPAddress(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.PublicIPAddress
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.vpc.v1alpha1.PublicIPAddress",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        allocation_id: "builtins.str|None" = None,
        static: "builtins.bool|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if allocation_id is not None:
            self.allocation_id = allocation_id
        if static is not None:
            self.static = static
    
    @property
    def allocation_id(self) -> "builtins.str|None":
        return super()._get_field("allocation_id", explicit_presence=True,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str|None") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=True,
        )
    
    @property
    def static(self) -> "builtins.bool":
        return super()._get_field("static", explicit_presence=False,
        )
    @static.setter
    def static(self, value: "builtins.bool") -> None:
        return super()._set_field("static",value,explicit_presence=False,
        )
    
class NetworkInterfaceStatus(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.NetworkInterfaceStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.vpc.v1alpha1.NetworkInterfaceStatus",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        index: "builtins.int|None" = None,
        name: "builtins.str|None" = None,
        ip_address: "IPAddressStatus|network_interface_pb2.IPAddressStatus|None" = None,
        public_ip_address: "PublicIPAddressStatus|network_interface_pb2.PublicIPAddressStatus|None" = None,
        mac_address: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if ip_address is not None:
            self.ip_address = ip_address
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address
        if mac_address is not None:
            self.mac_address = mac_address
    
    @property
    def index(self) -> "builtins.int":
        return super()._get_field("index", explicit_presence=False,
        )
    @index.setter
    def index(self, value: "builtins.int") -> None:
        return super()._set_field("index",value,explicit_presence=False,
        )
    
    @property
    def name(self) -> "builtins.str":
        return super()._get_field("name", explicit_presence=False,
        )
    @name.setter
    def name(self, value: "builtins.str") -> None:
        return super()._set_field("name",value,explicit_presence=False,
        )
    
    @property
    def ip_address(self) -> "IPAddressStatus":
        return super()._get_field("ip_address", explicit_presence=False,
        wrap=IPAddressStatus,
        )
    @ip_address.setter
    def ip_address(self, value: "IPAddressStatus|network_interface_pb2.IPAddressStatus") -> None:
        return super()._set_field("ip_address",value,explicit_presence=False,
        )
    
    @property
    def public_ip_address(self) -> "PublicIPAddressStatus":
        return super()._get_field("public_ip_address", explicit_presence=False,
        wrap=PublicIPAddressStatus,
        )
    @public_ip_address.setter
    def public_ip_address(self, value: "PublicIPAddressStatus|network_interface_pb2.PublicIPAddressStatus") -> None:
        return super()._set_field("public_ip_address",value,explicit_presence=False,
        )
    
    @property
    def mac_address(self) -> "builtins.str":
        return super()._get_field("mac_address", explicit_presence=False,
        )
    @mac_address.setter
    def mac_address(self, value: "builtins.str") -> None:
        return super()._set_field("mac_address",value,explicit_presence=False,
        )
    
class IPAddressStatus(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.IPAddressStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.vpc.v1alpha1.IPAddressStatus",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        address: "builtins.str|None" = None,
        allocation_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if address is not None:
            self.address = address
        if allocation_id is not None:
            self.allocation_id = allocation_id
    
    @property
    def address(self) -> "builtins.str":
        return super()._get_field("address", explicit_presence=False,
        )
    @address.setter
    def address(self, value: "builtins.str") -> None:
        return super()._set_field("address",value,explicit_presence=False,
        )
    
    @property
    def allocation_id(self) -> "builtins.str":
        return super()._get_field("allocation_id", explicit_presence=False,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=False,
        )
    
class PublicIPAddressStatus(pb_classes.Message):
    __PB2_CLASS__ = network_interface_pb2.PublicIPAddressStatus
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.vpc.v1alpha1.PublicIPAddressStatus",network_interface_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        address: "builtins.str|None" = None,
        allocation_id: "builtins.str|None" = None,
    ) -> None:
        super().__init__(initial_message)
        if address is not None:
            self.address = address
        if allocation_id is not None:
            self.allocation_id = allocation_id
    
    @property
    def address(self) -> "builtins.str":
        return super()._get_field("address", explicit_presence=False,
        )
    @address.setter
    def address(self, value: "builtins.str") -> None:
        return super()._set_field("address",value,explicit_presence=False,
        )
    
    @property
    def allocation_id(self) -> "builtins.str":
        return super()._get_field("allocation_id", explicit_presence=False,
        )
    @allocation_id.setter
    def allocation_id(self, value: "builtins.str") -> None:
        return super()._set_field("allocation_id",value,explicit_presence=False,
        )
    
__all__ = [
    #@ local import names here @#
    "NetworkInterfaceSpec",
    "IPAddress",
    "PublicIPAddress",
    "NetworkInterfaceStatus",
    "IPAddressStatus",
    "PublicIPAddressStatus",
]
